<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" metadata-complete="true" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <display-name>constellation</display-name>

    <!-- constellation installer -->
    <listener>
        <listener-class>org.constellation.Installer</listener-class>
    </listener>
    
    <!-- Shiro filter handling security access -->
    <filter>
        <filter-name>Shiro</filter-name>
        <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Shiro</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
      <description>Filter that exposes ogcServiceType and ogcServiceName to logging appender.</description>
      <display-name>MDC Log4j filter</display-name>
      <filter-name>MDCFilter</filter-name>
      <filter-class>org.constellation.service.logger.MDCFilter</filter-class>
    </filter>
    <filter-mapping>
      <filter-name>MDCFilter</filter-name>
      <url-pattern>/WS/*</url-pattern>
    </filter-mapping>
    
  

    <!-- Filter to allow AJAX cross-origin requests -->
    <filter>
        <filter-name>CorsFilter</filter-name>
        <filter-class>org.constellation.filter.CorsFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CorsFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- REST Servlet for constellation web service -->
    <servlet>
        <servlet-name>ServletAdaptor</servlet-name>
        <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
        <init-param>
          <param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
          <param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
        </init-param>
        <init-param>
          <param-name>com.sun.jersey.config.property.packages</param-name>
             <!-- To enable configuration  service add packageName: org.constellation.configuration.ws                           -->
             <!-- To enable CSW            service add packageName: org.constellation.metadata.ws.rs                             -->
             <!-- To enable SOS            service add packageName: org.constellation.sos.ws.rs                                  -->
             <!-- To enable WMS            service add packageName: org.constellation.map.ws.rs;org.constellation.ws.rs.provider -->
             <!-- To enable WCS            service add packageName: org.constellation.coverage.ws.rs                             -->
             <!-- To enable WPS            service add packageName: org.constellation.wps.ws.rs                                  -->
             <!-- To enable WFS            service add packageName: org.constellation.wfs.ws.rs                                  -->
             <!-- To enable WMTS           service add packageName: org.constellation.wmts.ws.rs                                 -->
          <param-value>${constellation.services.packages}</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletAdaptor</servlet-name>
        <url-pattern>/WS/*</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>newREST</servlet-name>
        <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
            <param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
        </init-param>
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>org.constellation.rest.api;
                         org.constellation.ws.rest;
                         org.constellation.ws.rs.provider</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>newREST</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>

    <!--  SOAP enabling

        In Glassfish: To enable SOAP service in glassfish remove the property 'metadata-complete="true"' in the web-app tag (at the top of this document)
        In Tomcat   : 1) Uncomment the WSServletContextListener listener.
                      2) Rename the file sun-jaxws.xml.backup  in sun-jaxws.xml and uncomment the endpoint you want to enable.

    >
   <listener>
       <listener-class>com.sun.xml.ws.transport.http.servlet.WSServletContextListener</listener-class>
   </listener-->

    <!-- webdav server servlet -->
    <servlet>
        <servlet-name>milton</servlet-name>
        <servlet-class>com.bradmcevoy.http.MiltonServlet</servlet-class>
        <init-param>
            <param-name>resource.factory.class</param-name>
            <param-value>org.constellation.webdav.WebdavService</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>milton</servlet-name>
        <url-pattern>/webdav/*</url-pattern>
    </servlet-mapping> 
    
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

</web-app>
