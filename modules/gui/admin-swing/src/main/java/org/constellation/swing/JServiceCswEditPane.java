/*
 *    Constellation - An open source and standard compliant SDI
 *    http://www.constellation-sdi.org
 *
 *    (C) 2012, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */

package org.constellation.swing;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ResourceBundle;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import org.constellation.admin.service.ConstellationServer;
import org.constellation.configuration.Instance;
import org.constellation.generic.database.Automatic;
import static org.constellation.swing.JServiceEditionPane.LOGGER;
import org.openide.util.NbBundle;

/**
 *
 * @author guilhem
 */
public class JServiceCswEditPane extends JServiceEditionPane {

    private ConstellationServer server;
    private Instance serviceInstance;
    private Automatic configuration; 
    private JServiceEditionPane specificPane;
    
    /**
     * Creates new form JServiceCswEditPane
     */
    public JServiceCswEditPane() {
        initComponents();
    }

    /**
     * Creates new form JServiceMapEditPane
     */
    public JServiceCswEditPane(final ConstellationServer server, final Instance serviceInstance, final Object configuration) {
        this.server = server;
        this.serviceInstance = serviceInstance;
        this.configuration = (configuration instanceof Automatic) ? (Automatic) configuration : null;
        initComponents();
        if (this.configuration != null) {
            if (this.configuration.getFormat().equals("mdweb")) {
                specificPane = new JCswMdwEditPane(this.configuration);
                specificPane.setSize(562, 278);
                centerPane.add(BorderLayout.CENTER, specificPane);
            } else if (this.configuration.getFormat().equals("filesystem")) {
                specificPane = new JCswFsEditPane(this.configuration);
                specificPane.setSize(450, 86);
                centerPane.add(BorderLayout.CENTER, specificPane);
            } else {
                LOGGER.log(Level.WARNING, "Unexpected CSW format:{0}", this.configuration.getFormat());
            }
        }
        repaint();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        guiDataSourceCombo = new JComboBox();
        centerPane = new JPanel();
        refreshIndexButton = new JButton();

        ResourceBundle bundle = ResourceBundle.getBundle("org/constellation/swing/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("sourceType")); // NOI18N

        guiDataSourceCombo.setModel(new DefaultComboBoxModel(new String[] { "mdweb", "filesystem" }));
        guiDataSourceCombo.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                guiDataSourceComboItemStateChanged(evt);
            }
        });

        centerPane.setPreferredSize(new Dimension(236, 236));

        GroupLayout centerPaneLayout = new GroupLayout(centerPane);
        centerPane.setLayout(centerPaneLayout);
        centerPaneLayout.setHorizontalGroup(
            centerPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        centerPaneLayout.setVerticalGroup(
            centerPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        refreshIndexButton.setText(bundle.getString("refreshIndex")); // NOI18N
        refreshIndexButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                refreshIndexButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(centerPane, GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshIndexButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiDataSourceCombo, 0, 315, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(guiDataSourceCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(centerPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(refreshIndexButton)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guiDataSourceComboItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_guiDataSourceComboItemStateChanged
        centerPane.removeAll();
        if (guiDataSourceCombo.getSelectedItem().equals("mdweb")) {
            specificPane = new JCswMdwEditPane(this.configuration);
            specificPane.setSize(562, 278);
            centerPane.add(BorderLayout.CENTER, specificPane);
        } else if (guiDataSourceCombo.getSelectedItem().equals("filesystem")) {
            specificPane = new JCswFsEditPane(this.configuration);
            specificPane.setSize(450, 86);
            centerPane.add(BorderLayout.CENTER, specificPane);
        } else {
            LOGGER.log(Level.WARNING, "Unexpected CSW format:{0}", this.configuration.getFormat());
        }
        repaint();
    }//GEN-LAST:event_guiDataSourceComboItemStateChanged

    private void refreshIndexButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshIndexButtonActionPerformed
        server.csws.refreshIndex(serviceInstance.getName(), false);
    }//GEN-LAST:event_refreshIndexButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel centerPane;
    private JComboBox guiDataSourceCombo;
    private JLabel jLabel1;
    private JButton refreshIndexButton;
    // End of variables declaration//GEN-END:variables

    private void updateConfiguration() {
        if (specificPane != null) {
            this.configuration = (Automatic) specificPane.getConfiguration();
        }
        
    }
    
    @Override
    public Object getConfiguration() {
        updateConfiguration();
        return configuration;
    }
}
