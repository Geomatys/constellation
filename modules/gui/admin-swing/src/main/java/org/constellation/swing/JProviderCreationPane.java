/*
 *    Constellation - An open source and standard compliant SDI
 *    http://www.constellation-sdi.org
 *
 *    (C) 2012, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.constellation.swing;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.constellation.admin.service.ConstellationServer;
import org.constellation.configuration.AcknowlegementType;
import org.constellation.configuration.ProviderServiceReport;
import org.constellation.configuration.ProvidersReport;
import org.geotoolkit.gui.swing.propertyedit.JFeatureOutLine;
import org.geotoolkit.parameter.Parameters;
import org.jdesktop.swingx.combobox.ListComboBoxModel;
import org.opengis.feature.Property;
import org.opengis.parameter.GeneralParameterDescriptor;
import org.opengis.parameter.ParameterDescriptorGroup;
import org.opengis.parameter.ParameterValueGroup;

/**
 *
 * @author Johann Sorel (Geomatys)
 */
public class JProviderCreationPane extends javax.swing.JPanel {

    private final ConstellationServer cstl;
    private final JFeatureOutLine guiParameterEditor = new JFeatureOutLine();
    
    /**
     * Creates new form JProviderCreationPane
     */
    public JProviderCreationPane(final ConstellationServer cstl) {
        this.cstl = cstl;
        initComponents();
        
        guiType.setRenderer(new DataRenderer());
        guiSubType.setRenderer(new DataRenderer());
        guiParameters.setViewportView(guiParameterEditor);
        
        final List<Object> services = new ArrayList<Object>();
        services.add("-");
        final ProvidersReport report = cstl.providers.listProviders();
        for(ProviderServiceReport service : report.getProviderServices()){
            services.add(service);
        }
        guiType.setModel(new ListComboBoxModel(services));
    }

    public String getType(){
        return ((ProviderServiceReport)guiType.getSelectedItem()).getType();
    }
    
    public ParameterValueGroup getParameters(){
        
        final String type = getType();
        final ParameterDescriptorGroup serviceDesc = (ParameterDescriptorGroup) cstl.providers.getServiceDescriptor(type);
        final ParameterDescriptorGroup sourceDesc = (ParameterDescriptorGroup) serviceDesc.descriptor("source");
        ParameterValueGroup sources = sourceDesc.createValue();
        sources.parameter("id").setValue(guiId.getText());

        final ParameterValueGroup params;
        if(guiSubType.isEnabled()){
            //we have a subtype
            final ParameterDescriptorGroup desc = (ParameterDescriptorGroup) guiSubType.getSelectedItem();
            params = guiParameterEditor.getEditedAsParameter(desc);
            sources.groups("choice").get(0).values().add(params);
            
        }else if(guiType.getSelectedItem() instanceof ProviderServiceReport){
            final ProviderServiceReport rep = (ProviderServiceReport) guiType.getSelectedItem();
            final ParameterDescriptorGroup desc = (ParameterDescriptorGroup) cstl.providers.getSourceDescriptor(rep.getType());
            params = guiParameterEditor.getEditedAsParameter(desc);
            Parameters.copy(params, sources.groups(params.getDescriptor().getName().getCode()).get(0));
        }else{
            //no type selected
            return null;
        }
                
        return sources;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiLblType = new javax.swing.JLabel();
        guiType = new javax.swing.JComboBox();
        guiLblSubType = new javax.swing.JLabel();
        guiSubType = new javax.swing.JComboBox();
        guiLblId = new javax.swing.JLabel();
        guiId = new javax.swing.JTextField();
        guiParameters = new javax.swing.JScrollPane();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/constellation/swing/Bundle"); // NOI18N
        guiLblType.setText(bundle.getString("type")); // NOI18N

        guiType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                guiTypeItemStateChanged(evt);
            }
        });

        guiLblSubType.setText(bundle.getString("subtype")); // NOI18N

        guiSubType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                guiSubTypeItemStateChanged(evt);
            }
        });

        guiLblId.setText(bundle.getString("id")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiParameters)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiLblType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiType, 0, 321, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiLblSubType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiSubType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiLblId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiId)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {guiLblSubType, guiLblType});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiLblId)
                    .addComponent(guiId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiLblType)
                    .addComponent(guiType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiLblSubType)
                    .addComponent(guiSubType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiParameters, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void guiTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_guiTypeItemStateChanged
        
        final Object candidate = guiType.getSelectedItem();
        
        guiSubType.setModel(new ListComboBoxModel(new ArrayList()));
                
        if (candidate instanceof ProviderServiceReport) {
            final ProviderServiceReport report = (ProviderServiceReport) candidate;
            final ParameterDescriptorGroup desc = (ParameterDescriptorGroup) cstl.providers.getSourceDescriptor(report.getType());
            
            guiParameterEditor.setEdited((Property)null);
            
            if("choice".equalsIgnoreCase(desc.getName().getCode())){
                guiSubType.setModel(new ListComboBoxModel(desc.descriptors()));
                guiLblSubType.setEnabled(true);
                guiSubType.setEnabled(true);
            }else{
                guiLblSubType.setEnabled(false);
                guiSubType.setEnabled(false);
                guiParameterEditor.setEdited(desc.createValue());
            }
            
            guiSubType.setSelectedIndex(-1);
        }
        
    }//GEN-LAST:event_guiTypeItemStateChanged

    private void guiSubTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_guiSubTypeItemStateChanged
        if (guiSubType.getSelectedIndex() > -1) {
            final ParameterDescriptorGroup subTypeDescriptor = (ParameterDescriptorGroup) guiSubType.getSelectedItem();
            guiParameterEditor.setEdited((ParameterValueGroup) subTypeDescriptor.createValue());
        }
    }//GEN-LAST:event_guiSubTypeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField guiId;
    private javax.swing.JLabel guiLblId;
    private javax.swing.JLabel guiLblSubType;
    private javax.swing.JLabel guiLblType;
    private javax.swing.JScrollPane guiParameters;
    private javax.swing.JComboBox guiSubType;
    private javax.swing.JComboBox guiType;
    // End of variables declaration//GEN-END:variables

    /**
     * Extends label display of the combo boxes.
     */
    private static class DataRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            final JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if (value instanceof ProviderServiceReport) {
                final ProviderServiceReport report = (ProviderServiceReport) value;
                lbl.setText(report.getType());
            } else if (value instanceof GeneralParameterDescriptor) {
                final GeneralParameterDescriptor desc = (GeneralParameterDescriptor) value;
                String name = desc.getName().getCode();
                name = name.replaceAll("Parameters", "");
                if(name.endsWith("-")){
                    name = name.substring(0, name.length()-1);
                }
                lbl.setText(name);
            }

            return lbl;
        }
    }
    
    
    /**
     * 
     * @param server
     * @return 
     */
    public static void showDialog(final ConstellationServer server){
        
        final JProviderCreationPane pane = new JProviderCreationPane(server);
                
        final int res = JOptionPane.showOptionDialog(null, new Object[]{pane}, 
                LayerRowModel.BUNDLE.getString("createProviderMsg"), 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, 
                null);
                
        if(JOptionPane.OK_OPTION == res){                    
            final String type = pane.getType();
            final ParameterValueGroup parameters = pane.getParameters();
            if(type != null && parameters != null){
                //request server for creation. If it worked, a null value is returned.
                final AcknowlegementType response = server.providers.createProvider(type, parameters);
                if (response != null) {
                    JOptionPane.showMessageDialog(null, response.getMessage(), response.getStatus(), JOptionPane.WARNING_MESSAGE);
                }
            }    
        }
        
    }

}
