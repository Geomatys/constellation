/*
 *    Constellation - An open source and standard compliant SDI
 *    http://www.constellation-sdi.org
 *
 *    (C) 2007 - 2008, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */

package org.constellation.sos.io;

import java.io.StringReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

// constellation dependencies
import org.constellation.gml.v311.DirectPositionType;
import org.constellation.sml.AbstractSensorML;
import org.constellation.ws.WebServiceException;
import static org.constellation.ows.OWSExceptionCode.*;

// MDWeb dependencies
import org.mdweb.model.schemas.Standard;
import org.mdweb.model.storage.Catalog;
import org.mdweb.model.storage.Form;
import org.mdweb.sql.v20.Reader20;
import org.mdweb.xml.Writer;

/**
 *
 * @author Guilhem Legal
 */
public class MDWebSensorReader extends SensorReader {

     /**
     * A simple Connection to the SensorML database.
     */
    private final Connection sensorMLConnection;

    /**
     * A Reader to the SensorML database.
     */
    private final Reader20 sensorMLReader;

    /**
     * the data catalog for SensorML database.
     */
    private final Catalog SMLCatalog;

    /**
     * An SQL satetement finding the last sensor ID recorded
     */
    private final PreparedStatement newSensorIdStmt;

    /**
     * An SQL statement get a sensorML value in the MDWeb database
     */
    private final PreparedStatement getValueStmt;

    /**
     * The properties file allowing to store the id mapping between physical and database ID.
     */
    private final Properties map;
    
    /**
     * An mdweb xml writer.
     */
    private final Writer XMLWriter;

    /**
     * A JAXB unmarshaller used to unmarshall the xml generated by the XMLWriter.
     */
    private Unmarshaller unmarshaller;

    /**
     *
     * @param dataSourceSML
     * @param sensorIdBase
     * @param map
     * @throws java.io.IOException
     * @throws org.constellation.catalog.NoSuchTableException
     * @throws java.sql.SQLException
     */
    public MDWebSensorReader(Connection connection, String sensorIdBase, Properties map) throws WebServiceException  {
        super();
        try {
            sensorMLConnection = connection;
            sensorMLReader     = new Reader20(Standard.SENSORML, sensorMLConnection);
            SMLCatalog         = sensorMLReader.getCatalog("SMLC");
            XMLWriter          = new Writer(sensorMLReader);
            this.map           = map;

            //we initialize the unmarshaller
            JAXBContext context = JAXBContext.newInstance("org.constellation.sml.v100:org.constellation.sml.v101");
            unmarshaller        = context.createUnmarshaller();

            //we build the prepared Statement
            newSensorIdStmt    = sensorMLConnection.prepareStatement("SELECT Count(*) FROM \"Forms\" WHERE title LIKE '%" + sensorIdBase + "%' ");
            getValueStmt       = sensorMLConnection.prepareStatement(" SELECT value FROM \"TextValues\" WHERE id_value=? AND form=?");

        } catch (JAXBException ex) {
            ex.printStackTrace();
            throw new WebServiceException("JAXBException while starting the MDweb Senor reader", NO_APPLICABLE_CODE);
        } catch (SQLException ex) {
            throw new WebServiceException("SQLBException while starting the MDweb Senor reader: " + "\n" + ex.getMessage(), NO_APPLICABLE_CODE);
        }
    }

    @Override
    public AbstractSensorML getSensor(String sensorId) throws WebServiceException {
        try {
            String dbId = map.getProperty(sensorId);
            if (dbId == null) {
                dbId = sensorId;
            }
            // we find the form id describing the sensor.
            int id = sensorMLReader.getIdFromTitleForm(dbId);
            logger.info("describesensor id: " + dbId);
            logger.info("describesensor mdweb id: " + id);
            // we get the form
            Form f = sensorMLReader.getForm(SMLCatalog, id);

            if (f == null) {
                throw new WebServiceException("this sensor is not registered in the database!",
                        INVALID_PARAMETER_VALUE, "procedure");
            }
            //we transform the form into an XML string
           StringReader sr = new StringReader(XMLWriter.writeForm(f));
           Object unmarshalled = unmarshaller.unmarshal(sr);
           if (unmarshalled instanceof JAXBElement) {
               unmarshalled = ((JAXBElement)unmarshalled).getValue();
           }
           if (unmarshalled instanceof AbstractSensorML)
               return (AbstractSensorML) unmarshalled;
           else
              throw new WebServiceException("The form unmarshalled is not a sensor", NO_APPLICABLE_CODE);

        } catch (SQLException ex) {
            ex.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + ex.getMessage(),
                                         NO_APPLICABLE_CODE);
        } catch (JAXBException ex) {
            ex.printStackTrace();
            throw new WebServiceException("JAXBException while unmarshalling the sensor", NO_APPLICABLE_CODE);
        }
    }
    
    @Override
    public DirectPositionType getSensorPosition(String sensorID) throws WebServiceException {
        try {
            int formID = sensorMLReader.getIdFromTitleForm(sensorID);
            String SRS = "";
            //we get the srs name
            getValueStmt.setString(1, "SensorML:SensorML.1:member.1:location.1:pos.1:srsName.1");
            getValueStmt.setInt(2, formID);
            ResultSet result = getValueStmt.executeQuery();
            if (result.next()) {
                SRS = result.getString(1);
                if (SRS.indexOf(':') != -1) {
                    SRS = SRS.substring(SRS.lastIndexOf(':') + 1);
                }
                logger.info("srsName:" + SRS);
            } else {
                logger.severe("there is no srsName for the piezo location");
            }
            result.close();
            
            List<Double> coordinate = new ArrayList<Double>();
            // we get the coordinates
            getValueStmt.setString(1, "SensorML:SensorML.1:member.1:location.1:pos.1");
            getValueStmt.setInt(2, formID);
            result = getValueStmt.executeQuery();
            if (result.next()) {
                String coordinates = result.getString(1);
                logger.info(coordinates);
                Double x = Double.parseDouble(coordinates.substring(0, coordinates.indexOf(' ')));
                Double y = Double.parseDouble(coordinates.substring(coordinates.indexOf(' ') + 1));
                coordinate  =  Arrays.asList(x, y);
            } else {
                logger.severe("there is no coordinates for the piezo location");
                return null;
            }
            result.close();
            
            return new DirectPositionType(SRS, 2, coordinate);

        } catch (SQLException e) {
            e.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + e.getMessage(),
                                             NO_APPLICABLE_CODE);
        }
    }

    private List<Integer> getNetworkIndex(int formID) throws WebServiceException {
        try {
            int i = 1;
            List<Integer> networksIndex = new ArrayList<Integer>();
            boolean moreClassifier = true;
            while (moreClassifier) {

                getValueStmt.setString(1, "SensorML:SensorML.1:member.1:classification.1:classifier." + i + ":name.1");
                getValueStmt.setInt(2,    formID);
                ResultSet result = getValueStmt.executeQuery();
                moreClassifier   = result.next();
                if (moreClassifier) {
                    String value = result.getString(1);
                    if (value.equals("network")){
                        networksIndex.add(i);

                    }
                }
                result.close();
                i++;
            }
            return networksIndex;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + e.getMessage(),
                                             NO_APPLICABLE_CODE);
        }
    }

    @Override
    public List<String> getNetworkNames(String sensorID) throws WebServiceException {
        try {
            int formID = sensorMLReader.getIdFromTitleForm(sensorID);
            List<Integer> indexes = getNetworkIndex(formID);
            List<String> networkNames = new ArrayList<String>();
            for (Integer index : indexes) {
                getValueStmt.setString(1, "SensorML:SensorML.1:member.1:classification.1:classifier." + index + ":value.1");
                getValueStmt.setInt(2,    formID);
                ResultSet result = getValueStmt.executeQuery();
                
                if (result.next()) {
                    networkNames.add(result.getString(1));
                }
                result.close();
            }
            return networkNames;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + e.getMessage(),
                                             NO_APPLICABLE_CODE);
        }
    }

    /**
     * Create a new identifier for an observation by searching in the O&M database.
     */
    @Override
    public int getNewSensorId() throws WebServiceException {
        try {
            ResultSet res = newSensorIdStmt.executeQuery();
            int id = -1;
            while (res.next()) {
                id = res.getInt(1);
            }
            res.close();
            return (id + 1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + e.getMessage(),
                                             NO_APPLICABLE_CODE);
        }
    }

    @Override
    public void destroy() {
        try {
            newSensorIdStmt.close();
            sensorMLConnection.close();
            sensorMLReader.dispose();

        } catch (SQLException ex) {
            logger.severe("SQLException while closing SOSWorker");
        }
    }

}
