/*
 *    Constellation - An open source and standard compliant SDI
 *    http://www.constellation-sdi.org
 *
 *    (C) 2007 - 2008, Geomatys
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */

package org.constellation.sos.io;

import java.io.StringReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

// constellation dependencies
import org.constellation.sml.AbstractSensorML;
import org.constellation.ws.WebServiceException;
import static org.constellation.ows.OWSExceptionCode.*;

// MDWeb dependencies
import org.mdweb.model.schemas.Standard;
import org.mdweb.model.storage.Catalog;
import org.mdweb.model.storage.Form;
import org.mdweb.sql.v20.Reader20;
import org.mdweb.xml.Writer;

/**
 *
 * @author Guilhem Legal
 */
public class MDWebSensorReader extends SensorReader {

     /**
     * A simple Connection to the SensorML database.
     */
    private final Connection sensorMLConnection;

    /**
     * A Reader to the SensorML database.
     */
    private final Reader20 sensorMLReader;

    /**
     * the data catalog for SensorML database.
     */
    private final Catalog SMLCatalog;

    /**
     * The properties file allowing to store the id mapping between physical and database ID.
     */
    private final Properties map;
    
    /**
     * An mdweb xml writer.
     */
    private final Writer XMLWriter;

    /**
     * A JAXB unmarshaller used to unmarshall the xml generated by the XMLWriter.
     */
    private Unmarshaller unmarshaller;

    /**
     *
     * @param dataSourceSML
     * @param sensorIdBase
     * @param map
     * @throws java.io.IOException
     * @throws org.constellation.catalog.NoSuchTableException
     * @throws java.sql.SQLException
     */
    public MDWebSensorReader(Connection connection, String sensorIdBase, Properties map) throws WebServiceException  {
        try {
            sensorMLConnection = connection;
            sensorMLReader     = new Reader20(Standard.SENSORML, sensorMLConnection);
            SMLCatalog         = sensorMLReader.getCatalog("SMLC");
            XMLWriter          = new Writer(sensorMLReader);
            this.map           = map;

            //we initialize the unmarshaller
            JAXBContext context = JAXBContext.newInstance("org.constellation.sml.v100:org.constellation.sml.v101");
            unmarshaller        = context.createUnmarshaller();

        } catch (JAXBException ex) {
            ex.printStackTrace();
            throw new WebServiceException("JAXBException while starting the MDweb Senor reader", NO_APPLICABLE_CODE);
        } catch (SQLException ex) {
            throw new WebServiceException("SQLBException while starting the MDweb Senor reader: " + "\n" + ex.getMessage(), NO_APPLICABLE_CODE);
        }
    }

    @Override
    public AbstractSensorML getSensor(String sensorId) throws WebServiceException {
        try {
            String dbId = map.getProperty(sensorId);
            if (dbId == null) {
                dbId = sensorId;
            }
            // we find the form id describing the sensor.
            int id = sensorMLReader.getIdFromTitleForm(dbId);
            logger.info("describesensor id: " + dbId);
            logger.info("describesensor mdweb id: " + id);
            // we get the form
            Form f = sensorMLReader.getForm(SMLCatalog, id);

            if (f == null) {
                throw new WebServiceException("this sensor is not registered in the database!",
                        INVALID_PARAMETER_VALUE, "procedure");
            }
            //we transform the form into an XML string
           StringReader sr = new StringReader(XMLWriter.writeForm(f));
           Object unmarshalled = unmarshaller.unmarshal(sr);
           if (unmarshalled instanceof JAXBElement) {
               unmarshalled = ((JAXBElement)unmarshalled).getValue();
           }
           if (unmarshalled instanceof AbstractSensorML)
               return (AbstractSensorML) unmarshalled;
           else
              throw new WebServiceException("The form unmarshalled is not a sensor", NO_APPLICABLE_CODE);

        } catch (SQLException ex) {
            ex.printStackTrace();
            throw new WebServiceException("the service has throw a SQL Exception:" + ex.getMessage(),
                                         NO_APPLICABLE_CODE);
        } catch (JAXBException ex) {
            ex.printStackTrace();
            throw new WebServiceException("JAXBException while unmarshalling the sensor", NO_APPLICABLE_CODE);
        }
    }
    
    @Override
    public void destroy() {
        try {
            sensorMLConnection.close();
            sensorMLReader.dispose();

        } catch (SQLException ex) {
            logger.severe("SQLException while closing SOSWorker");
        }
    }
}
