/*
 *    Constellation - An open source and standard compliant SDI
 *    http://www.constellation-sdi.org
 *
 * Copyright 2014 Geomatys.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.constellation.sos.io.internal;

import static org.geotoolkit.ows.xml.OWSExceptionCode.NO_APPLICABLE_CODE;

import java.io.StringWriter;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.inject.Inject;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.apache.sis.util.logging.Logging;
import org.apache.sis.xml.MarshallerPool;
import org.constellation.admin.SensorBusiness;
import org.constellation.database.api.jooq.tables.pojos.Sensor;
import org.constellation.generic.database.Automatic;
import org.constellation.metadata.io.MetadataIoException;
import org.constellation.sos.factory.SMLFactory;
import org.constellation.sos.io.SensorWriter;
import org.constellation.ws.CstlServiceException;
import org.geotoolkit.sml.xml.AbstractSensorML;
import org.geotoolkit.sml.xml.SensorMLMarshallerPool;
import org.geotoolkit.sml.xml.SensorMLUtilities;

/**
 * A sensorML Writer working on a fileSystem.
 *
 * @author Guilhem Legal (Geomatys)
 */
public class InternalSensorWriter implements SensorWriter {

    /**
     * use for debugging purpose
     */
    protected static final Logger LOGGER = Logging.getLogger("org.constellation.sos");

    @Inject
    private SensorBusiness sensorBusiness;
    
    /**
     * A JAXB unmarshaller used to unmarshall the xml generated by the XMLWriter.
     */
    private final MarshallerPool marshallerPool;

    /**
     * The base identifier of all the sensor.
     */
    private final String sensorIdBase;

    public InternalSensorWriter(final Automatic configuration,  final Map<String, Object> properties) throws MetadataIoException {
        if (configuration == null) {
            throw new MetadataIoException("The sensor configuration object is null", NO_APPLICABLE_CODE);
        }
        this.sensorIdBase = (String) properties.get(SMLFactory.SENSOR_ID_BASE);
        this.marshallerPool =  SensorMLMarshallerPool.getInstance();
        if (marshallerPool == null) {
            throw new MetadataIoException("Unable to initialize the InternalSensorWriter JAXB context", NO_APPLICABLE_CODE);
        }

    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean writeSensor(String id, final AbstractSensorML sensor) throws CstlServiceException {
        try {
            final Marshaller marshaller = marshallerPool.acquireMarshaller();
            final StringWriter sw = new StringWriter();
            marshaller.marshal(sensor, sw);
            marshallerPool.recycle(marshaller);
            
            final Sensor s = sensorBusiness.getSensor(id);
            if (s != null) {
                s.setMetadata(sw.toString());
               sensorBusiness.update(s);
            } else {
               sensorBusiness.create(id, SensorMLUtilities.getSensorMLType(sensor), null, sw.toString());
            }
        } catch (JAXBException ex) {
            String msg = ex.getMessage();
            if (msg == null && ex.getCause() != null) {
                msg = ex.getCause().getMessage();
            }
            throw new CstlServiceException("the service has throw a JAXB Exception:" + msg,
                                           ex, NO_APPLICABLE_CODE);
        }
        return true;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean deleteSensor(String id) throws CstlServiceException {
        final Sensor s = sensorBusiness.getSensor(id);
        if (s != null) {
            sensorBusiness.delete(id);
            return true;
        } else {
            LOGGER.log(Level.WARNING, "unable to find a sensor {0} to remove", id);
            return false;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int replaceSensor(String id, final AbstractSensorML sml) throws CstlServiceException {
        try {
            final Sensor sensor = sensorBusiness.getSensor(id);
            if (sensor != null) {
                final Marshaller marshaller = marshallerPool.acquireMarshaller();
                final StringWriter sw = new StringWriter();
                marshaller.marshal(sml, sw);
                marshallerPool.recycle(marshaller);
                sensor.setMetadata(sw.toString());
                sensorBusiness.update(sensor);
            }
            return 1;
        } catch (JAXBException ex) {
            String msg = ex.getMessage();
            if (msg == null && ex.getCause() != null) {
                msg = ex.getCause().getMessage();
            }
            throw new CstlServiceException("the service has throw a JAXB Exception:" + msg,
                                           ex, NO_APPLICABLE_CODE);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void startTransaction() throws CstlServiceException {
        // TODO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void abortTransaction() throws CstlServiceException {
        //TODO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void endTransaction() throws CstlServiceException {
        // TODO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int getNewSensorId() throws CstlServiceException {
        int maxID = 0;
        
        for (Sensor f : sensorBusiness.getAll()) {
            String id = f.getIdentifier();
            id = id.substring(0, id.indexOf(".xml"));
            if (id.startsWith(sensorIdBase)) {
                id = id.substring(id.indexOf(sensorIdBase) + sensorIdBase.length());
                try {
                    final int curentID = Integer.parseInt(id);
                    if (curentID > maxID) {
                        maxID = curentID;
                    }
                } catch (NumberFormatException ex) {
                    throw new CstlServiceException("unable to parse the identifier:" + id, ex, NO_APPLICABLE_CODE);
                }
            }
        } 
        
        return maxID + 1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void destroy() {
        
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getInfos() {
        return "Constellation Internal Sensor Writer 0.9";
    }
}
