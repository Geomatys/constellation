<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:getCapabilities="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetCapabilities.xml"
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xows="http://www.opengeospatial.net/ows"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:tml="http://www.opengis.net/tml"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:om="http://www.opengis.net/om/1.0"
>

		

<!--*****************************************************************************************************************************************************************************-->		
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestParameterHandling.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="exceptionReportSchema"/>
		<ctl:assertion>The server returns a valid error report message with an exceptionCode of MissingParameterValue when mandatory parameters are missing from the request. </ctl:assertion>
		<ctl:comment>Check that the server returns a valid error report message with an exception code of MissingParameterValue when mandatory parameters are missing from the request.  Pass if the server returns a valid error report message with an exception code of MissingParameterValue; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the server handles missing parameters correctly.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-KVPRequestParameterHandling</ctl:link>
		<ctl:code>				
			<xsl:variable name="thisRequest">
				<ctl:message select="'Making GetCapabilities request with no &quot;service&quot; parameter...'"/>
				<ctl:message>and no version parameter</ctl:message>				
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>get</ctl:method>						
					<ctl:param name="request">GetCapabilities</ctl:param>
					<!-- leaving out the "service" parameter -->		
					<ctl:call-function name="sosFunctions:xmlValidatingParser">							
						<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
					</ctl:call-function>
				</ctl:request>	
			</xsl:variable>										
				<xsl:choose>
				<!-- check for valid schema or missing response-->
				<xsl:when test="not($thisRequest/*)">
					<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
					<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
					<ctl:fail/>
				</xsl:when>
				<!-- check for correct exception code -->
				<xsl:when test="not(sosFunctions:exceptionCode($thisRequest) = 'MissingParameterValue')">
					<ctl:message>Invalid exception code.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Exception code is: ', sosFunctions:exceptionCode($thisRequest))"/>
					</ctl:message>
					<ctl:message>Exception code should be: 'MissingParameterValue'.</ctl:message>
					<ctl:fail/>
				</xsl:when>			
				<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($thisRequest)), 'service'))">
					<ctl:message>Invalid locator.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($thisRequest))"/>
					</ctl:message>
					<ctl:message>Locator value should be: 'service'.</ctl:message>
					<ctl:fail/>
				</xsl:when>				
				
				<!-- looks good -->
				<xsl:otherwise>
					<ctl:message>OK</ctl:message>
				</xsl:otherwise>
			</xsl:choose>					
			
		</ctl:code>
	</ctl:test>
	<!--*****************************************************************************************************************************************************************************-->
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestServiceParameterHandling.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="exceptionReportSchema"/>
		<ctl:assertion>The server returns a valid error report message with an exceptionCode of InvalidParameterValue when the service key value is not SOS. </ctl:assertion>
		<ctl:comment>Check the server returns a valid error report message with an exception code of InvalidParameterValue when the service key value is not SOS.  Pass if the server returns a valid error report message with an exception code of InvalideParameterValue; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the server handles invalid service key values correctly.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-KVPRequestServiceParameterHandling</ctl:link>
		<ctl:code>		
			<xsl:variable name="invalidServiceValue" select = "'XYZ'"/>
			<ctl:message select="concat('Making GetCapabilities request with &quot;service&quot; parameter value of &quot;',
										$invalidServiceValue, '&quot;...')"/>
			<ctl:message>and no version parameter</ctl:message>
			<xsl:variable name="thisRequest">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>get</ctl:method>						
					<ctl:param name="request">GetCapabilities</ctl:param>
					<ctl:param name="service"><xsl:value-of select="$invalidServiceValue"/></ctl:param>  <!-- Invalid service parameter -->					
						<ctl:call-function name="sosFunctions:xmlValidatingParser">		
							<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
						</ctl:call-function>
					</ctl:request>							
			</xsl:variable>										
			
			<xsl:choose>
				<!-- check for valid schema or missing response-->
				<xsl:when test="not($thisRequest/*)">
					<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
					<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
					<ctl:fail/>
				</xsl:when>
				<!-- check for correct exception code -->
				<xsl:when test="not(sosFunctions:exceptionCode($thisRequest) = 'InvalidParameterValue')">
					<ctl:message>Invalid exception code.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Exception code is: ', sosFunctions:exceptionCode($thisRequest))"/>
					</ctl:message>
					<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($thisRequest)), 'service'))">
					<ctl:message>Invalid locator.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($thisRequest))"/>
					</ctl:message>
					<ctl:message>Locator value should be: 'service'.</ctl:message>
					<ctl:fail/>
				</xsl:when>					
				<!-- looks good -->
				<xsl:otherwise>
					<ctl:message>OK</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<!--*****************************************************************************************************************************************************************************-->		
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestRequestParameterHandling.1">
		<ctl:param name="serviceURL"/>
		<ctl:param name="exceptionReportSchema"/>			
		<ctl:assertion>The server returns a valid error report message with an exceptionCode of InvalidRequest when the request key value is not GetCapabilities.</ctl:assertion>
		<ctl:comment>Check the server returns a valid error report message with an exceptionCode of InvalidRequest when the request key value is not GetCapabilities.  Pass if the server returns a valid error report message with an exception code of InvalideParameterValue; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the server handles invalid request key values correctly.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-KVPRequestRequestParameterHandling</ctl:link>
		<ctl:code>
			<xsl:variable name="invalidRequestValue" select="'GetMeASandwich'"/>
			<ctl:message select="concat('Making GetCapabilities request with &quot;request&quot; parameter value of &quot;',
										$invalidRequestValue, '&quot;...')"/>	
			<ctl:message>and no version parameter</ctl:message>
			<xsl:variable name="thisRequest">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$serviceURL"/>
					</ctl:url>
					<ctl:method>get</ctl:method>						
					<ctl:param name="request"><xsl:value-of select="$invalidRequestValue"/></ctl:param> <!-- Invalid request parameter -->
					<ctl:param name="service">SOS</ctl:param>  								
				
					<ctl:call-function name="sosFunctions:xmlValidatingParser">		
						<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
					</ctl:call-function>		
				</ctl:request>
			</xsl:variable>										
				<xsl:choose>
				<!-- check for valid schema or missing response-->
				<xsl:when test="not($thisRequest/*)">
					<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
					<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
					<ctl:fail/>
				</xsl:when>
				<!-- check for correct exception code -->
				<xsl:when test="not(sosFunctions:exceptionCode($thisRequest) = 'InvalidParameterValue')">
					<ctl:message>Invalid exception code.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Exception code is: ', sosFunctions:exceptionCode($thisRequest))"/>
					</ctl:message>
					<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($thisRequest)), 'request'))">								
					<ctl:message>Invalid locator.</ctl:message>
					<ctl:message>
						<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($thisRequest))"/>
					</ctl:message>
					<ctl:message>Locator value should be: 'request'.</ctl:message>
					<ctl:fail/>
				</xsl:when>				
				<!-- looks good -->
				<xsl:otherwise>
					<ctl:message>OK</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
		
	<!--*****************************************************************************************************************************************************************************-->		

	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadataMandatoryOperations.1">
		<ctl:param name="capabilitiesDocument"/>			
		<ctl:assertion>The OperationsMetadata section lists the mandatory operations of the SOS.</ctl:assertion>
		<ctl:comment>Check that the OperationsMetadata section lists the mandatory operations of the SOS.  Pass if assertion holds; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the OperationsMetadata section advertises the mandatory operations of the SOS.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-OperationsMetadataMandatoryOperations</ctl:link>
		<ctl:code>				
			<xsl:choose>
				<xsl:when test="not($capabilitiesDocument//ows:Operation[@name='GetCapabilities'])
								or not($capabilitiesDocument//ows:Operation[@name='DescribeSensor'])
								or not($capabilitiesDocument//ows:Operation[@name='GetObservation'])">
					<!-- something was missing, see which one(s) -->
					<!-- check for missing GetCapabilities -->
					<xsl:if test="not($capabilitiesDocument//ows:Operation[@name='GetCapabilities'])">
						<ctl:message>Missing required operation 'GetCapabilities'</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<!-- check for missing DescribeSensor -->
					<xsl:if test="not($capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='DescribeSensor'])">
						<ctl:message>Missing required operation 'DescribeSensor'</ctl:message>
						
					</xsl:if>
					<!-- check for missing GetObservation -->
					<xsl:if test="not($capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='GetObservation'])">
						<ctl:message>Missing required operation 'GetObservation'</ctl:message>
						<ctl:fail/>
					</xsl:if>					
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
				</xsl:otherwise>					
			</xsl:choose>
		</ctl:code>
	</ctl:test>
		
	<!--*****************************************************************************************************************************************************************************-->
	
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadaOptionalOperations.1">
		<ctl:param name="capabilitiesDocument"/>			
		<ctl:assertion>Any non-mandatory operations advertised in the OperationsMetadata section have valid SOS method names.</ctl:assertion>
		<ctl:comment>Check that any non-mandatory operations advertised in the OperationsMetadata section have valid SOS method names.  Pass if assertion holds; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that any non-mandatory operations listed in the OperationsMetadata section are valid SOS operation names.  This is still up for debate and will probably not be part of the final tests.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-OperationsMetadaOptionalOperations</ctl:link>
		<ctl:code>								
			
			<xsl:message select="'Checking all operations...'"/>	
			<xsl:for-each select="$capabilitiesDocument//ows:OperationsMetadata/ows:Operation">						
				<xsl:choose>
					<xsl:when test="sosFunctions:isValidOperationName(@name) = 'true'">
						<ctl:message select="concat(@name, ' OK')"/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat(@name, '  **INVALID**')"/>
						<ctl:fail/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
	
	<!--*****************************************************************************************************************************************************************************-->

	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidTime.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion>The values in the time element for each ObservationOffering are valid time values (ISO 8601) or are valid named times (i.e. indeterminate, now, etc.).  If a time period is specified, then the beginTime must come before the endTime or be equal to the endTime.</ctl:assertion>
		<ctl:comment>Check that the values in the time element for each ObservationOffering are valid time values (ISO 8601) or are valid named times (i.e. indeterminate, now, etc.).  If a time period is specified, then the beginTime must come before the endTime or be equal to the endTime.  Pass if time the values in the time element are valid time values; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the time values provided for each ObservationOffering are valid.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidTime</ctl:link>
		<ctl:code>
			<!-- I also need to check for time instant? -->
			<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
				<ctl:message select="concat('Time values for offering: ', $offeringId)"/>
				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//gml:TimePeriod">													
					<xsl:variable name="beginPosition" select="gml:beginPosition | gml:begin/gml:timePosition"/>										
					<xsl:variable name="endPosition" select="gml:endPosition  | gml:end/gml:endPosition"/>
					<xsl:variable name="compareBegin" select="sosFunctions:timeToCompare($beginPosition)"/>
					<xsl:variable name="compareEnd" select="sosFunctions:timeToCompare($endPosition)"/>
					<ctl:message select="concat('beginPosition: ', $beginPosition, $beginPosition/@indeterminatePosition, ' (', $compareBegin, ')')"/>
					<ctl:message select="concat('endPosition: ',$endPosition, $endPosition/@indeterminatePosition, ' (', $compareEnd, ')')"/>
										
					<xsl:choose>					
						<!-- test beginPosition -->
						<xsl:when test="sosFunctions:isValidTimePeriodPosition($beginPosition) = 'false'">
							<ctl:message>Invalid beginPosition for TimePeriod.</ctl:message>						
							<ctl:fail/>								
						</xsl:when>
						<!-- testEndPosition -->
						<xsl:when test="sosFunctions:isValidTimePeriodPosition($endPosition) = 'false'">
							<ctl:message>Invalid endPosition for TimePeriod.</ctl:message>						
							<ctl:fail/>								
						</xsl:when>
						<!-- make sure begin time does not come after end time -->

						<xsl:when test="($compareBegin != '' and $compareEnd != '')
									and
									(sosFunctions:dateTimeFromISO($compareBegin) &gt; sosFunctions:dateTimeFromISO($compareEnd))">
							<ctl:message>Begin position is later than end position.</ctl:message>
							<ctl:fail/>							
						</xsl:when>						
						<xsl:otherwise>																	
							<ctl:message>OK</ctl:message>							
						</xsl:otherwise>
					</xsl:choose>
					<ctl:message></ctl:message>
				</xsl:for-each>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>

	<!--*****************************************************************************************************************************************************************************-->
		
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidProcedure.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion>The values in the procedure element(s) for each ObservationOffering contain a value and are valid URNs.</ctl:assertion>
		<ctl:comment>Check that the values in the procedure element(s) for each ObservationOffering contain a value and are valid URNs according to the OGC URN scheme.  Pass if values in the procedure element(s) contain a value and are valid URNs; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the procedure values provided for each ObservationOffering are valid.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidProcedure</ctl:link>
		<ctl:code>			
		
			<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering//sos:procedure">				
			
				<xsl:variable name="thisURN"> 
					<xsl:value-of select="@xlink:href"/>
				</xsl:variable>
					<xsl:choose>
					<xsl:when test="sosFunctions:isValidURN($thisURN) = 'false'">
						<ctl:message select="concat($thisURN, '  **INVALID**')"/>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat($thisURN, '  OK')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
		
	<!--*****************************************************************************************************************************************************************************-->
		
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidObservedProperty.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion>The values in the observedProperty element(s) for each ObservationOffering contain a value and are valid URNs. See document OGC 05-010 for correct formatting of definition URN.</ctl:assertion>
		<ctl:comment>Check that the values in the observedProperty element(s) for each ObservationOffering contain a value and are valid URNs according to the OGC URN scheme.  Pass if the values in the observedProperty element(s) contain a value and are valid URNs; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the observedProperty values provided for each ObservationOffering are valid.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidObservedProperty</ctl:link>
		<ctl:code>				
			<xsl:for-each select="distinct-values($capabilitiesDocument//sos:ObservationOffering//sos:observedProperty//@xlink:href)">
				<xsl:variable name="thisURN" select="."/>

				<xsl:choose>
					<xsl:when test="sosFunctions:isValidDefinitionURN($thisURN) = 'false'">
						<ctl:message select="concat($thisURN, '  **INVALID**')"/>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat($thisURN, '  OK')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>			
			</ctl:code>
	</ctl:test>
		
	<!--*****************************************************************************************************************************************************************************-->

	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseFormat.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion>The values in the responseFormat element(s) for each ObservationOffering contain a value and are valid MIME types.</ctl:assertion>
		<ctl:comment>Check that the values in the responseFormat element(s) for each ObservationOffering contain a value and are valid MIME types.  Pass if assertions hold; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the responseFormat values provided for each ObservationOffering are valid MIME types.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidResponseFormat</ctl:link>
		<ctl:code>		
			<!-- check all the responseFormats from offerings -->
			<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering">
				<ctl:message select="concat('Testing offering: ',./@gml:id)"/>
				<xsl:choose>
					<xsl:when test="not(.//sos:responseFormat)">
						<ctl:message select="'ObservationOffering is missing responseFormat.'"/>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>				
						<xsl:for-each select=".//sos:responseFormat">
							<xsl:variable name="thisResponseFormat"> 
								<xsl:value-of select="."/>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="sosFunctions:isValidMIMETypeFormat($thisResponseFormat) = 'false'">
									<ctl:message select="concat($thisResponseFormat, '   **INVALID**')"/>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
									<ctl:message select="concat($thisResponseFormat, '   OK')"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>	

			<!-- checking outputFormat for DescribeSensor -->
			<xsl:if test="$capabilitiesDocument//ows:Operation[@name='DescribeSensor']//ows:Parameter[@name='outputFormat']//ows:AllowedValues/ows:Value">
				<ctl:message select="'Checking outputFormats for DescribeSensor operation...'"/>
				<xsl:for-each select="distinct-values($capabilitiesDocument//ows:Operation[@name='DescribeSensor']//ows:Parameter[@name='outputFormat']//ows:AllowedValues/ows:Value)">											
					<xsl:variable name="thisResponseFormat"> 
						<xsl:value-of select="."/>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="sosFunctions:isValidMIMETypeFormat($thisResponseFormat) = 'false'">
							<ctl:message select="concat($thisResponseFormat, '   **INVALID**')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat($thisResponseFormat, '   OK')"/>
						</xsl:otherwise>
					</xsl:choose>					
				</xsl:for-each>	
			</xsl:if>
		</ctl:code>
	</ctl:test>

	<!--*****************************************************************************************************************************************************************************-->		
				
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResultModel.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion> If an ObservationOffering provides the resultModel element, then the resultModel element must be in the om:Observation substitution group and is typically om:Observation or a specialized extension.  Value must be namespace-qualified.</ctl:assertion>
		<ctl:comment>Check If an ObservationOffering provides the resultModel element, then the resultModel element must be in the om:Observation substitution group and is typically om:Observation or a specialized extension.  Value must be namespace-qualified. Pass if assertions hold; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the resultModel values provided for each ObservationOffering are valid.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidResultModel</ctl:link>
		<ctl:code>

			<ctl:message select="'Checking advertised result models against members of the substitution group om:Observation.'"/>
			<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering//sos:resultModel">			
				<xsl:variable name="thisResultModel"> 
					<xsl:value-of select="."/>
				</xsl:variable>				
				<xsl:choose>
					<xsl:when test="not(sosFunctions:isValidResultModel($thisResultModel)='true')">
						<ctl:message select="concat($thisResultModel, '   **INVALID***')"/>							
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="concat($thisResultModel, '   OK')"/>							
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>	
		</ctl:code>
	</ctl:test>
		
	<!--*****************************************************************************************************************************************************************************-->		
				
	<ctl:test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseMode.1">
		<ctl:param name="capabilitiesDocument"/>
		<ctl:assertion> If an ObservationOffering provides the responseMode element, then the responseMode element contains a value that is one of the valid responseMode values.</ctl:assertion>
		<ctl:comment>Check if an ObservationOffering provides the responseMode element, then the responseMode element contains a value that is one of the valid responseMode values. Pass if assertions hold; fail otherwise.</ctl:comment>
		<ctl:link title="Verify that the responseMode values provided for each ObservationOffering are valid.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetCapabilities-ResponseContentsValidResponseMode</ctl:link>
		<ctl:code>
			<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
				<ctl:message select="concat('Offering: ', $offeringId)"/>						
				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseMode">
					<xsl:variable name="thisResponseMode" select="."/>					
					<xsl:choose>
						<xsl:when test="sosFunctions:isValidResponseMode($thisResponseMode) = 'false'">
							<ctl:message select="concat($thisResponseMode, '   **INVALID***')"/>							
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<ctl:message select="concat($thisResponseMode, '   OK')"/>							
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>	
				<ctl:message></ctl:message>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
</ctl:package>