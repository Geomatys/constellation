<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:cgf="http://www.opengis.net/cite/geometry"
             xmlns:citef="http://www.opengis.net/cite/functions"
             xmlns:gml="http://www.opengis.net/gml"
             xmlns:saxon="http://saxon.sf.net/"
             xmlns:ogc="http://www.opengis.net/ogc"
             xmlns="http://www.occamlab.com/ctl"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:parsers="http://www.occamlab.com/te/parsers"
             xmlns:wcs1-0-0="http://www.opengis.net/wcs"
             xmlns:wcs="http://www.opengis.net/wcs"
             xmlns:wfs="http://www.opengis.net/wfs"
             xmlns:wms="http://www.opengis.net/wms"
             xmlns:ctl="http://www.occamlab.com/ctl"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:example="http://www.somehost.com/example"
             xmlns:ccf="http://www.opengis.net/cite/complex"
             xmlns:cdf="http://www.opengis.net/cite/data"
             xmlns:wcs1="http://www.opengis.net/wcs">
   <ctl:function name="citef:append-kvp">
      <ctl:param name="url-prefix"/>
      <ctl:var-params max="4" min="1"/>
      <ctl:java class="com.occamlab.ctlfns.JaxenFunction" initialized="true" method="call">
         <ctl:with-param select="'org.opengis.cite.functions.AppendKVPFunction'"/>
      </ctl:java>
   </ctl:function>
   <ctl:function name="citef:iif">
      <ctl:param name="condition"/>
      <ctl:param name="trueObject"/>
      <ctl:param name="falseObject"/>
      <ctl:java class="com.occamlab.ctlfns.JaxenFunction" initialized="true" method="call">
         <ctl:with-param select="'org.opengis.cite.functions.IIfFunction'"/>
      </ctl:java>
   </ctl:function>
   <ctl:parser name="parsers:HeadersParser">
      <ctl:java class="com.occamlab.te.parsers.HeadersParser" method="parse"/>
   </ctl:parser>
   <ctl:parser name="wcs1-0-0:XMLValidatingParser.original">
      <ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse"
                initialized="true">
         <ctl:with-param name="schemas_links">
            <parsers:schemas xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
               <parsers:schema type="resource">xsd/wcs/1.0.0_o/wcsWrapper.xsd</parsers:schema>
            </parsers:schemas>
         </ctl:with-param>
      </ctl:java>
   </ctl:parser>
   <ctl:parser name="wcs1-0-0:XMLValidatingParser.corrigendum1">
      <ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" method="parse"
                initialized="true">
         <ctl:with-param name="schemas_links">
            <parsers:schemas xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
               <parsers:schema type="resource">xsd/wcs/1.0.0_c1/wcsWrapper.xsd</parsers:schema>
            </parsers:schemas>
         </ctl:with-param>
      </ctl:java>
   </ctl:parser>
   <ctl:test name="wcs1-0-0:main">
      <ctl:assertion>The WCS 1.0.0 implementation being tested behaves properly</ctl:assertion>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="form-values">
            <!--ctl:form>
               <body xmlns="">
                  <h3>Web Coverage Service 1.0.0</h3>
                  <p>The following options are only concerned with the Web Coverage
Service tests</p>
                  <p>The Web Coverage Service tests scripts are designed to test WCS
implementations based on the WCS 1.0.0 specification.</p>
                  <p>A complete list of tests in the test suite is available in the
<a href="/tsOGC/ViewTestSpec?SPEC=Web_Coverage_Server.html&amp;TYPE=AVAILABLE&amp;sesstype=OGC"
                        target="otherwindow">
Test Requirements and Assertions</a> document, but note that not
all of the tests are applicable to all servers. The number of tests
actually executed will depend on the capabilities advertised in the
capabilities URL supplied below as well as the other options
selected below.</p>
                  <p>There are some requirements for the dataset.</p>
                  <p>At least there are two overages in the tested server.</p>
                  <p>The first coverage offering should include all the tested
features while the second coverage could be any thing.</p>
                  <br/>
                  <br/>
                  <p>The first coverage offering must take one of the 5 formats
described in the WCS1.0.0 standard document as the first supported
format.</p>
                  <p>The first coverage offering should have interpolation method
defined, if the xml encoding is tested.</p>
                  <p>The first coverage offering should have parameters defined in
the axisDescription.</p>
                  <p>The first coverage offering should define time feature, if the
server support time position.</p>
                  <br/>
                  <br/>
                  <h4>Capabilities Setup</h4>
                  <br/>
                  <br/>
                  <p>Enter a capabilities document URL below. This may be the URL to
a static capabilities document, or a GetCapabilities request from a
WMS. A typical GetCapabilities request will take this form:</p>
                  <pre>
    http://hostname/path?service=WCS&amp;version=1.0.0&amp;request=getcapabilities
</pre>
                  <br/>
                  <br/>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="VAR_WCS1-0-0_CAPABILITIES_URL" size="100" type="text" value=""/>
                           </td>
                           <td align="left">Capabilities URL</td>
                        </tr>
                     </table>
                  </blockquote>
                  <h4>MIME Header Setup</h4>
                  <br/>
                  <br/>
                  <p>There is no standard MIME header definitions for the 5 formats
required. Thus the actual MIME header depends on the server. The
assertion test will check the results based on the first available
format for the first coverage. Enter the mime header for the first
available format in the coverage offering for the first coverage
below.</p>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="VAR_WCS_FORMAT_1_HEADER" size="100" type="text" value=""/>
                           </td>
                           <td align="left">MIME header</td>
                        </tr>
                     </table>
                  </blockquote>
                  <h4>UpdateSequence Values</h4>
                  <br/>
                  <br/>
                  <p>The WCS spec allows servers to use an UpdateSequence value for
maintaining cache consistency. If the server advertises an
UpdateSequence value, enter the updateSequence values requested
below.</p>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="VAR_HIGH_UPDATESEQUENCE" size="25" type="text" value=""/>
                           </td>
                           <td align="left">A value that is lexically higher than the current
updateSequence value</td>
                        </tr>
                        <tr>
                           <td align="center">
                              <input name="VAR_LOW_UPDATESEQUENCE" size="25" type="text" value=""/>
                           </td>
                           <td align="left">A value that is lexically lower than the current
updateSequence value</td>
                        </tr>
                     </table>
                  </blockquote>
                  <h4>The grid resolutions.</h4>
                  <br/>
                  <br/>
                  <p>Those values are required to test GetCoverage with parameter
RESX and RESY. The values depends on the crs provided by the first
offering. Enter the grid resolutions below.</p>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="VAR_WCS_COVERAGE_1_RESX" size="25" type="text" value=""/>
                           </td>
                           <td align="left">A value that is lexically representing RESX</td>
                        </tr>
                        <tr>
                           <td align="center">
                              <input name="VAR_WCS_COVERAGE_1_RESY" size="25" type="text" value=""/>
                           </td>
                           <td align="left">A value that is lexically representing RESY</td>
                        </tr>
                     </table>
                  </blockquote>
                  <h4>Options</h4>
                  <br/>
                  <br/>
                  <p>Does your server support XML encoding?</p>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="xml" type="checkbox" value="xml"/>
                           </td>
                           <td align="left">Verify that the server supports XML encoding.</td>
                        </tr>
                     </table>
                  </blockquote>
                  <p>Does your server support axis description encoding?</p>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="haveparameter" type="checkbox" value="haveparameter"/>
                           </td>
                           <td align="left">Verify that the server supports range set
axis.</td>
                        </tr>
                     </table>
                  </blockquote>
                  <br/>
                  <br/>
                  <h4>Schemas</h4>
                  <blockquote>
                     <table border="3" padding="3">
                        <tr>
                           <td align="center">
                              <input name="schemas" type="radio" value="original" checked="checked"/>
                           </td>
                           <td align="left">The server implements the original schemas from the WCS 1.0.0 scpecification (OGC 03-065r6)</td>
                        </tr>
                        <tr>
                           <td align="center">
                              <input name="schemas" type="radio" value="corrigendum1"/>
                           </td>
                           <td align="left">The server implements the schemas from the WCS 1.0.0 corrigendum (OGC 05-076)</td>
                        </tr>
                     </table>
                  </blockquote>
                  <input type="submit" value="OK"/>
               </body>
            </ctl:form-->
                <values>
                        <value key="schemas">original</value>
		</values>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS1-0-0_CAPABILITIES_URL">
            <ctl:request>
               <ctl:url>http://localhost:9090/wcs</ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="request">GetCapabilities</ctl:param>
               <ctl:param name="service">WCS</ctl:param>
               <ctl:param name="version">1.0.0</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1_HEADER">
            <xsl:value-of select="$form-values/values/value[@key='VAR_WCS_FORMAT_1_HEADER']"/>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_HIGH_UPDATESEQUENCE">
            <xsl:value-of select="$form-values/values/value[@key='VAR_HIGH_UPDATESEQUENCE']"/>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_LOW_UPDATESEQUENCE">
            <xsl:value-of select="$form-values/values/value[@key='VAR_LOW_UPDATESEQUENCE']"/>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_RESX">
            <xsl:value-of select="$form-values/values/value[@key='VAR_WCS_COVERAGE_1_RESX']"/>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_RESY">
            <xsl:value-of select="$form-values/values/value[@key='VAR_WCS_COVERAGE_1_RESY']"/>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml"
                       select="boolean($form-values/values/value[@key='xml'])"/>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="haveparameter"
                       select="boolean($form-values/values/value[@key='haveparameter'])"/>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="parser">
            <xsl:choose>
               <xsl:when test="$form-values/values/value[@key='schemas'] = 'original'">
                  <wcs1-0-0:XMLValidatingParser.original/>
               </xsl:when>
               <xsl:otherwise>
                  <wcs1-0-0:XMLValidatingParser.corrigendum1/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       select="$VAR_WCS1-0-0_CAPABILITIES_URL">
            <xsl:variable name="VAR_WCS_VERSION">
               <xsl:value-of select="string('1.0.0')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='GetCapabilities'][1]//*[local-name()='Get'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='GetCoverage'][1]//*[local-name()='Get'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='DescribeCoverage'][1]//*[local-name()='Get'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='GetCapabilities'][1]//*[local-name()='Post'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='GetCoverage'][1]//*[local-name()='Post'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL">
               <xsl:value-of select="citef:append-kvp(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='DescribeCoverage'][1]//*[local-name()='Post'][1]/*[local-name()='OnlineResource'][1]/@*[local-name() = 'href'], '')"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1_WIDTH">
               <xsl:value-of select="string(200)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1_HEIGHT">
               <xsl:value-of select="string(100)"/>
            </xsl:variable>
            <xsl:variable name="VAR_CURRENT_UPDATESEQUENCE">
               <xsl:value-of select="string(/*[local-name()='WCS_Capabilities'][1]/@updateSequence)"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_1">
               <xsl:value-of select="string(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='CoverageOfferingBrief'][1]/*[local-name()='name'][1])"/>
            </xsl:variable>
            <xsl:variable name="VAR_WCS_COVERAGE_2">
               <xsl:value-of select="string(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='CoverageOfferingBrief'][2]/*[local-name()='name'][1])"/>
            </xsl:variable>
            <xsl:variable name="updatesequence" select="string-length($VAR_CURRENT_UPDATESEQUENCE) &gt;0"/>
            <xsl:variable name="post" select="string-length($VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL) &gt;0"/>
            <xsl:variable name="supporttime"
                          select="boolean(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='CoverageOfferingBrief'][1]//*[local-name()='timePosition'][1])"/>
            <xsl:variable name="kvp" select="true()"/>
            <xsl:variable name="hosturl">
               <xsl:value-of select="string('cite.opengeospatial.org')"/>
            </xsl:variable>
            <xsl:choose>
               <xsl:when test="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL = '' and $VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL = ''">
                  <ctl:message>Error: Could not read GetCapabilities online resource from capabilities document</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:otherwise>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-4">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-5">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-general_http_request_rules-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-service_exceptions-1">
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-1">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-3">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-4">
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-7">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-6">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-7">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-1">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-2">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-5">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_2" select="$VAR_WCS_COVERAGE_2"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-6">
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-7">
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:describecoverage_operations-describecoverage_response-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <xsl:if test="not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-6">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-7">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp and not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-5">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-6">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-7">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and not($updatesequence)">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-1">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-2">
                        <ctl:with-param name="VAR_CURRENT_UPDATESEQUENCE" select="$VAR_CURRENT_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-3">
                        <ctl:with-param name="VAR_LOW_UPDATESEQUENCE" select="$VAR_LOW_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-4">
                        <ctl:with-param name="VAR_HIGH_UPDATESEQUENCE" select="$VAR_HIGH_UPDATESEQUENCE"/>
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $updatesequence">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-5">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-6">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-7">
                        <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcapabilities_operations-getcapabilities_response-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
                     <ctl:with-param name="parser" select="$parser"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-4">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_RESX" select="$VAR_WCS_COVERAGE_1_RESX"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_RESY" select="$VAR_WCS_COVERAGE_1_RESY"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$haveparameter and $post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-4">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-1">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-2">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-3">
                     <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                     <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                     <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                     <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                     <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                     select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  </ctl:call-test>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                        <ctl:with-param name="parser" select="$parser"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-3">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $kvp and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_WIDTH" select="$VAR_WCS_COVERAGE_1_WIDTH"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1_HEIGHT" select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-1">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_FORMAT_1_HEADER" select="$VAR_WCS_FORMAT_1_HEADER"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
                  <xsl:if test="$post and $xml and $supporttime">
                     <ctl:call-test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-2">
                        <ctl:with-param name="VAR_WCS_VERSION" select="$VAR_WCS_VERSION"/>
                        <ctl:with-param name="VAR_WCS_COVERAGE_1" select="$VAR_WCS_COVERAGE_1"/>
                        <ctl:with-param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"
                                        select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
                        <ctl:with-param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"
                                        select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                     </ctl:call-test>
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:suite name="wcs1-0-0:main_wcs1-0-0">
      <ctl:title>Web Coverage Service (WCS) 1.0.0</ctl:title>
      <ctl:description>Validates that a WCS 1.0.0 implementation meets requirements.</ctl:description>
      <ctl:link>docs/wcs/1.0.0/</ctl:link>
      <ctl:starting-test>wcs1-0-0:main</ctl:starting-test>
   </ctl:suite>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(local-name(/*[1])='WCS_Capabilities' and namespace-uri(/*[1])='http://www.opengis.net/wcs'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /CoverageDescription exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='CoverageDescription']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-general_http_request_rules-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request contains a parameter which is not defined by the spec, the result is valid.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.3.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.3.2.2_Parameter_ordering_and_case</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BoGuS">ignored</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-service_exceptions-1">
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When an Exception is returned from a request, Service Exception must have the MIME type as "application/vnd.ogc.se_xml".</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where content type header is application/vnd.ogc.se_xml.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.5_Service_exceptions</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))='application/vnd.ogc.se_xml')">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-1">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made without a version number, then the response is the highest version supported.</ctl:assertion>
      <ctl:comment><![CDATA[Check that the response is not an exception]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN"/>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="local-name(*)='ServiceExceptionReport'">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made for a supported version, then the response is the requested version.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities@version = [[VAR_WCS_VERSION]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)=$VAR_WCS_VERSION)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-3">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made for a version that is unknown to the server is requested, the server sends the highest version it knows that is less than the requested version.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities@version = 1.0.0]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">1.0.2</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)='1.0.0')">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:basic_service_elements-version_numbering_and_negotiation-4">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made for a version lower than any of those known to the server, the server sends the lowest version it knows.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where / WCS_Capabilities@version = 1.0.0]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 6.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#6.2_Version_numbering_and_negotiation</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">0.8.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(string(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]/@version)='1.0.0')">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-1">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with an invalid version, the server return a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">0.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2  (name1, name2 are in the Capabilities XML),  the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,<xsl:value-of select="$VAR_WCS_COVERAGE_2"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-get-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-1">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with a invalid version, the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">0.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1, name2 are in the Capabilities XML), the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,<xsl:value-of select="$VAR_WCS_COVERAGE_2"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1, name2  (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.2_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>,WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-1">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd"  service="WCS" >
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage>
 
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-2">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with an invalid version, the server return a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd"  service="WCS"  version="0.0.0">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage>
 
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-5">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_2"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1, name2 are in the Capabilities XML),  the server returns CoverageDescription  including only the requested coverage descriptions.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /*[local-name() = "CoverageDescription"]/*[local-name() = "CoverageOffering"]/*[local-name() = "name"] is the requested.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage><Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_2"/><![CDATA[</Coverage>
</DescribeCoverage >]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not((concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_1, '', $VAR_WCS_COVERAGE_2, ''))  or (concat((/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[1],(/*[local-name() = 'CoverageDescription']/*[local-name() = 'CoverageOffering']/*[local-name() = 'name'])[2]) = concat('', $VAR_WCS_COVERAGE_2, '', $VAR_WCS_COVERAGE_1, '')))">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-6">
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1 (name1 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>WCS_COVERAGE_NOT_DEFINED</Coverage>
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_request-post-xml-7">
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a DescribeCoverage request is made with COVERAGE = name1, name2 (name1 is in, and name2 is not in the Capabilities XML), the server returns a service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.2.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.2.3_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <DescribeCoverage xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/describeCoverage.xsd" version="1.0.0" service="WCS">
<Coverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</Coverage><Coverage>WCS_COVERAGE_NOT_DEFINED</Coverage>
</DescribeCoverage >]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:describecoverage_operations-describecoverage_response-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a DescribeCoverage request is made, supportedFormats in the response XML provides at least one of the following format: GeoTIFF, HDF-EOS,DTED,NITF, GML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where //formats contains one of GeoTIFF, HDF-EOS,DTED,NITF, GML. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 8.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#8.3_DescribeCoverage_response</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='formats'][
 contains(concat(' ', normalize-space(.), ' '),' GeoTIFF ') or  contains(concat(' ', normalize-space(.), ' '),' HDF-EOS ') or  contains(concat(' ', normalize-space(.), ' '),' DTED ') or  contains(concat(' ', normalize-space(.), ' '),' NITF ') or  contains(concat(' ', normalize-space(.), ' '),' GML ')
]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter, the UPDATESEQUENCE parameter is ignored.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WC_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">ignored</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to the current update sequence value, then  the server returns a valid exception (cose = CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="CurrentUpdateSequence"]  exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value higher than the current update sequence value, then the server returns a service exception (code="InvalidUpdateSequence ").</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="InvalidUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an UPDATESEQUENCE parameter set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCapabilities request is made without a SECTION parameter, then the entire capabilities are returned.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-get-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made with a SECTION parameter set  to a value as  "/", then the entire capabilities are returned.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter, the UPDATESEQUENCE parameter is ignored.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid  XML where /WC_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">ignored</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to the current update sequence value, then  the server returns a valid exception (code=CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="CurrentUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value higher than the current update sequence value, then the server returns a service exception (code = InvalidUpdateSequence ).</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code="InvalidUpdateSequence "] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="UpDaTeSeQuEnCe">
                  <xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-5">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an UPDATESEQUENCE parameter set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-6">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without a SECTION parameter, Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-kvp-7">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made with a SECTION parameter set to a value as  "/", Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <ctl:param name="SeCtIoN">/</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-1">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter, the UPDATESEQUENCE parameter is ignored.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WC_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="ignored">
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-2">
      <ctl:param name="VAR_CURRENT_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to the current update sequence value, then  the server returns a valid exception (cose = CurrentUpdateSequence).</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code = "CurrentUpdateSequence"] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_CURRENT_UPDATESEQUENCE"/><![CDATA["></GetCapabilities>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='CurrentUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-3">
      <ctl:param name="VAR_LOW_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_LOW_UPDATESEQUENCE"/><![CDATA["></GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-4">
      <ctl:param name="VAR_HIGH_UPDATESEQUENCE"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value higher than the current update sequence value, then the server returns a service exception (code = InvalidUpdateSequence).</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport/ServiceException[@code = "InvalidUpdateSequence "] exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" updateSequence="]]><xsl:value-of select="$VAR_HIGH_UPDATESEQUENCE"/><![CDATA[">
</GetCapabilities>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceException'][1]/@code='InvalidUpdateSequence'))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-5">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCapabilities request is made without an UPDATESEQUENCE parameter set, then the server returns most recent capabilities XML.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities exists]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" >
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean(/*[local-name()='WCS_Capabilities'][namespace-uri()='http://www.opengis.net/wcs'][1]))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-6">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>   When a GetCapabilities request is made without a SECTION parameter, Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS" > 
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_request-post-xml-7">
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCapabilities request is made with a SECTION parameter set to a value as  "/", Capabilities returned includes the portion: Service, Capabilities, and ContentMetadata.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where /WCS_Capabilities/Service, /WCS_Capabilities/Capability, and /WCS_Capabilities/ContentMetadata exist]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.2_XML_encoding</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCapabilities xmlns="http://www.opengis.net/wcs" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/wcsCapabilities.xsd" version="1.0.0" service="WCS"  section = "/">
</GetCapabilities>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(boolean( //*[local-name()='Service'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='Capability'][namespace-uri()='http://www.opengis.net/wcs'] and //*[local-name()='ContentMetadata'][namespace-uri()='http://www.opengis.net/wcs'])
)</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcapabilities_operations-getcapabilities_response-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>Each OnlineResource URL intended for HTTP Get requests in the capabilities document is a URL prefix.</ctl:assertion>
      <ctl:comment><![CDATA[Check for xML where each /WCS_Capabilities/Capability/Request/OnlineResource@xlink:href ends in a ? or both contains a ? and ends in an &amp;.]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 7.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.3_GetCapabilities_response</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_CAPABILITIES_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCapabilities</ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:variable name="expression">not(count(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='HTTP']/*[local-name()='Get']/*[local-name()='OnlineResource']/@*[local-name() = 'href' and contains(., '?') and (substring-after(., '?') = '' or substring(., string-length(.)) = '&amp;')])  = count(/*[local-name()='WCS_Capabilities'][1]//*[local-name()='Request']//*[local-name()='HTTP']/*[local-name()='Get']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-2),&#34;,&#34;,string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1),&#34;,&#34;, string(number(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))-1))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.7">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.7_BBOX</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a BBOX outside the defined Bounding BOX, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) - 2),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) -2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(number(substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;)) - 1),&#34; &#34;, string(number(normalize-space(substring-after(normalize-space(&#xA;/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1]),&#34; &#34;))) -1))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX_OUTSIDE_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-bbox-post-xml-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without a BBOX and without a TIME, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.4_COVERAGEname</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">WCS_COVERAGE_NOT_DEFINED</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made without coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.2_sourceCoverage</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-coverage-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with coverage=name and name is not a valid coverage identifier, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.2_sourceCoverage</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><sourceCoverage>WCS_COVERAGE_NOT_DEFINED</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made without CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made without CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.5_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CrS">WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-crs-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a CRS and CRS value is not one of the  requestResponseCRSs or requestCRSs element under the requested coverage, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="WCS_CRS_NOT_IN_REQUEST_OR_REQUESTRESPONSE_CRS">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with EXCEPTIONS contains value  "application/vnd.ogc.se_xml", the server recognize it. 
</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">NOT_LISTED_FORMAT</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with EXCEPTIONS contains value  "application/vnd.ogc.se_xml", the server recognize it. 
</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-exception-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.13">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.13_EXCEPTIONS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">NOT_LISTED_FORMAT</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ExCePtIoNs">application/vnd.ogc.se_xml</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">WCS_FORMAT_INVALID</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">WCS_FORMAT_INVALID</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.12">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.12_FORMAT</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a FORMAT not listed in a supportedFormats/formats under the selected coverage offering in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>WCS_FORMAT_INVALID</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-format-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a FORMAT, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a specific grid resolution, the server should return the requested content .</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReSy">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReSx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_resolution-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESX"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_RESY"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a specific grid resolution, the server should return the requested content .</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.11">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.11_Grid_resolution:_RESX_RESY</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReSy">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESY"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReSx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a specific grid size and without a grid resolution, the server returns service exception .</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.10">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.10_Grid_size:_WIDTH_HEIGHT_DEPTH</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-grid_size-get-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made without a specific grid size and without a grid resolution, the server returns service exception .</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low></gml:low><gml:high></gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with an INTERPLOATIONMETHOD value that is listed in the CoverageDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_TEMP_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='interpolationMethod'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_TEMP_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_INTERPLATION_METHOD">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(VAR_WCS_TEMP_INTERPLATION_METHOD) != 0,string($VAR_WCS_TEMP_INTERPLATION_METHOD), &#34;nearest neighbor&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_INTERPLATION_METHOD: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_INTERPLATION_METHOD"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><interpolationMethod>]]><xsl:value-of select="$VAR_WCS_INTERPLATION_METHOD"/><![CDATA[</interpolationMethod>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-interpolationmethod-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a INTERPLOATIONMETHOD not listed in the DescribeCoverage reply, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.5">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.5_InterpolationMethod</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><interpolationMethod>WCS_INTERPLATION_METHOD_INVALID</interpolationMethod>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="{$VAR_WCS_PARAMETER}">WCS_PARAMETER_VALUE_INVALID</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-get-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER),&#34;=&#34;,string($VAR_WCS_PARAMETER_VALUE)),&#34;&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
                  <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="{$VAR_WCS_PARAMETER}">WCS_PARAMETER_VALUE_INVALID</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-kvp-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.9">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.9_PARAMETER</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER),&#34;=&#34;,string($VAR_WCS_PARAMETER_VALUE)),&#34;&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
                  <xsl:value-of select="$VAR_WCS_PARAMETER_EQ_PARAMETER_VALUE"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, but PARAMETER signed a value that is not defined in AxisDescription, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.4_RangeSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><rangeSubset>
	<axisSubset name="]]><xsl:value-of select="$VAR_WCS_PARAMETER"/><![CDATA[">
		<singleValue>WCS_PARAMETER_VALUE_INVALID</singleValue>	</axisSubset>
</rangeSubset>

<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-parameter-post-xml-4">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a PARAMETER name that is listed in the range set, PARAMETER signed value that is defined in AxisDescription, the server should return the requested content.</ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.4">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.4_RangeSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='name'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_PARAMETER"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='singleValue'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP2">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='min'][1]),'/',string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='max'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP2: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP2"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP3">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='rangeSet'][1]//*[local-name()='axisDescription'][1]//*[local-name()='interval'][1]//*[local-name()='res'][1])&#xA;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP3: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP3"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_PARAMETER_VALUE_TEMP4">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP3))  != 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;concat(string($VAR_WCS_PARAMETER_VALUE_TEMP2), &#34;/&#34;,string($VAR_WCS_PARAMETER_VALUE_TEMP3)),string($VAR_WCS_PARAMETER_VALUE_TEMP2))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE_TEMP4: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE_TEMP4"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_PARAMETER_VALUE">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_PARAMETER_VALUE_TEMP1))  != 0,string($VAR_WCS_PARAMETER_VALUE_TEMP1),string($VAR_WCS_PARAMETER_VALUE_TEMP4))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_PARAMETER_VALUE: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_PARAMETER_VALUE"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset><rangeSubset>
	<axisSubset name="]]><xsl:value-of select="$VAR_WCS_PARAMETER"/><![CDATA[">
		<singleValue>]]><xsl:value-of select="$VAR_WCS_PARAMETER_VALUE"/><![CDATA[</singleValue>	</axisSubset>
</rangeSubset>

<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReSpOnSe_cRs">WCS_COVERAGE_RESPONSE_CRS_INVALID</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.6_RESPONSE_CRS</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReSpOnSe_cRs">WCS_COVERAGE_RESPONSE_CRS_INVALID</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with a valid RESPONSE_CRS, the server should return the requested content with this CRS.
 </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_RPCRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(//*[local-name()='responseCRSs'][1]/@codeSpace,//*[local-name()='responseCRSs'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_RPCRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_RPCRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_RESPONSE_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_RPCRS)) != 0,string($VAR_WCS_TEMP_RPCRS), concat(//*[local-name()='requestResponseCRSs'][1]/@codeSpace,//*[local-name()='requestResponseCRSs'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_RESPONSE_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><crs>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_RESPONSE_CRS"/><![CDATA[</crs><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-response_crs-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with an invalid RESPONSE_CRS, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.6">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.6_Output_CRS_and_Format</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><crs>WCS_COVERAGE_RESPONSE_CRS_INVALID</crs><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>  When a GetCoverage request is made with an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">0.0.1</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-get-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCoverage request is made with an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSIONversione</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">0.0.1</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-kvp-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.2">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.2_SERVICEWCS__VERSION</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_BBOX">
            <xsl:for-each select="$request1">
               <xsl:value-of select="concat(&#xA;substring-before(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1],&#34; &#34;)),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;,&#34;,&#xA;normalize-space(substring-after(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2]),&#34; &#34;)) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_BBOX: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_BBOX"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="BbOx">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_BBOX"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion> When a GetCoverage request is made without version, the server returns service exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:param name="parser"/>
      <ctl:assertion>  When a GetCoverage request is made with a version an invalid version, the server returns service exception. </ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/0.0.1/getCoverage.xsd" version="0.0.1" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA[">			<gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope>	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <xsl:copy-of select="$parser"/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-service_version-post-xml-3">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion> When a GetCoverage request is made with a version=1.0.0, the server should return the requested content (if other condition satisfied). </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.1_Overview</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_FIRST">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][1])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_FIRST: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                       name="VAR_WCS_COVERAGE_1_POSITION_SECOND">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='domainSet'][1]//*[local-name()='pos'][2])"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_POSITION_SECOND: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="1.0.0" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><spatialSubset><gml:Envelope srsName="]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/><![CDATA["><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_FIRST"/><![CDATA[</gml:pos><gml:pos>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_POSITION_SECOND"/><![CDATA[</gml:pos>
	</gml:Envelope> 	<gml:Grid dimension="2"><gml:limits><gml:GridEnvelope><gml:low>0 0 </gml:low><gml:high>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/><![CDATA[
                  ]]><xsl:value-of select="' '"/><![CDATA[
                  ]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/><![CDATA[ </gml:high></gml:GridEnvelope></gml:limits><gml:axisName>width</gml:axisName><gml:axisName>height</gml:axisName></gml:Grid></spatialSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][namespace-uri()='http://www.opengis.org/wcs'][1]//*[local-name()='domainSet'][1]//*[local-name()='timePositions'][1])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-get-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="TiMe">WCS_TIME_INVALID</ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][namespace-uri()='http://www.opengis.org/wcs'][1]//*[local-name()='domainSet'][1]//*[local-name()='timePositions'][1])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="CrS">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_CRS"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="VeRsIoN">1.0.0</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/>
               </ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-kvp-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_WIDTH"/>
      <ctl:param name="VAR_WCS_COVERAGE_1_HEIGHT"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.
</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.2.8">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.2.8_TIME</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:param name="HeIgHt">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_HEIGHT"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetCoverage</ctl:param>
               <ctl:param name="WiDtH">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1_WIDTH"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="TiMe">WCS_TIME_INVALID</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="$VAR_WCS_FORMAT_1"/>
               </ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-1">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_FORMAT_1_HEADER"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made with a VALID TIME, the server should return the requested content </ctl:assertion>
      <ctl:comment><![CDATA[Check for content-type header = [[VAR_WCS_FORMAT_1_HEADER]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_TIME">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][namespace-uri()='http://www.opengis.org/wcs'][1]//*[local-name()='domainSet'][1]//*[local-name()='timePositions'][1])&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_TIME: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          select="$VAR_WCS_COVERAGE_1_TIME"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[ <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><temporalSubset>
	<gml:timePosition>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1_TIME"/><![CDATA[</timePosition>
</temporalSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
               <parsers:HeadersParser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:if test="not(normalize-space(substring-before(concat(/headers/header[translate(name, 'CONTYPE', 'contype') = 'content-type']/value, ';'), ';'))=$VAR_WCS_FORMAT_1_HEADER)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
   <ctl:test name="wcs1-0-0:getcoverage_operations-getcoverage_request-time-post-xml-2">
      <ctl:param name="VAR_WCS_VERSION"/>
      <ctl:param name="VAR_WCS_COVERAGE_1"/>
      <ctl:param name="VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
      <ctl:param name="VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
      <ctl:assertion>When a GetCoverage request is made WITH an invalid TIME, the server returns a service  exception.</ctl:assertion>
      <ctl:comment><![CDATA[Check for valid XML where /ServiceExceptionReport exists. ]]></ctl:comment>
      <ctl:link title="OGC 03-065r6: cl. 9.2.3.3">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#9.2.3.3_DomainSubset</ctl:link>
      <ctl:code>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_DESCRIBE_COVERAGE_HTTP_GET_URL"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="CoVeRaGe">
                  <xsl:value-of select="$VAR_WCS_COVERAGE_1"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="$VAR_WCS_VERSION"/>
               </ctl:param>
               <ctl:param name="SeRvIcE">WCS</ctl:param>
               <ctl:param name="ReQuEsT">DescribeCoverage</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_TEMP_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="string(/*[local-name()='CoverageDescription'][1]//*[local-name()='Envelope'][1]/@srsName)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_TEMP_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_TEMP_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_COVERAGE_1_CRS">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(string-length(string($VAR_WCS_TEMP_CRS)) != 0,string($VAR_WCS_TEMP_CRS), &#34;You_got_this_because_you_did_not_have_crs_included_in_your_first_domainSet_in_your_first_Coverage&#34;)"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_COVERAGE_1_CRS: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_COVERAGE_1_CRS"/>
         </ctl:message>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="VAR_WCS_FORMAT_1">
            <xsl:for-each select="$request1">
               <xsl:value-of select="citef:iif(&#xA;contains(//*[local-name()='formats'][1],&#34; &#34;),&#xA;substring-before(normalize-space(/*[local-name()='CoverageDescription'][1]//*[local-name()='formats'][1]),&#34; &#34;), &#xA;string(/*[local-name()='CoverageDescription']//*[local-name()='formats'][1]))"/>
            </xsl:for-each>
         </xsl:variable>
         <ctl:message>VAR_WCS_FORMAT_1: <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$VAR_WCS_FORMAT_1"/>
         </ctl:message>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request1">
            <xsl:if test="not(*)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
         <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="request2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="$VAR_WCS_GET_COVERAGE_HTTP_POST_URL"/>
               </ctl:url>
               <ctl:method>post</ctl:method>
               <ctl:header name="Content-type">text/xml</ctl:header>
               <ctl:body><![CDATA[  <GetCoverage xmlns="http://www.opengis.net/wcs" xmlns:gml="http://www.opengis.net/gml"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs http://schemas.opengis.net/wcs/1.0.0/getCoverage.xsd" version="]]><xsl:value-of select="$VAR_WCS_VERSION"/><![CDATA[" service="WCS" ><sourceCoverage>]]><xsl:value-of select="$VAR_WCS_COVERAGE_1"/><![CDATA[</sourceCoverage><domainSubset><temporalSubset>
	<gml:timePosition>WCS_TIME_INVALID</timePosition>
</temporalSubset></domainSubset>
<output><format>]]><xsl:value-of select="$VAR_WCS_FORMAT_1"/><![CDATA[</format></output></GetCoverage>]]></ctl:body>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$request2">
            <xsl:variable name="expression">not(boolean(//*[local-name()='ServiceExceptionReport']))</xsl:variable>
            <xsl:if test="saxon:evaluate($expression)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>
</ctl:package>
