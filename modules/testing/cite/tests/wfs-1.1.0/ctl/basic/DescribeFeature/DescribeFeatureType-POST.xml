<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <ctl:test name="wfs:run-DescribeFeatureType-POST">
      <param name="wfs.GetCapabilities.document"/>
      <param name="gmlsf.profile.level"/>
      <ctl:assertion>
      Run test group for DescribeFeatureType requests using the POST method. Tarpost endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/@xlink:href}.
      </ctl:assertion>
      <ctl:code>
      
		<xsl:variable name="wfs.DescribeFeatureType.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>      
                <xsl:variable name="kvp-post-supported" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint[@name='InputFormat' and ows:Value='application/x-www-form-urlencoded'])"/>
      
		<xsl:if test="$kvp-post-supported">
			<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc2.1">
				<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
			</ctl:call-test>	
		</xsl:if>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.2">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.3">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.4">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.5">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.6">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>			
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc6.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc7.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
			<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>			
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>		
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc11.1">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>		
		</ctl:call-test>	
		
        <xsl:if test="gmlsf.profile.level = 'sf-1'">
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.2">
			<ctl:with-param name="wfs.DescribeFeatureType.post.url" select="$wfs.DescribeFeatureType.post.url"/>
		</ctl:call-test>	
        </xsl:if>			
		
      </ctl:code>
    </ctl:test>
   
   <test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc2.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The Content-Type of all POST KVP-encoded request entities must be 'application/x-www-form-urlencoded'.</assertion>
      <comment>DescribeFeatureType with 'application/x-www-form-urlencoded' encoding (default), KVP over POST.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc7</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
					<method>post</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			            <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
						<ctl:fail/>
				 </xsl:when>
				 <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '1.1.0' and service '', expects default of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.2">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '1.1.0' and  no service (derived from namespace, value of 'WFS').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document as expected.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.2.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.3">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with no version and service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>			
				</xsl:otherwise>
			</xsl:choose>
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.4">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with version '' and service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.4.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>	
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.5">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with a version of '1.1.0' and a bogus service of 'FOO'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.5.body.xml"/>
				   </body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc3.6">
      <param name="wfs.DescribeFeatureType.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>DescribeFeatureType with a bogus version of '2.0.0' and a service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc3.6.body.xml"/>
				   </body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>		
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc6.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
	  <assertion>The Content-Type of all XML request entities must be 'application/xml'.</assertion>
      <comment>DescribeFeatureType with the encoding as 'application/xml' (default).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc11</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc6.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc7.1">
      <param name="wfs.DescribeFeatureType.post.url"/>
	  <param name="gmlsf.profile.level"/>      
	  <assertion>Application schemas that comply with GML 3.1.1 must be a supported. These are presented if no outputFormat is specified.</assertion>
      <comment>DescribeFeatureType for a single feature type, expect the schema to validate with the proper GMLSF level as well.  Pass if all of the following conditions are true: (1) the response is schema valid (both xsd:schema and the proper GMLSF level supported); (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc1</link>
      <link>OGC 04-094, 8.1, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc7.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.1">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type ('sf:PrimitiveGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc9.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>					
					<xsl:variable name="expression">//xsd:element/@name = 'PrimitiveGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc9.2">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type in GMLSF level 1 ('sf:ComplexGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc9.2.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>					
					<xsl:variable name="expression">//xsd:element/@name = 'ComplexGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc11.1">
      <param name="wfs.DescribeFeatureType.post.url"/>  
	  <assertion>A request with no TypeName elements shall produce a response that includes definitions of all supported feature types in the requested schema language.</assertion>
      <comment>DescribeFeatureType no feature types, expect either the CITE test schema or a wrapper schema that imports it, among other schemas.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for all the feature types in the test schema.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc3</link>
      <link>OGC 04-094, 8.2, p.25</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-DescribeFeatureType-tc11.1.body.xml"/>
				   </body>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:variable name="citeNamespaceURL" select="$request1//xsd:import[@namespace='http://cite.opengeospatial.org/gmlsf']/@schemaLocation"/>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					
					<xsl:choose>
						<!--Required schema-->
						<xsl:when test="string($citeNamespaceURL)=''">	
							<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>										
							<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>
						</xsl:when>
						<!--Wrapper schema, must get the required schema-->
						<xsl:otherwise>
						
							<xsl:variable name="request2">
								<request>
									<url>
										<xsl:value-of select="$citeNamespaceURL"/>
									</url>
								   <method>get</method>
									<!--<p:XMLValidatingParser.XMLSchema/>-->
								</request>
							</xsl:variable>							

							<xsl:choose>
								<xsl:when test="not($request2/*)">
									<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
						
									<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>										
									<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>						
								</xsl:otherwise>
								</xsl:choose>
						
						</xsl:otherwise>
					</xsl:choose>
					
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

</ctl:package>
