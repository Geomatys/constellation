<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:sf="http://cite.opengeospatial.org/gmlsf"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="wfs:run-GetFeature-POST-arithmeticops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with simple arithmetic operators: Add, Sub, Mul, Div.</ctl:assertion>
      <ctl:code>
		<xsl:variable name="wfs.GetFeature.post.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
		</xsl:variable>

        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc301.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.1">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.2">
			<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
		</ctl:call-test>

      </ctl:code>
    </ctl:test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Add, using PropertyIsEqualTo to find a feature with an sf:intProperty of a feature + 149.97.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc300.1.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=155</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc300.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Add, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature's sf:decimalProperty of + 1 (all features with int values greater than features with decimal value + 1).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc300.2.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc301.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Invoking an unknown function shall produce an exception report.</assertion>
      <comment>A bogus function name, ASDF, is used which should give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the response document element is ows:ExceptionReport.</comment>
      <link>filter-1.1.0-functions-atc301</link>
      <link>OGC 04-095, ?</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc301.1.body.xml"/>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Sub, using PropertyIsEqualTo to find a feature with an sf:decimalProperty of a feature - 149.98.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc302.1.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:decimalProperty=4.02</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc302.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Sub, using PropertyIsLessThan to find a feature with an sf:decimalProperty of a feature's sf:intProperty of -10 (all features with decimal values less than features with int value - 10).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc302.2.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Mul, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature's sf:decimalProperty * 2.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc303.1.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">not(//sf:intProperty=-900)</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc303.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Mul, using PropertyIsLessThanOrEqualTo to find a feature with an sf:intProperty of a feature's sf:decimalProperty * -1.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc303.2.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:intProperty=-900</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Div, using PropertyIsEqualTo to find a feature with an sf:doubleProperty of a feature / 9999.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances (0).</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc304.1.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc304.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All supported (including arithmetic) functions should be defined in the service capabilities document. A defined function accepts 0 or more arguments and returns a single value.</assertion>
      <comment>Arithmetic function Div, using PropertyIsGreaterThan to find a feature with an sf:intProperty of a feature / 3.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instances.</comment>
      <link>filter-1.1.0-functions-atc300</link>
      <link>OGC 04-095, 15.1, p.17</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
						<xi:include href="wfs-1.1.0-Basic-GetFeature-tc304.2.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=-900</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

</ctl:package>