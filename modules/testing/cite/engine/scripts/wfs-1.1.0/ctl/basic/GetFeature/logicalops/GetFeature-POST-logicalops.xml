<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:sf="http://cite.opengeospatial.org/gmlsf"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="wfs:run-GetFeature-POST-logicalops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with logical operators: And, Or, Not.</ctl:assertion>
      <ctl:code>
                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>

        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/PropertyIsBetween predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/PropertyIsBetween predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc100.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount != 3">
                <ctl:message>FAILURE: Expected 3 sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:doubleProperty">
                <xsl:if test="not((xsd:double(.) lt 20.0) or (xsd:double(.) gt 100.0))">
                  <ctl:message>FAILURE: sf:doubleProperty value is not &lt; 20 or &gt; 100 (gml:id = <xsl:value-of select="../@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/BBOX predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/BBOX predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc100.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount != 2">
                <ctl:message>FAILURE: Expected 2 sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:4326">
                  <gml:lowerCorner>34.0 16.0</gml:lowerCorner>
                  <gml:upperCorner>40.0 19.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                <xsl:if test="./gml:boundedBy">
                        <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 1">
                          <ctl:message>FAILURE: Envelopes intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:if>
              </xsl:for-each>
              <!-- TODO evaluate spatial relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc100.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Not/Not predicate must include only matching feature representations.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the Not/Not/BBOX predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc100</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc100.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:4326">
                  <gml:lowerCorner>55.0 -2.5</gml:lowerCorner>
                  <gml:upperCorner>65.0 2.5</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                <xsl:if test="./gml:boundedBy">
                  <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 0">
                    <ctl:message>FAILURE: Envelopes do NOT intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:if>
              </xsl:for-each>
              <xsl:if test="not($response//sf:EntitéGénérique[sf:featureRef = 'name-f003'])">
                        <ctl:message>FAILURE: Did not return expected feature (sf:featureRef = 'name-f003')</ctl:message>
                        <ctl:fail/>
              </xsl:if>
              <!-- TODO evaluate spatial relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                   <xi:include href="wfs-1.1.0-Basic-GetFeature-tc101.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:4326">
                  <gml:lowerCorner>36.0 -1.0</gml:lowerCorner>
                  <gml:upperCorner>42.0 4.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="xsd:date(sf:dateProperty) le xsd:date('2006-10-01Z')">
                  <ctl:message>FAILURE: sf:dateProperty value on or before 2006-10-01Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
               <xsl:if test="./gml:boundedBy">
                       <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 0">
                         <ctl:message>FAILURE: Envelopes do NOT intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                         <ctl:fail/>
                       </xsl:if>
               </xsl:if>
              </xsl:for-each>
              <!-- TODO evaluate intersects relationship -->
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc101.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:AggregateGeoFeature">
                <xsl:if test="xsd:double(sf:doubleProperty) lt 24510">
                  <ctl:message>FAILURE: sf:doubleProperty value &lt; 24510 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="compare(sf:featureCode, 'AK020') != 0">
                  <ctl:message>FAILURE: sf:featureCode != "AK020" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc101.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      And predicate must include only features that satisfy ALL constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying all predicates.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc101</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc101.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:4326">
                  <gml:lowerCorner>40.0 -5.0</gml:lowerCorner>
                  <gml:upperCorner>50.0 -1.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:AggregateGeoFeature">
                <xsl:if test="xsd:double(sf:doubleProperty) le 20.0">
                  <ctl:message>FAILURE: sf:doubleProperty &lt;= 20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="./gml:boundedBy">
                        <xsl:if test="wfs:disjoint-envelopes($env,gml:boundedBy) != 1">
                          <ctl:message>FAILURE: Envelopes intersect (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                </xsl:if>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      Or predicate must include features that satisfy ANY of the constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying any predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc102</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc102.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty feature collection.</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="env">
                <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:4326">
                  <gml:lowerCorner>34.0 15.0</gml:lowerCorner>
                  <gml:upperCorner>40.0 19.0</gml:upperCorner>
                </gml:Envelope>
              </xsl:variable>
              <xsl:for-each select="$response//sf:EntitéGénérique">
                  <xsl:if test="not(sf:str4Property or sf:attribut.Géométrie)">
                    <ctl:message>FAILURE: sf:EntitéGénérique missing an expected property: sf:str4Property or sf:attribut.Géométrie (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
              </xsl:for-each>
              <!-- verify sorting -->
              <xsl:variable name="f1.str4" select="($response//sf:EntitéGénérique)[1]/sf:str4Property" />
              <xsl:variable name="f2.str4" select="($response//sf:EntitéGénérique)[2]/sf:str4Property" />
              <xsl:if test="(compare($f1.str4,$f2.str4) ne -1)">
                  <ctl:message>FAILURE: Features are not sorted by sf:str4Property in ascending order.</ctl:message>
                  <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc102.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having an
      Or predicate must include features that satisfy ANY of the constraints.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying any predicate.
      </ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc102</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc102.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                  <xsl:if test="not(sf:intProperty or sf:decimalProperty)">
                    <ctl:message>FAILURE: sf:PrimitiveGeoFeature missing an expected property: sf:intProperty or sf:decimalProperty (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="sf:intProperty and sf:decimalProperty">
                      <xsl:if test="(xsd:integer(sf:intProperty) = 155) and ((xsd:decimal(sf:decimalProperty) lt 10.0) or (xsd:decimal(sf:decimalProperty) gt 20.0))">
                        <ctl:message>FAILURE: sf:intProperty = 155 AND sf:decimalProperty is not in the range 10.0-20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="sf:intProperty">
                      <xsl:if test="xsd:integer(sf:intProperty) = 155">
                        <ctl:message>FAILURE: sf:intProperty = 155 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="(xsd:decimal(sf:decimalProperty) lt 10.0) or (xsd:decimal(sf:decimalProperty) gt 20.0)">
                        <ctl:message>FAILURE: sf:decimalProperty is not in the range 10.0-20.0 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
              </xsl:for-each>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>
</ctl:package>
