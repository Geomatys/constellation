<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <ctl:test name="wfs:run-DescribeFeatureType-GET">
      <param name="wfs.GetCapabilities.document"/>
      <param name="gmlsf.profile.level"/>      
      <ctl:assertion>
      Run test group for DescribeFeatureType requests using the GET method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
      </ctl:assertion>
      <ctl:code>
		<xsl:variable name="wfs.DescribeFeatureType.get.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>	      

   		<ctl:call-test name="wfs:DescribeFeatureType-output-format-default">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document" />
		</ctl:call-test>
		<ctl:call-test name="wfs:DescribeFeatureType-output-format-XMLSCHEMA">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document" />
		</ctl:call-test>
		<ctl:call-test name="wfs:DescribeFeatureType-output-format-gml-2.1.2">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document" />
		</ctl:call-test>			
		<ctl:call-test name="wfs:DescribeFeatureType-output-format-gml-3.1.1">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document" />
		</ctl:call-test>
 		<ctl:call-test name="wfs:DescribeFeatureType-invalid-featureType">
			<ctl:with-param name="CAPABILITIES" select="$wfs.GetCapabilities.document" />
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc1.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.2">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.3">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.4">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc5.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc8.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
			<ctl:with-param name="gmlsf.profile.level" select="$gmlsf.profile.level"/>			
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc12.1">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
		
        <xsl:if test="gmlsf.profile.level = 'sf-1'">
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.2">
			<ctl:with-param name="wfs.DescribeFeatureType.get.url" select="$wfs.DescribeFeatureType.get.url"/>
		</ctl:call-test>	
        </xsl:if>		
		
      </ctl:code>
    </ctl:test>
   
	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc1.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>A valid namespace binding expressed by the namespace parameter in a KVP string shall conform to the syntax specified in subclause 14.4.</assertion>
      <comment>DescribeFeatureType with the namespace KVP parameter (escaped by engine).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-atc6</link>
      <link>OGC 04-094, 14.4, p.96</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>	

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', version '1.1.0', and request of 'DescribeFeatureType'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>			

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.2">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', version '1.1.0', and no request parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>		

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.3">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters version '1.1.0', and request 'DescribeFeatureType', but no service.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="request">DescribeFeatureType</param>					
					<param name="version">1.1.0</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>	

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc4.4">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>The following query parameters are required for all KVP-encoded service requests except GetCapabilities: service, request, version.</assertion>
      <comment>DescribeFeatureType with required parameters service 'WFS', and request 'DescribeFeatureType', but no version.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc4</link>
      <link>OGC 05-008c1, 9.2.1, p.36 (Table 20)</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="request">DescribeFeatureType</param>					
					<param name="service">WFS</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>	

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc5.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
      <assertion>A comma (',') shall be used to delimit list items within multi-valued parameters in KVP strings.</assertion>
      <comment>DescribeFeatureType with multiple typename seperated by a comma.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an xsd:schema document.</comment>
      <link>ows-1.0.0-common-atc7</link>
      <link>OGC 05-008c1, 11.5.3, p.57</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature,sf:AggregateGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>		

			<xsl:choose>
				<xsl:when test="not($request1/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
				<xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			
		</code>
	</test>		
		
	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc8.1">
      <param name="wfs.DescribeFeatureType.get.url"/>
	  <param name="gmlsf.profile.level"/>      
	  <assertion>Application schemas that comply with GML 3.1.1 must be a supported. These are presented if no outputFormat is specified.</assertion>
      <comment>DescribeFeatureType for a single feature type, expect the schema to validate with the proper GMLSF level as well.  Pass if all of the following conditions are true: (1) the response is schema valid (both xsd:schema and the proper GMLSF level supported); (2) the root document is a xsd:schema document.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc1</link>
      <link>OGC 04-094, 8.1, p.24</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
				   <method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>		

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.1">
      <param name="wfs.DescribeFeatureType.get.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type ('sf:PrimitiveGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
				   <method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:PrimitiveGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>								
					<xsl:variable name="expression">//xsd:element/@name = 'PrimitiveGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc10.2">
      <param name="wfs.DescribeFeatureType.get.url"/>  
	  <assertion>A request for a given TypeName shall produce a response that includes the corresponding type definition in the requested schema language.</assertion>
      <comment>DescribeFeatureType for a single feature type in GMLSF level 1 ('sf:ComplexGeoFeature'), expect the schema to contain a schema description for that feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for the requested feature type (with correct targetNamespace).</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc2</link>
      <link>OGC 04-094, 8.3, p.26</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
				   <method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<param name="typename">sf:ComplexGeoFeature</param>
					<param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>								
					<xsl:variable name="expression">//xsd:element/@name = 'ComplexGeoFeature'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-DescribeFeatureType-tc12.1">
      <param name="wfs.DescribeFeatureType.get.url"/>  
	  <assertion>A request with no TypeName elements shall produce a response that includes definitions of all supported feature types in the requested schema language.</assertion>
      <comment>DescribeFeatureType no feature types, expect either the CITE test schema or a wrapper schema that imports it, among other schemas.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a xsd:schema document; (3) the schema has an entry for all the feature types in the test schema.</comment>
      <link>wfs-1.1.0-Basic-DescribeFeatureType-atc3</link>
      <link>OGC 04-094, 8.2, p.25</link>
		<code>
		
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.DescribeFeatureType.get.url"/>
					</url>
				   <method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">DescribeFeatureType</param>
					<p:XMLValidatingParser.XMLSchema/>
				</request>
			</xsl:variable>			

			<xsl:variable name="citeNamespaceURL" select="$request1//xsd:import[@namespace='http://cite.opengeospatial.org/gmlsf']/@schemaLocation"/>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
					<xsl:variable name="expression">//xsd:schema</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					
					<xsl:choose>
						<!--Required schema-->
						<xsl:when test="string($citeNamespaceURL)=''">	
							<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>										
							<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>
						</xsl:when>
						<!--Wrapper schema, must get the required schema-->
						<xsl:otherwise>
						
							<xsl:variable name="request2">
								<request>
									<url>
										<xsl:value-of select="$citeNamespaceURL"/>
									</url>
								   <method>get</method>
									<!--<p:XMLValidatingParser.XMLSchema/>-->
								</request>
							</xsl:variable>							

							<xsl:choose>
								<xsl:when test="not($request2/*)">
									<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
						
									<xsl:variable name="expression">//@targetNamespace = 'http://cite.opengeospatial.org/gmlsf'</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>										
									<xsl:variable name="expression">(//xsd:element/@name = 'PrimitiveGeoFeature') and (//xsd:element/@name = 'AggregateGeoFeature') and (//xsd:element/@name = 'EntitéGénérique')</xsl:variable>
									<ctl:call-test name="ctl:assert-xpath">
										<ctl:with-param name="expr" select="$expression"/>
										<ctl:with-param name="doc" select="$request2"/>
									</ctl:call-test>						
								</xsl:otherwise>
								</xsl:choose>
						
						</xsl:otherwise>
					</xsl:choose>
					
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

	<ctl:test name="wfs:DescribeFeatureType-output-format-default">
		<ctl:param name="CAPABILITIES" />
		<ctl:assertion>The MIME returned for a DescribeFeatureType request where no specific output format is requested is "text/xml; subtype=gml/3.1.1".</ctl:assertion>
		<ctl:comment></ctl:comment>				
      	<ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
      	<ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
		<ctl:code>
			<xsl:variable name="RESPONSE">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>			
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="request">DescribeFeatureType</ctl:param>					
					<ctl:param name="service">WFS</ctl:param>
					<ctl:param name="version">1.1.0</ctl:param>
		            <parsers:HTTPParser>
		               <parsers:parse>
		                  <parsers:NullParser/>
		               </parsers:parse>
		            </parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>	
			<xsl:if test="not($RESPONSE/response/headers/header[lower-case(@name) = 'content-type']= 'text/xml; subtype=gml/3.1.1')">
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>

	<ctl:test name="wfs:DescribeFeatureType-output-format-XMLSCHEMA">
		<ctl:param name="CAPABILITIES" />
		<ctl:assertion>When output format XMLSCHEMA is supported, the MIME returned for a DescribeFeatureType request where the output format requested is XMLSCHEMA is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
		<ctl:comment></ctl:comment>				
      	<ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
      	<ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
		<ctl:code>
	        <xsl:choose>
	            <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:Parameter[@name='outputFormat' and ows:Value='XMLSCHEMA']">
					<xsl:variable name="RESPONSE">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>			
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">DescribeFeatureType</ctl:param>					
							<ctl:param name="service">WFS</ctl:param>
							<ctl:param name="version">1.1.0</ctl:param>
							<ctl:param name="outputformat">XMLSCHEMA</ctl:param>
				            <parsers:HTTPParser>
				               <parsers:parse>
				                  <parsers:NullParser/>
				               </parsers:parse>
				            </parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>	
					<xsl:if test="not($RESPONSE/response/headers/header[lower-case(@name) = 'content-type']= 'text/xml; subtype=gml/2.1.2')">
						<ctl:fail/>
					</xsl:if>
	            </xsl:when>
	            <xsl:otherwise>
					<ctl:message>output format XMLSCHEMA is not supported</ctl:message>
	            </xsl:otherwise>
	         </xsl:choose>
		</ctl:code>
	</ctl:test>

	<ctl:test name="wfs:DescribeFeatureType-output-format-gml-2.1.2">
		<ctl:param name="CAPABILITIES" />
		<ctl:assertion>When output format "text/xml; subtype=gml/2.1.2" is supported, the MIME returned for a DescribeFeatureType request where the output format requested is "text/xml; subtype=gml/2.1.2" is "text/xml; subtype=gml/2.1.2".</ctl:assertion>
		<ctl:comment></ctl:comment>				
      	<ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
      	<ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
		<ctl:code>
	        <xsl:choose>
	            <xsl:when test="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:Parameter[@name='outputFormat' and ows:Value='text/xml; subtype=gml/2.1.2']">
					<xsl:variable name="RESPONSE">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>			
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">DescribeFeatureType</ctl:param>					
							<ctl:param name="service">WFS</ctl:param>
							<ctl:param name="version">1.1.0</ctl:param>
							<ctl:param name="outputformat">
						         <xsl:value-of select="wfs:encode('text/xml; subtype=gml/2.1.2')"/>
							</ctl:param>
				            <parsers:HTTPParser>
				               <parsers:parse>
				                  <parsers:NullParser/>
				               </parsers:parse>
				            </parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>	
					<xsl:if test="not($RESPONSE/response/headers/header[lower-case(@name) = 'content-type']= 'text/xml; subtype=gml/2.1.2')">
						<ctl:fail/>
					</xsl:if>
	            </xsl:when>
	            <xsl:otherwise>
					<ctl:message>output format 'text/xml; subtype=gml/2.1.2' is not supported</ctl:message>
	            </xsl:otherwise>
	         </xsl:choose>
		</ctl:code>
	</ctl:test>

	<ctl:test name="wfs:DescribeFeatureType-output-format-gml-3.1.1">
		<ctl:param name="CAPABILITIES" />
		<ctl:assertion>The MIME returned for a DescribeFeatureType request where the output format requested is "text/xml; subtype=gml/3.1.1" is "text/xml; subtype=gml/3.1.1".</ctl:assertion>
		<ctl:comment></ctl:comment>				
      	<ctl:link>OGC 04-094, 6.4, p.11</ctl:link>
      	<ctl:link>OGC 04-094, 8.2, p.25</ctl:link>
		<ctl:code>
			<xsl:variable name="RESPONSE">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>			
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="request">DescribeFeatureType</ctl:param>					
					<ctl:param name="service">WFS</ctl:param>
					<ctl:param name="version">1.1.0</ctl:param>
					<ctl:param name="outputformat">
				         <xsl:value-of select="wfs:encode('text/xml; subtype=gml/3.1.1')"/>
					</ctl:param>
		            <parsers:HTTPParser>
		               <parsers:parse>
		                  <parsers:NullParser/>
		               </parsers:parse>
		            </parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>	
			<xsl:if test="not($RESPONSE/response/headers/header[lower-case(@name) = 'content-type']= 'text/xml; subtype=gml/3.1.1')">
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>

	<ctl:test name="wfs:DescribeFeatureType-invalid-featureType">
		<ctl:param name="CAPABILITIES" />
		<ctl:assertion>The response for a DescribeFeatureType request with an invalid feature type is an exception.</ctl:assertion>
		<ctl:comment></ctl:comment>				
      	<ctl:link>OGC 04-094, 8.4, p.27</ctl:link>
		<ctl:code>
			<xsl:variable name="RESPONSE">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$CAPABILITIES/ows:OperationsMetadata/ows:Operation[@name='DescribeFeatureType']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>			
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="request">DescribeFeatureType</ctl:param>					
					<ctl:param name="service">WFS</ctl:param>
					<ctl:param name="version">1.1.0</ctl:param>
					<param name="typename">InValidFeatureType</param>					
		            <parsers:HTTPParser>
		               <parsers:parse>
		                  <parsers:HTTPParser/>
		               </parsers:parse>
		            </parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>	
			<xsl:if test="not($RESPONSE//ows:Exception/*)">
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
		
</ctl:package>
