<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:sf="http://cite.opengeospatial.org/gmlsf"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="wfs:run-GetFeature-POST-gmlsf1">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) at GMLSF Level 1.</ctl:assertion>
      <ctl:code>
                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc401.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc403.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc404.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.7">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.8">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.9">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.10">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc400.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the optional property sf:b64BinaryProperty; other OPTIONAL elements (sf:hexBinaryProperty and sf:reference) should not be included in the response.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc400.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>FAILURE: Invalid response entity, expected wfs:FeatureCollection.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                    <!--<xsl:if test="not(sf:b64BinaryProperty)">
                      <ctl:message>FAILURE: Missing sf:b64BinaryProperty (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xil:if>-->
                    <xsl:if test="sf:hexBinaryProperty or sf:reference">
                      <ctl:message>FAILURE: Optional properties (sf:hexBinaryProperty or sf:reference) are included, but were not requested (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc400.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the mandatory property sf:observation, as well as other mandatory elements, (no optional properties should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc400.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:observation</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:hexBinaryProperty) and not(//sf:b64BinaryProperty) and not(//sf:reference)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc401.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with a known typename in the query (from test data).  Note: no lists to be used as they are to be phased out in 1.2.0.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  there must be at least the requested features in the response.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc401.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">count(//sf:ComplexGeoFeature) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>


<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by gml:name.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc402.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">
                                          <xsl:choose>
                                            <xsl:when test="boolean(//gml:featureMember/sf:ComplexGeoFeature)">//gml:featureMember/sf:ComplexGeoFeature/gml:name = 'name-f103'</xsl:when>
                                            <xsl:otherwise>//gml:featureMembers/sf:ComplexGeoFeature/gml:name = 'name-f103'</xsl:otherwise>
                                          </xsl:choose>
                                        </xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for all feature with all properties except sf:hexBinaryProperty and sf:reference.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features requested; (4) the result features must not contain any optional properties not specified in the propertyNames of the request.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc402.2.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:hexBinaryProperty) and not(//sf:reference)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc402.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by type (sf:PrimitiveGeoFeature and sf:ComplexGeoFeature).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must only contain the features requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc402.3.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 8</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature) and not(//sf:EntitéGénérique)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc403.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX for all level 1 features, including those with curve and surface properties.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature members expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc403.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">count(//sf:ComplexGeoFeature) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:Surface and //gml:Curve</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc404.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly select the objects specified by the list of supplied identifiers. The  identification scheme is service-specific, but valid identifiers must substitute for ogc:_Id.</assertion>
      <comment>GetFeature to first get more than one feature id (gml:id), then another GetFeature filtering on the gml:ids.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have at least the three feature members expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc2</link>
      <link>OGC 04-095, 11.1, p.14</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc404.1.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id1">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[1]/@gml:id" />
            </xsl:variable>
            <xsl:variable name="gml.id2">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[2]/@gml:id" />
            </xsl:variable>
            <xsl:variable name="gml.id3">
              <xsl:value-of select="$request1//sf:ComplexGeoFeature[3]/@gml:id" />
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc404.1.2.body.xml"/>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:for-each select="$request2//sf:ComplexGeoFeature">
                      <xsl:variable name="id"><xsl:value-of select="@gml:id"/></xsl:variable>
                      <xsl:if test="empty(index-of(($gml.id1, $gml.id2, $gml.id3), $id))">
                        <ctl:message>FAILURE: Unexpected gml:id value (<xsl:value-of select="$id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the gml:name of 'name-f102'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(gml:name, 'name-f102') != 0">
                        <ctl:message>FAILURE: gml:name != "name-f102" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the gml:name of 'Vivamus Blandit'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(gml:name[text() = 'Vivamus blandit']))">
                        <ctl:message>FAILURE: gml:name != "Vivamus blandit" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:observation of '2.4'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="sf:observation != 2.4">
                        <ctl:message>FAILURE: sf:observation != 2.4 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the sf:typeCode of 'AQ064'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:typeCode, 'AQ064') != 0">
                        <ctl:message>FAILURE: sf:typeCode != "AQ064" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:b64BinaryProperty attribute mimeType of 'text/plain'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.5.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(//@mimeType, 'text/plain') != 0">
                        <ctl:message>FAILURE: //@mimeType != "text/plain" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for an sf:Event's userid of 'Phineas.Fogg' within the sf:auditTrail.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.6.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 2">
                      <ctl:message>FAILURE: Expected at least two sf:ComplexGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(sf:auditTrail[sf:Event/sf:userid = 'Phineas.Fogg']))">
                        <ctl:message>FAILURE: sf:auditTrail/sf:Event/sf:userid != "Phineas.Fogg" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.7">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for the sf:hexBinaryProperty of '3f3c6d78206c657673726f693d6e3122302e20226e656f636964676e223d54552d4622383e3f'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2)  the result feature set contains no features.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.7.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>FAILURE: Invalid response entity, expected wfs:FeatureCollection.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount != 0">
                      <ctl:message>FAILURE: Expected an empty collection in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.8">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:observation attribute uom of 'http://www.bipm.fr/en/si/derived_units/Celsius'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.8.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least one sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:observation/@uom, 'http://www.bipm.fr/en/si/derived_units/Celsius') != 0">
                        <ctl:message>FAILURE: sf:observation/@uom != "http://www.bipm.fr/en/si/derived_units/Celsius" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.9">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for sf:typeCode attribute codeSpace of 'https://www.dgiwg.org/FAD'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.9.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 3">
                      <ctl:message>FAILURE: Expected at least three sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="compare(sf:typeCode/@codeSpace, 'https://www.dgiwg.org/FAD') != 0">
                        <ctl:message>FAILURE: sf:typeCode/@codeSpace != "https://www.dgiwg.org/FAD" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc405.10">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a datetime property (sf:timestamp in sf:Event), for a value between '2006-10-21T11:27:00+01:00' and '2006-10-21T11:29:00+01:00'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc405.10.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:ComplexGeoFeature)" />
                    <xsl:if test="$featureCount lt 2">
                      <ctl:message>FAILURE: Expected at least two sf:ComplexGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:ComplexGeoFeature">
                      <xsl:if test="not(boolean(.//sf:timestamp[(xsd:dateTime(.) ge xsd:dateTime('2006-10-21T11:27:00+01:00')) or (xsd:dateTime(.) le xsd:dateTime('2006-10-21T11:29:00+01:00'))]))">
                        <ctl:message>FAILURE: //sf:timestamp not in interval "2006-10-21T11:27:00+01:00" to "2006-10-21T11:29:00+01:00" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

</ctl:package>
