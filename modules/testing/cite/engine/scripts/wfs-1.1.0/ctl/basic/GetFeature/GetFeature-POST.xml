<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:sf="http://cite.opengeospatial.org/gmlsf"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <!-- include test groups for optional capabilities -->
    <xi:include href="logicalops/GetFeature-POST-logicalops.xml"/>
    <xi:include href="spatialops/GetFeature-POST-spatialops.xml"/>
    <xi:include href="arithmeticops/GetFeature-POST-arithmeticops.xml"/>
    <xi:include href="gmlsf-1/GetFeature-POST-gmlsf1.xml"/>

    <ctl:test name="wfs:run-GetFeature-POST">
      <ctl:param name="wfs.GetCapabilities.document"/>
          <ctl:param name="gmlsf.profile.level"/>
          <ctl:param name="wfs-xlink"/>

      <ctl:assertion>
      Run test group for GetFeature requests using the POST method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

                <xsl:variable name="wfs.GetFeature.post.url">
                        <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
                </xsl:variable>
                <xsl:variable name="kvp-post-supported" select="boolean($wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint[@name='InputFormat' and ows:Value='application/x-www-form-urlencoded'])"/>

                <xsl:variable name="wfs.PrimitiveGeoFeature.DefaultSRS">
                        <xsl:value-of select="$wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:FeatureType[wfs:Name='sf:PrimitiveGeoFeature']/wfs:DefaultSRS"/>
                </xsl:variable>

                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc1.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc2.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc3.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:if test="not(string-length($wfs-xlink) gt 0)">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc4.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc6.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc7.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc12.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <xsl:if test="$kvp-post-supported">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc18.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc20.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc25.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc28.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        <ctl:with-param name="wfs.PrimitiveGeoFeature.DefaultSRS" select="$wfs.PrimitiveGeoFeature.DefaultSRS"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc33.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc34.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.7">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc43.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc49.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.5">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>
                <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.6">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

        <!-- run tests for optional capabilities that have been implemented -->
                <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator = 'Like'">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.2">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.3">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
			<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.4">
				<ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
			</ctl:call-test>
                </xsl:if>
                <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator = 'NullCheck'">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.2">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.3">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:LogicalOperators">
          <ctl:call-test name="wfs:run-GetFeature-POST-logicalops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="count($wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator) gt 1">
          <ctl:call-test name="wfs:run-GetFeature-POST-spatialops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Scalar_Capabilities/ogc:ArithmeticOperators/ogc:SimpleArithmetic">
          <ctl:call-test name="wfs:run-GetFeature-POST-arithmeticops">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
        <!--TODO: Also check if some GMLSF1 instances are inserted before running these tests (similar to readiness tests fro GMLSF0)-->
        <xsl:if test="$gmlsf.profile.level = 'sf-1'">
          <ctl:call-test name="wfs:run-GetFeature-POST-gmlsf1">
                    <ctl:with-param name="wfs.GetCapabilities.document" select="$wfs.GetCapabilities.document"/>
                  </ctl:call-test>
        </xsl:if>
      </ctl:code>
    </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc1.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The default output format is XML that complies with GML 3.1.1.</assertion>
      <comment>GML 3.1.1 in this case is the GMLSF schema, for the level supported, 0 or 1.  Pass if all of the following conditions are true: (1) the response is schema valid (for the GMLSF level supported); (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc1</link>
      <link>OGC 04-094, 9.2, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc1.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc2.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If @resultType='hits', then only the size of the resulting feature collection and a timestamp is returned (i.e. @numberOfFeatures, @timeStamp). Only instances of requested feature types are included in the total.</assertion>
      <comment>GetFeature with resulttype of 'hits'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there are no features in the response; (4) the numberOfFeatures and timeStamp attributes are present.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc2</link>
      <link>OGC 04-094, 9.3, p.38</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc2.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//wfs:FeatureCollection/@numberOfFeatures) and boolean(//wfs:FeatureCollection/@timeStamp)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc3.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If @maxFeatures &gt; 0, then the number of features included in the response shall not exceed the specified number. Members of a feature collection do NOT count toward the total.</assertion>
      <comment>GetFeature with maxfeatures of '2'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) there are no more than the maxfeatures number of features in the response (and more than 0).</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc3</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc3.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc4.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @traverseXlinkDepth and @traverseXlinkExpiry attributes shall be ignored if the service does not implement the WFS-XLink conformance class.</assertion>
      <comment>GetFeature with values for the  traverseXlinkDepth and traverseXlinkExpiry parameters.  If it is supported then it should give a correct response, and ignore if not supported.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc4</link>
      <link>OGC 04-094, 9.1, p.33</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc4.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc5.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the optional property sf:dateProperty; other OPTIONAL elements (sf:uriProperty and sf:dateTimeProperty) should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc5.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                    <xsl:if test="sf:dateTimeProperty or sf:uriProperty">
                      <ctl:message>FAILURE: Optional properties (sf:dateTimeProperty or sf:uriProperty) are included, but were not requested (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc5.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must be schema valid and include any optional feature properties requested by the client. The document element must be a wfs:FeatureCollection.</assertion>
      <comment>Looking for the mandatory property sf:measurand, as well as other mandatory elements, (no optional properties should not be included in the response).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response must have properties specified the propertyName(s) requested and no other optional properties.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc5</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc5.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:measurand</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:dateTimeProperty) and not(//sf:uriProperty) and not(//sf:dateProperty)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc6.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The response entity must include the @xsi:schemaLocation attribute to identify the set of GML application schemas against which the matching features are valid.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the @xsi:schemaLocation parameter must be present.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc6</link>
      <link>OGC 04-094, 9.3.1, p.39</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc6.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="not($request1//wfs:FeatureCollection/@xsi:schemaLocation)">
                      <ctl:message>FAILURE: Missing required attribute, wfs:FeatureCollection/@xsi:schemaLocation</ctl:message>
                      <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc7.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @featureVersion attribute shall be ignored if versioning is not supported.</assertion>
      <comment>GetFeature with featureVersion of 'ALL'.  Should ignore if not supported, or give the all versions of this feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc10</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                    <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc7.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect typename ('sf:Asdf') in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc9.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc9.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If a request is unrecognizable or the service cannot process the request, a valid exception report must be returned.</assertion>
      <comment>GetFeature with an incorrect propertyname ('sf:asdfProperty') requested in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ServiceException document.</comment>
      <link>wfs-1.1.0-Basic-atc10</link>
      <link>OGC 04-094, 7.7, p. 23</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc9.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with @version='1.1.0' and @service is an empty string (default of 'WFS').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a version '1.1.0' and no @service (deduce from namespace).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.2.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with no version and a service 'WFS', expecting version '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.3.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with @version an empty string and @service='WFS', expecting version '1.1.0'.  Multiple versions may be implemented so generatees an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.4.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a version of '1.1.0' and a bogus service of 'FOO'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.5.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$request1" />
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                      </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc11.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The following attributes are required for all XML request entities: @version (default '1.1.0'); @service (default 'WFS').</assertion>
      <comment>GetFeature with a bogus version of '2005.05.03' and a service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-atc9</link>
      <link>OGC 04-094, 7.8, p.24</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc11.6.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$request1" />
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                      </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc12.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The Content-Type of all XML request entities must be 'application/xml'.</assertion>
      <comment>GetFeature with the encoding as 'application/xml' (default).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc11</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc12.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with a known typename in the query (from test data).  Note: no lists to be used as they are to be phased out in 1.2.0.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  there must be at least the requested features in the response.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc13.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">count(//sf:PrimitiveGeoFeature) &gt;= 4</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc13.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The @typeName attribute must identify a list of known feature types. Aliases may be declared for use in a filter expression.</assertion>
      <comment>GetFeature with an unknown typename in the query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc7</link>
      <link>OGC 04-094, 9.2, p.35</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc13.2.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The geometry representations in the response must correspond to the CRS specified in the @srsName attribute, or the service default if not specified or unknown. Use values as recommended in OGC 06-023 (e.g. 'urn:x-ogc:def:crs:EPSG:6.10.2:4326').</assertion>
      <comment>GetFeature with the srs 'urn:x-ogc:def:crs:EPSG:4326'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response srs must be that which was requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc8</link>
      <link>OGC 04-094, 9.2, p.36</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc14.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                  <xsl:if test="$featureCount lt 5">
                    <ctl:message>FAILURE: Expected 5 sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> were included)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                  <xsl:variable name="expression">//@srsName='urn:ogc:def:crs:epsg:7.6:4326'</xsl:variable>
                                  <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                  </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc14.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The geometry representations in the response must correspond to the CRS specified in the @srsName attribute, or the service default if not specified or unknown. Use values as recommended in OGC 06-023 (e.g. 'urn:x-ogc:def:crs:EPSG:6.10.2:4326').</assertion>
      <comment>GetFeature with the bogus srs 'urn:x-ogc:def:crs:EPSG:9.99.9:99999'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc8</link>
      <link>OGC 04-094, 9.2, p.36</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc14.2.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                  <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                  <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                  </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by gml:name.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc15.1.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:PrimitiveGeoFeature/gml:name = 'name-f002'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for all feature with all properties except sf:uriProperty.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features requested; (4) the result features must not contain any optional properties not specified in the propertyNames of the request.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc15.2.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 4</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:uriProperty)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc15.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The resulting feature collection must contain only those features that satisfy the specified constraints, or all instances of the requested types if no filter expression is provided.</assertion>
      <comment>GetFeature looking for a feature by type (sf:PrimitiveGeoFeature and sf:EntitéGénérique).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must only contain the features requested.</comment>
      <link>wfs-1.1.0-Basic-GetFeature-atc9</link>
      <link>OGC 04-094, 9.2, p.37</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc15.3.body.xml"/>
                                   </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 6</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus version '11-02-2006', causing the InvalidParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3)  the exception must have the 'OperationNotSupported' exception code; (4) the exception must have the @locator value of the unsupported operation ('GetFeature').</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc16.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'version')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the invalid version attribute.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus operation 'GetFeatureLOL', causing the OperationNotSupprted exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3) the exception must have the 'OperationNotSupported' exception code; (4) the exception must have the @locator value of the unsupported operation ('GetFeatureLOL').</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc16.2.body.xml"/>
                                                </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">OperationNotSupportedPhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with query element in the incorrect namespace, causing the MissingParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3) the exception must have the 'MissingParameterValue' exception code.</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc16.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:when test="$request1//@exceptionCode='MissingParameterValue'">
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc16.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>All OGC web services must generate an exception report in response to an invalid request or whenever a condition arises that prevents request processing. A valid XML response entity must conform to the declaration of the ows:ExceptionReport element.  The values of common information items must be constrained as indicated in Tables 17-19. Additional service-specific exception codes may be defined as needed.</assertion>
      <comment>GetFeature with a bogus 'Smuery' element, causing the InvalidParameterValue exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document; (3)  the exception must have the 'InvalidParameterValue' exception code.</comment>
      <link>ows-1.0.0-exception-atc1</link>
      <link>OGC 05-008c1, 8.3, p.34</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc16.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$request1"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A reference to a coordinate reference system (CRS) shall be a URI value that conforms to a known URI scheme. Provide a URL for definitions that can be accessed from an online source; otherwise provide a URN that SHOULD conform to the syntax described in OGC 06-023.</assertion>
      <comment>GetFeature with the srs as a URN.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3) the response must use the srs that was requested.</comment>
      <link>ows-1.0.0-common-atc6</link>
      <link>OGC 05-008c1, 10.3.1, p.43</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc17.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//@srsName='urn:ogc:def:crs:epsg:7.6:4326'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc17.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A reference to a coordinate reference system (CRS) shall be a URI value that conforms to a known URI scheme. Provide a URL for definitions that can be accessed from an online source; otherwise provide a URN that SHOULD conform to the syntax described in OGC 06-023.</assertion>
      <comment>GetFeature with the srs as a URI (not valid, only as a URN).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-common-atc6</link>
      <link>OGC 05-008c1, 10.3.1, p.43</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc17.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc18.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The Content-Type of all POST KVP-encoded request entities must be 'application/x-www-form-urlencoded'.</assertion>
      <comment>GetFeature KVP over POST, with the request encoded as 'application/x-www-form-urlencoded'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document.</comment>
      <link>wfs-1.1.0-Basic-atc7</link>
      <link>OGC 04-094, 6.5.1, p.13</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <param name="service">WFS</param>
                                        <param name="version">1.1.0</param>
                                        <param name="request">GetFeature</param>
                                        <param name="typename">sf:PrimitiveGeoFeature</param>
                                        <param name="namespace">xmlns(sf=http://cite.opengeospatial.org/gmlsf)</param>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                                <ctl:fail/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Qualified property names must conform to the QName production rule defined in the Namespaces in XML specification http://www.w3.org/TR/REC-xml-names/. QName ::= (Prefix ':')? LocalPart.</assertion>
      <comment>GetFeature with a properly qualified property name 'gml:name'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature that was requested.</comment>
      <link>filter-1.1.0-common-atc1</link>
      <link>OGC 04-095, 6.2, p.4</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc19.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:name = 'name-f003'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc19.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Qualified property names must conform to the QName production rule defined in the Namespaces in XML specification http://www.w3.org/TR/REC-xml-names/. QName ::= (Prefix ':')? LocalPart.</assertion>
      <comment>GetFeature with a properly qualified property name 'gml:name', yet an incorrect namespace binding for gml casuing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-common-atc1</link>
      <link>OGC 04-095, 6.2, p.4</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc19.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc20.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A valid filter expression must conform to the content model declared for the ogc:Filter element.</assertion>
      <comment>GetFeature with a proper filter element'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the features that were requested (one or more).</comment>
      <link>filter-1.1.0-common-atc3</link>
      <link>OGC 04-095, 7.2, p.9</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc20.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature using the abbreviated local path predicate.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is a wfs:FeatureCollection document; (3)  the response must contain the feature that was requested.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc21.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f008'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the simplified position predicate ('[n]').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc21.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc21.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>XPath 1.0 shall be used to address parts of an XML representation using ogc:PropertyName. Support for the AbbreviatedRelativeLocationPath construct is required; the position() function may appear in a predicate to refer to a child node by position relative to the context node.</assertion>
      <comment>GetFeature with a filter using the position predicate ('[position()==1]').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc2</link>
      <link>OGC 04-095, 6.3.2, p.5</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc21.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:description = 'description-f001'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a literal value of type string ('description-f02').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the requested feature is in the response as expected.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc22.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//gml:name = 'name-f002'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc22.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An ogc:Literal element may include simple or complex content. If a child element appears it may belong to any target namespace, but a top-level declaration for the item must be available.</assertion>
      <comment>GetFeature with a literal value of complex type.  No features are expected, but no exception either.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response should have no feature members.</comment>
      <link>filter-1.1.0-common-atc4</link>
      <link>OGC 04-095, 14.2, p.17</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc22.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc25.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>An unsupported CRS shall generate an exception report.</assertion>
      <comment>GetFeature with a a bogus CRS 'urn:x-ogc:def:crs:ASDF:9.99:9999'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 8.3, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc25.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:PropertyName element in any spatial predicate must refer to a geometry-valued property and the supplied literal geometry value must be in the gml:_Geometry substitution group.</assertion>
      <comment>GetFeature with a spatial property name, on a BBOX query.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response should have the requested features.</comment>
      <link>filter-1.1.0-spatial-atc1</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc27.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:if test="not($request1//sf:PrimitiveGeoFeature/gml:name = 'name-f002')">
                      <ctl:message>FAILURE: Missing feature (gml:name="name-f002").</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc27.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:PropertyName element in any spatial predicate must refer to a geometry-valued property and the supplied literal geometry value must be in the gml:_Geometry substitution group.</assertion>
      <comment>GetFeature with an integer property name, on a BBOX query, causing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-spatial-atc1</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc27.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc28.1">
      <param name="wfs.GetFeature.post.url"/>
      <param name="wfs.PrimitiveGeoFeature.DefaultSRS"/>
      <assertion>If the @srsName of the supplied literal geometry or gml:Envelope is unspecified, it shall be handled as if it corresponded to the advertised default CRS.</assertion>
      <comment>GetFeature spatial query, with no srsName specified, the default is expected (from the capabilities document).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall use the default srs value from the capabilities document.</comment>
      <link>filter-1.1.0-spatial-atc3</link>
      <link>OGC 04-095, 8.3, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc28.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//sf:PrimitiveGeoFeature/gml:name = 'name-f001')">
                      <ctl:message>FAILURE: Missing feature (gml:name="name-f001").</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//@srsName">
                      <xsl:if test=". != $wfs.PrimitiveGeoFeature.DefaultSRS">
                                                <ctl:message>FAILURE: @srsName="<xsl:value-of select="."/>" does not match expected DefaultSRS (<xsl:value-of select="$wfs.PrimitiveGeoFeature.DefaultSRS"/>)</ctl:message>
                                                <ctl:fail/>
                                          </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX around a feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc29.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX touching a feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc29.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX with no features in it (0,0 0.01,0.01).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall not have any feature members.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc29.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc29.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the BBOX predicate (equivalent to ogc:Intersects with a gml:Envelope argument) expressed by a valid ogc:BBOX element</assertion>
      <comment>GetFeature spatial query for a BBOX around a number of different feature.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the exact number of features in that BBOX requested.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.2, p.10</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc29.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:PrimitiveGeoFeature instance in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count($request1//sf:EntitéGénérique) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:EntitéGénérique instance in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count($request1//sf:AggregateGeoFeature) lt 1">
                    <ctl:message>FAILURE: Expected at least one sf:AggregateGeoFeature instances in response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc33.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>The ogc:GmlObjectId/@gml:id attribute shall be used to identify a GML3-based object representation.</assertion>
      <comment>GetFeature to first get a feature id (gml:id), then another GetFeature filtering on the gml:id.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the feature member expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc1</link>
      <link>OGC 04-095, 11.1, p.15</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc33.1.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id">
              <xsl:value-of select="$request1//sf:PrimitiveGeoFeature[1]/@gml:id"/>
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc33.1.2.body.xml"/>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="id">
                      <xsl:value-of select="$request2//sf:PrimitiveGeoFeature/@gml:id"/>
                    </xsl:variable>
                    <xsl:if test="$id != $gml.id">
                      <ctl:message>FAILURE: Expected gml:id = <xsl:value-of select="$gml.id"/> (received <xsl:value-of select="$id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc34.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>A filter expression may include only one type of identifier element.</assertion>
      <comment>GetFeature with a filter on two different Id predicates (GmlObjectId and FeatureId), causing an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>filter-1.1.0-objectid-atc3</link>
      <link>OGC 04-095, 11.2, p.15</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc34.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.OWS/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on sf:strProperty, expecting at least one match (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="featureCount" select="count($request1//sf:AggregateGeoFeature)" />
                    <xsl:if test="$featureCount != 1">
                      <ctl:message>FAILURE: Expected one sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$request1//sf:AggregateGeoFeature">
                      <xsl:if test="compare(sf:strProperty, 'Ma quande lingues coalesce, li grammatica del resultant.') != 0">
                        <ctl:message>FAILURE: sf:strProperty != "Ma quande lingues coalesce, li grammatica del resultant." (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                   </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on sf:strProperty, expecting at least one match (case insensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:AggregateGeoFeature/sf:strProperty='Ma quande lingues coalesce, li grammatica del resultant.'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for an int-type property of '300' on sd:intProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:PrimitiveGeoFeature/sf:intProperty=300</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a boolean-type property of true ('1') on sf:boolProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//sf:EntitéGénérique/sf:boolProperty) = true()</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a date-type property of '2006-12-12' on sf:dateProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.5.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">xsd:date(//sf:PrimitiveGeoFeature/sf:dateProperty) = xsd:date('2006-12-12Z')</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a date-type property of '2999-12-12' on sf:dateProperty, expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.6.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc35.7">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsEqualTo predicate expressed by a valid ogc:PropertyIsEqualTo element.</assertion>
      <comment>PropertyIsEqualTo filter request, for a string-type property on gml:description for 'description-f004', expecting at least one match (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc35.7.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:EntitéGénérique/gml:description='description-f004'</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a string-type property 'description-f003' on gml:description, expecting at least 3 matches (case sensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc36.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:strProperty='description-f003')</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a string-type property 'deSCRIption-F003' on gml:description, expecting at least 3 matches (case insensitive).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc36.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/gml:description='description-f003')</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for an int-type property of '300' on sf:intProperty, expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc36.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:intProperty=300)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a boolean-type property of false ('0') on sf:boolProperty, expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc36.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">boolean(//sf:EntitéGénérique/sf:boolProperty) = true()</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc36.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsNotEqualTo predicate expressed by a valid ogc:PropertyIsNotEqualTo element.</assertion>
      <comment>PropertyIsNotEqualTo filter request, for a date-type property of '2006-12-12' on sf:dateProperty, expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not contain the feature from the PropertyIsNotEqualTo predicate.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc36.5.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature[sf:dateProperty=xsd:date('2006-12-12Z')])</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a decimal-type property, for a value under '15' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc37.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not((//gml:featureMember | //gml:featureMembers)/sf:PrimitiveGeoFeature/sf:decimalProperty &gt;= 15)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a double-type property, for a value under '2200.11' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc37.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &gt;= 2200.11)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for an integer-type property, for a value under '100' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is 1 (or more).</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc37.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">//sf:intProperty = -900</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc37.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThan predicate expressed by a valid ogc:PropertyIsLessThan element.</assertion>
      <comment>PropertyIsLessThan filter request, for a date-type property, for a value under '2006-10-23' expecting one or more matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value equal to or above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc37.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Empty response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                    <xsl:if test="xsd:date(sf:dateProperty) ge xsd:date('2006-10-23Z')">
                      <ctl:message>FAILURE: sf:dateProperty value is on or after 2006-10-23Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a decimal-type property, for a value over '12.5' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc38.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt;= 12.5)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a double-type property, for a value over '2012.78' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc38.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &lt;= 2012.78)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a date-type property, for a value over '2006-10-22' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value less than or equal to the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc38.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:date(sf:dateProperty) le xsd:date('2006-10-22Z')">
                          <ctl:message>FAILURE: sf:dateProperty value on or before 2006-10-22Z (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc38.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThan predicate expressed by a valid ogc:PropertyIsGreaterThan element.</assertion>
      <comment>PropertyIsGreaterThan filter request, for a datetime-type property, for a value over '2006-06-28T19:08:00+02:00' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc38.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="not($request1//wfs:FeatureCollection)">
                      <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                                        <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                      <xsl:if test="not(xsd:dateTime(sf:dateTimeProperty) gt xsd:dateTime('2006-06-28T19:08:00+02:00'))">
                                        <ctl:message>[FAILURE] Expected sf:dateTimeProperty value after '2006-06-28T19:08:00+02:00' (where feature id = <xsl:value-of select="./@gml:id"/>)</ctl:message>
                                        <ctl:fail />
                                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a decimal-type property, for a value under '5.03' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value greater than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc39.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not((//gml:featureMember | //gml:featureMembers)/sf:PrimitiveGeoFeature/sf:decimalProperty &gt; 5.03)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a double-type property, for a value under '-200.009' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc39.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for an integer-type property, for a value under '180' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result set must not contain any instances of features that are greater than the supplied literal.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc39.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 3</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:intProperty &gt; 180)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc39.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLessThanOrEqualTo predicate expressed by a valid ogc:PropertyIsLessThanOrEqualTo element.</assertion>
      <comment>PropertyIsLessThanOrEqualTo filter request, for a datetime-type property, for a value under '2006-06-28T19:08:00+02:00' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value above the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc39.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:dateTime(sf:dateTimeProperty) gt xsd:dateTime('2006-06-28T19:08:00+02:00')">
                          <ctl:message>FAILURE: sf:dateTimeProperty after 2006-06-28T19:08:00+02:00 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a decimal-type property, for a value over or equal to '12.5' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc40.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt; 12.5)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a double-type property, for a value over or equal to '2012.78' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value less than the literal value given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc40.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">not(//sf:AggregateGeoFeature/sf:doubleProperty &lt; 2012.78)</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a date-type property, for a value over or equal to '2999-10-22' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc40.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc40.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsGreaterThanOrEqualTo predicate expressed by a valid ogc:PropertyIsGreaterThanOrEqualTo element.</assertion>
      <comment>PropertyIsGreaterThanOrEqualTo filter request, for a datetime-type property, for a value over or equal to '2006-06-28T07:06:00+02:00' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result must not contain any features that are less than the literal given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc40.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                        <xsl:if test="xsd:dateTime(sf:dateTimeProperty) lt xsd:dateTime('2006-06-28T07:06:00+02:00')">
                          <ctl:message>FAILURE: sf:dateTimeProperty before 2006-06-28T07:06:00+02:00 (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a decimal-type property, for a value between '10' and '20' expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc41.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 2</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(not(//sf:PrimitiveGeoFeature/sf:decimalProperty &lt; 10) and not(//sf:PrimitiveGeoFeature/sf:decimalProperty &gt; 20))</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a double-type property, for a value between '20.1' and '24509.5' expecting at least one match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc41.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) &gt;= 1</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(not(//sf:AggregateGeoFeature/sf:doubleProperty &lt; 20.1) and not(//sf:AggregateGeoFeature/sf:doubleProperty &gt; 24509.5))</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a date-type property, for a value between '2006-09-01' and '2006-11-01' expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set does not have a value outside the boundary values given in the request.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc41.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                      <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
                      <xsl:if test="$featureCount lt 1">
                        <ctl:message>FAILURE: No sf:PrimitiveGeoFeature instances in response.</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                      <xsl:for-each select="$response//sf:dateProperty">
                        <xsl:if test="(xsd:date(.) lt xsd:date('2006-09-01Z')) or (xsd:date(.) gt xsd:date('2006-11-01Z'))">
                          <ctl:message>FAILURE: sf:dateProperty value is not in interval 2006-09-01Z/2006-11-01Z (gml:id = <xsl:value-of select="../@gml:id"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                      </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc41.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsBetween predicate expressed by a valid ogc:PropertyIsBetween element.</assertion>
      <comment>PropertyIsBetween filter request, for a date-type property, for a value between '2999-09-01' and '2999-11-01' expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc41.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

    <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the wildcard character on sf:strProperty expecting at least 3 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 3; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>
                        <xsl:variable name="response">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc42.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($response/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:if test="count($response//sf:AggregateGeoFeature) lt 1">
                      <ctl:message>FAILURE: Empty response</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$response//sf:AggregateGeoFeature">
                      <xsl:if test="matches(sf:strProperty,'.*Ma quande lingues coalesce.*') != true()">
                        <ctl:message>FAILURE: sf:strProperty value does not match expression "*Ma quande lingues coalesce*" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the single character element on gml:name expecting at least 1 match.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 1; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc42.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                    <xsl:variable name="featureCount" select="count($request1//sf:PrimitiveGeoFeature)" />
                    <xsl:if test="$featureCount lt 1">
                      <ctl:message>FAILURE: Expected at least 1 sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> included)</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <!-- WARNING: multiple gml:name elements are allowed, but only one appears in test data features -->
                    <xsl:for-each select="$request1//sf:PrimitiveGeoFeature">
                      <xsl:if test="matches(gml:name,'name-f01.') != true()">
                        <ctl:message>FAILURE: gml:name does not match expression "name-f01." (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the single character element on gml:name expecting no matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is = 0.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc42.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:variable name="expression">//wfs:FeatureCollection</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                        <xsl:variable name="expression">(count(//gml:featureMember) + count(//gml:featureMembers/*)) = 0</xsl:variable>
                                        <ctl:call-test name="ctl:assert-xpath">
                                                <ctl:with-param name="expr" select="$expression"/>
                                                <ctl:with-param name="doc" select="$request1"/>
                                        </ctl:call-test>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc42.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly evaluate the PropertyIsLike predicate expressed by a valid ogc:PropertyIsLike element.</assertion>
      <comment>PropertyIsLike filter request, for a string-type property using the single character element and wild card character on sf:dateProperty expecting at least 2 matches.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the number of result features is &gt;= 2; (3) the result feature set contains the expected feature instance.</comment>
      <link>filter-</link>
      <link>OGC 04-095, 9.2, p.12</link>
		<code>

			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetFeature.post.url"/>
					</url>
				   <method>post</method>
				   <body>
					   <xi:include href="wfs-1.1.0-Basic-GetFeature-tc42.4.body.xml"/>
					</body>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($response/*)">
			        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
  			    <xsl:otherwise>
                    <xsl:if test="count($response//sf:PrimitiveGeoFeature) lt 1">
                      <ctl:message>FAILURE: Empty response</ctl:message>
                      <ctl:fail/>
                    </xsl:if>
                    <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                      <xsl:if test="matches(sf:dateProperty,'20.*-10-.{2}') != true()">
                        <ctl:message>FAILURE: sf:dateProperty value does not match expression "20*-10-??" (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
				</xsl:otherwise>
			</xsl:choose>
		</code>
	</test>

<test name="wfs:wfs-1.1.0-Basic-GetFeature-tc43.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>Correctly select the objects specified by the list of supplied identifiers. The  identification scheme is service-specific, but valid identifiers must substitute for ogc:_Id.</assertion>
      <comment>GetFeature to first get more than one feature id (gml:id), then another GetFeature filtering on the gml:ids.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have at least the two feature members expected from the request.</comment>
      <link>filter-1.1.0-objectid-atc2</link>
      <link>OGC 04-095, 11.1, p.14</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc43.1.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>FAILURE: Expected valid wfs:FeatureCollection.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>

            <xsl:variable name="gml.id1">
              <xsl:value-of select="$request1//sf:EntitéGénérique[1]/@gml:id" />
            </xsl:variable>
            <xsl:variable name="gml.id2">
              <xsl:value-of select="$request1//sf:EntitéGénérique[2]/@gml:id" />
            </xsl:variable>

                        <xsl:variable name="request2">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc43.1.2.body.xml"/>
                                        </body>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request2/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                                        <xsl:for-each select="$request2//sf:EntitéGénérique">
                      <xsl:variable name="id"><xsl:value-of select="@gml:id"/></xsl:variable>
                      <xsl:if test="empty(index-of(($gml.id1, $gml.id2), $id))">
                        <ctl:message>FAILURE: Unexpected gml:id value (<xsl:value-of select="$id"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>

                </xsl:otherwise>
                </xsl:choose>

                </code>
        </test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the PropertyIsNull constraint.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <xi:include href="wfs-1.1.0-Basic-GetFeature-tc45.1.body.xml"/>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1 />
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="sf:uriProperty and (string-length(sf:uriProperty) gt 0)">
                  <ctl:message>FAILURE: sf:uriProperty value is not null (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is an empty wfs:FeatureCollection.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <xi:include href="wfs-1.1.0-Basic-GetFeature-tc45.2.body.xml"/>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1 />
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Mandatory properties cannot be null. Expected empty response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:PrimitiveGeoFeature">
                <xsl:if test="not(sf:intProperty) or (string-length(sf:intProperty) = 0)">
                  <ctl:message>FAILURE: sf:intProperty cannot be null (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc45.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter expression
      with a PropertyIsNull predicate must include only feature representations
      for which the specified property is either absent or has no value. Mandatory
      properties cannot be null.
      </ctl:assertion>
      <ctl:comment>
      Pass if the response entity is a valid wfs:FeatureCollection that contains
      only feature members satisfying the PropertyIsNull constraint.
      </ctl:comment>
      <ctl:link>OGC 04-095, 9.2, p.13</ctl:link>
          <ctl:code>
        <xsl:variable name="response">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$wfs.GetFeature.post.url"/>
                </ctl:url>
               <ctl:method>POST</ctl:method>
               <ctl:body>
                                   <xi:include href="wfs-1.1.0-Basic-GetFeature-tc45.3.body.xml"/>
               </ctl:body>
               <p:XMLValidatingParser.GMLSF1 />
            </ctl:request>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="not($response/*)">
                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="count($response//sf:AggregateGeoFeature) lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:for-each select="$response//sf:AggregateGeoFeature">
                <xsl:if test="sf:multiCurveProperty">
                  <ctl:message>FAILURE: sf:multiCurveProperty value is not null (missing) (gml:id = <xsl:value-of select="@gml:id"/>)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
        </ctl:test>

        <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc49.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>If the @srsName of the supplied literal geometry or gml:Envelope is supported, then the coordinate values in the response shall correspond to that CRS.</assertion>
      <comment>GetFeature spatial query, with an srsName specified (default), and the response should use the requested SRS.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall use the default srs value requested.</comment>
      <link>filter-1.1.0-spatial-</link>
      <link>OGC 04-095, 8.3, p.11</link>
                <code>
                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                   <method>post</method>
                                   <body>
                                           <xi:include href="wfs-1.1.0-Basic-GetFeature-tc49.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1/*)">
                                <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                            <xsl:otherwise>
                  <xsl:if test="count($request1//sf:PrimitiveGeoFeature) lt 1">
                    <ctl:message>FAILURE: Empty response</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:for-each select="$request1//@srsName">
                    <xsl:if test=". != 'urn:ogc:def:crs:epsg:7.6:4326'">
                                                <ctl:message>FAILURE: @srsName="<xsl:value-of select="."/>" does not match expected value ("urn:ogc:def:crs:epsg:7.6:4326")</ctl:message>
                                                <ctl:fail/>
                                        </xsl:if>
                  </xsl:for-each>
                                </xsl:otherwise>
                        </xsl:choose>
                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.1">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.1.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature" />
                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)" />
                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)" />
                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)" />
                                  <xsl:if test="($f1.int gt $f2.int) or ($f2.int gt $f3.int)">
                                          <ctl:message>[FAILURE] Features are not sorted by sf:intProperty in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.2">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the intProperty in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.2.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature" />
                                  <xsl:variable name="f1.int" select="xsd:integer($features[1]/sf:intProperty)" />
                                  <xsl:variable name="f2.int" select="xsd:integer($features[2]/sf:intProperty)" />
                                  <xsl:variable name="f3.int" select="xsd:integer($features[3]/sf:intProperty)" />
                                  <xsl:if test="($f1.int lt $f2.int) or ($f2.int lt $f3.int)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:intProperty in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.3">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all AggregateGeoFeature sorting by the featureCode in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.3.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:AggregateGeoFeature" />
                                  <xsl:variable name="f1.str" select="$features[1]/sf:featureCode" />
                                  <xsl:variable name="f2.str" select="$features[2]/sf:featureCode" />
                                  <xsl:variable name="f3.str" select="$features[3]/sf:featureCode" />
                                  <xsl:if test="(compare($f1.str,$f2.str) gt 0) or (compare($f2.str,$f3.str) gt 0)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:featureCode in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.4">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all AggregateGeoFeature sorting by the featureCode in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.4.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:AggregateGeoFeature" />
                                  <xsl:variable name="f1.str" select="$features[1]/sf:featureCode" />
                                  <xsl:variable name="f2.str" select="$features[2]/sf:featureCode" />
                                  <xsl:variable name="f3.str" select="$features[3]/sf:featureCode" />
                                  <xsl:if test="(compare($f1.str,$f2.str) lt 0) or (compare($f2.str,$f3.str) lt 0)">
                                          <ctl:message>FAILURE: Features are not sorted by sf:featureCode in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.5">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the dateProperty in ascending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.5.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature" />
                                  <xsl:variable name="f1.date" select="$features[1]/sf:dateProperty" />
                                  <xsl:variable name="f2.date" select="$features[2]/sf:dateProperty" />
                                  <xsl:variable name="f3.date" select="$features[3]/sf:dateProperty" />
                                  <xsl:if test="(xsd:date($f1.date) gt xsd:date($f2.date)) or (xsd:date($f2.date) gt xsd:date($f3.date))">
                                          <ctl:message>FAILURE: Features are not sorted by sf:dateProperty in ascending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

   <test name="wfs:wfs-1.1.0-Basic-GetFeature-tc51.6">
      <param name="wfs.GetFeature.post.url"/>
      <assertion>When the SortBy parameter is used the resulting feature set must be properly sorted according to the sort criteria.</assertion>
      <comment>GetFeature for all PrimitiveGeoFeature sorting by the dateProperty in descending order.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:FeatureCollection document; (3) the response shall have the features sorted by the proper feature property in the described ascending or descending manner.</comment>
      <link>wfs-</link>
      <link>OGC 04-094, 14.7.3.1, p.100</link>
                <code>

                        <xsl:variable name="request1">
                                <request>
                                        <url>
                                                <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                        </url>
                                        <method>post</method>
                                        <body>
                                                <xi:include href="wfs-1.1.0-Basic-GetFeature-tc51.6.body.xml"/>
                                        </body>
                                        <p:XMLValidatingParser.GMLSF1/>
                                </request>
                        </xsl:variable>

                        <xsl:choose>
                                <xsl:when test="not($request1//wfs:FeatureCollection)">
                                <ctl:message>[FAILURE] Expected wfs:FeatureCollection in response.</ctl:message>
                                        <ctl:fail/>
                            </xsl:when>
                                <xsl:otherwise>
                  <xsl:variable name="features" select="$request1//sf:PrimitiveGeoFeature" />
                                  <xsl:variable name="f1.date" select="$features[1]/sf:dateProperty" />
                                  <xsl:variable name="f2.date" select="$features[2]/sf:dateProperty" />
                                  <xsl:variable name="f3.date" select="$features[3]/sf:dateProperty" />
                                  <xsl:if test="(xsd:date($f1.date) lt xsd:date($f2.date)) or (xsd:date($f2.date) lt xsd:date($f3.date))">
                                          <ctl:message>FAILURE: Features are not sorted by sf:dateProperty in descending order.</ctl:message>
                                          <ctl:fail/>
                                  </xsl:if>
                                </xsl:otherwise>
                        </xsl:choose>

                </code>
        </test>

</ctl:package>
