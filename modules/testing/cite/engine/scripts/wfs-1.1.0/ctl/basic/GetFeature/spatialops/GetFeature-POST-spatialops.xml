<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:sf="http://cite.opengeospatial.org/gmlsf"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="wfs:run-GetFeature-POST-spatialops">
      <ctl:param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>Run test group for GetFeature requests (POST) with spatial operators.</ctl:assertion>
      <ctl:code>
        <xsl:variable name="wfs.GetFeature.post.url">
          <xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetFeature']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
        </xsl:variable>

        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Disjoint']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
            <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
          </ctl:call-test>

          <xsl:variable name="wfs.circle.supported">
            <xsl:value-of select="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) gt 0"/>
          </xsl:variable>

          <xsl:if test="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) = 0">
            <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
              <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
            </ctl:call-test>
          </xsl:if>
          <xsl:if test="count($wfs.GetCapabilities.document//ogc:Filter_Capabilities/ogc:Spatial_Capabilities/ogc:GeometryOperands/ogc:GeometryOperand[contains(text(), 'Circle')]) gt 1">
            <ctl:message>Not testing wfs:wfs-1.1.0-Basic-GetFeature-tc200.4 because circles are actually supported.</ctl:message>
          </xsl:if>
        </xsl:if>


        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Intersects']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Within']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Overlaps']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Equals']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Contains']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Touches']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ogc:Spatial_Capabilities/ogc:SpatialOperators/ogc:SpatialOperator[@name='Crosses']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
                <!-- Expect an explicit EPSG value or a regular expression in the capabilities document for each supported SRS, i.e. urn:x-ogc:def:crs:EPSG:\d{4,5} -->
            <xsl:variable name="value0"><![CDATA[urn:x-ogc:def:crs:EPSG:4326]]></xsl:variable>
        <xsl:if test="matches($value0, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS) or matches($value0, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS) or matches($value0, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS) or matches($value0, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS)">
                        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.1">
                                <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                        </ctl:call-test>
                </xsl:if>
            <xsl:variable name="value1"><![CDATA[urn:x-ogc:def:crs:EPSG:32629]]></xsl:variable>
        <xsl:if test="matches($value1, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS) or matches($value1, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS) or matches($value1, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS) or matches($value1, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS)">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.2">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
            <xsl:variable name="value2"><![CDATA[urn:x-ogc:def:crs:EPSG:32631]]></xsl:variable>
        <xsl:if test="matches($value2, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:DefaultSRS) or matches($value2, $wfs.GetCapabilities.document//wfs:FeatureType[contains(wfs:Name, ':PrimitiveGeoFeature')]/wfs:OtherSRS) or matches($value2, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:DefaultSRS) or matches($value2, $wfs.GetCapabilities.document//wfs:FeatureTypeList/wfs:OtherSRS)">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.3">
                        <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                  </ctl:call-test>
        </xsl:if>
        <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetFeature-tc210.1">
                  <ctl:with-param name="wfs.GetFeature.post.url" select="$wfs.GetFeature.post.url"/>
                </ctl:call-test>

      </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Empty response</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name != 'name-f007'">
                <ctl:message>FAILURE: Expected feature having gml:name="name-f007".</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Disjoint spatial predicate must include only features that are disjoint
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc200</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:AggregateGeoFeature/gml:name = 'name-f010'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc200.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that
      includes an unsupported geometry operand must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc200.4.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS />
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response" />
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                    </ctl:call-test>
            </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:PrimitiveGeoFeature/gml:name = 'name-f002'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f002").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="$response//sf:EntitéGénérique/gml:name = 'name-f004'">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc201.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having
      an Intersects spatial predicate must include only features that intersect
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc201</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc201.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc202.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request having a spatial predicate that
      refers to an invalid spatial property must include an exception report.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc202</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc202.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS />
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$response"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
            </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Within spatial predicate must include only features that lie within
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Within spatial predicate must include only features that lie within
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f001')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f001").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc203.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes a filter containing
      a spatial predicate that does not refer to a valid geometry property must
      include an exception report indicating "InvalidParameterValue".
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc203</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc203.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <ctl:call-test name="ctl:SchematronValidatingParser">
                            <ctl:with-param name="doc" select="$response" />
                            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                  </ctl:call-test>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 2">
                <ctl:message>FAILURE: Expected two or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f016')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f016").</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc204.4">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Overlaps spatial predicate must include only features that overlap the
      given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc204</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc204.4.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f005')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f005").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc205.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Equals spatial predicate must include only features that have a geometry
      value exactly equal to the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc205</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc205.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

<ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount != 1">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:EntitéGénérique)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:EntitéGénérique instance in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:EntitéGénérique/gml:name = 'name-f004')">
                <ctl:message>FAILURE: Missing feature (gml:name="name-f004").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc206.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter containing
      the Contains spatial predicate must include only features that contain
      the given geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc206</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc206.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//gml:featureMember) + count($response//gml:featureMembers/*)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty response (<xsl:value-of select="$featureCount"/> features were included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f009')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f009").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc207.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Touches spatial predicate must include only features that are touching
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc207</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc207.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

 <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount gt 0">
                <ctl:message>FAILURE: Expected empty feature collection (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:PrimitiveGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:PrimitiveGeoFeature/gml:name = 'name-f003')">
                <ctl:message>FAILURE: Unexpected feature in response (gml:name="name-f003").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc208.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes an ogc:Filter having a
      Crosses spatial predicate must include only features that are crossing
      with respect to the provided geometry value.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc208</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc208.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:AggregateGeoFeature)" />
              <xsl:if test="$featureCount lt 1">
                <ctl:message>FAILURE: Expected one or more sf:AggregateGeoFeature instances in response (<xsl:value-of select="$featureCount"/> features included)</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:if test="not($response//sf:AggregateGeoFeature/gml:name = 'name-f010')">
                <ctl:message>FAILURE: Expected feature not in response (gml:name="name-f010").</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the default
      EPSG:4326 CRS should return coordinates that exactly match
      the original test data coordinates.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc209.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="not($featureCount = 1)">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included).</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="pos" select="$response//sf:PrimitiveGeoFeature/sf:pointProperty/gml:Point/gml:pos" />
              <xsl:if test="not($pos = '34.94 -10.52')">
                <ctl:message>FAILURE: Expected gml:pos of "34.94 -10.52" (found: <xsl:value-of select="$pos"/>).</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.2">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the EPSG:32629
      CRS should return the correctly translated coordinates.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc209.2.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
              <xsl:variable name="featureCount" select="count($response//sf:PrimitiveGeoFeature)" />
              <xsl:if test="not($featureCount = 1)">
                <ctl:message>FAILURE: Expected one sf:PrimitiveGeoFeature instance in response (<xsl:value-of select="$featureCount"/> features included).</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:variable name="pos" select="$response//sf:PrimitiveGeoFeature/sf:pointProperty/gml:Point/gml:pos" />
              <xsl:variable name="pos.components" select="tokenize($pos, ' ')"/>
              <xsl:if test="not(round($pos.components[1]) = '361191') and not(round($pos.components[2]) = '3867444')">
                <ctl:message>FAILURE: Expected rounded gml:pos of "361191 3867444" (found: <xsl:value-of select="concat($pos.components[1], ' ', $pos.components[2])"/>).</ctl:message>
                <ctl:fail/>
              </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc209.3">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that specifies the EPSG:32621
      CRS, but with an incorrect BBOX that is outside of the UTM zone, should
      return an exception.
      </ctl:assertion>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc209</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc209.3.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.OWS />
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                        <ctl:call-test name="ctl:SchematronValidatingParser">
                                                <ctl:with-param name="doc" select="$response"/>
                                                <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
                                                <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
                                        </ctl:call-test>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetFeature-tc210.1">
      <ctl:param name="wfs.GetFeature.post.url"/>
      <ctl:assertion>
      The response to a GetFeature request that includes geogrpahic properties
      must indicated the srsName within the FeatureCollection.
      </ctl:assertion>
      <ctl:comment>Check for the srsName, in order of precedence, on
      (a) the gml:boundedBy Envelope for the top-level container, (b) the
      gml:boundedBy Envelope of the feature, (c) the GML geometry
      property (i.e. gml:Point, gml:Polygon, etc), or (d) the GML
      geometry child (i.e. gml:pos or gml:posList).</ctl:comment>
      <ctl:link>wfs-1.1.0-Basic-GetFeature-atc210</ctl:link>
      <ctl:code>
                <xsl:variable name="response">
                        <ctl:request>
                                <ctl:url>
                                        <xsl:value-of select="$wfs.GetFeature.post.url"/>
                                </ctl:url>
                                <ctl:method>POST</ctl:method>
                            <ctl:body>
                                        <xi:include href="wfs-1.1.0-Basic-GetFeature-tc210.1.body.xml"/>
                                </ctl:body>
                                <p:XMLValidatingParser.GMLSF1/>
                        </ctl:request>
                </xsl:variable>
                <xsl:choose>
                        <xsl:when test="not($response/*)">
                        <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                                <ctl:fail/>
                    </xsl:when>
                    <xsl:otherwise>
                                <xsl:choose>
                                        <xsl:when test="$response//wfs:FeatureCollection/gml:boundedBy/gml:Envelope/@srsName"/>
                                        <xsl:otherwise>
                                                <xsl:for-each select="$response//*[local-name()='featureMember' or local-name()='featureMembers']/*">
                                                        <xsl:choose>
                                                                <xsl:when test="./gml:boundedBy/gml:Envelope/@srsName or .//gml:Point/@srsName or .//gml:LineString/@srsName or .//gml:Curve/@srsName or .//gml:Polygon/@srsName or .//gml:Surface/@srsName or .//gml:Geometry/@srsName or .//gml:MultiPoint/@srsName or .//gml:MultiCurve/@srsName or .//gml:MultiSurface/@srsName or .//gml:MultiGeometry/@srsName or .//gml:pos/@srsName or .//gml:posList/@srsName"/>
                                                                <xsl:otherwise>
                                                                        <ctl:message>FAILURE: Expected @srsName in the resulting FeatureCollection (on top-level boundedBy, feature-level boundedBy, GML geometry, or GML geometry child), yet found none.</ctl:message>
                                                                        <ctl:fail/>
                                                                </xsl:otherwise>
                                                        </xsl:choose>
                                                </xsl:for-each>
                                        </xsl:otherwise>
                                </xsl:choose>
                        </xsl:otherwise>
                </xsl:choose>
          </ctl:code>
    </ctl:test>

</ctl:package>