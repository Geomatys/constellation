<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wfs="http://www.opengis.net/wfs"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <ctl:test name="wfs:run-GetCapabilities-GET">
      <param name="wfs.GetCapabilities.document"/>
      <ctl:assertion>
      Run test group for GetCapabilities requests using the GET method. Target endpoint is {$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
      </ctl:assertion>
      <ctl:code>

		<xsl:variable name="wfs.GetCapabilities.get.url">
			<xsl:value-of select="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>

		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc1.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc3.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.3">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc5.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc6.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc7.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc8.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.3">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc11.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc12.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.3">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc14.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.2">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.3">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.5">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc17.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>
		<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc18.1">
			<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
		</ctl:call-test>

        <!-- run tests for optional capabilities that are implemented -->
        <xsl:if test="not(string($wfs.GetCapabilities.document//@updateSequence) = '')">
			<ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.4">
				<ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
			</ctl:call-test>
		</xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='sections']">
          <ctl:message>Sections parameter is supported for GetCapabilities requests.</ctl:message>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.1">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
          </ctl:call-test>
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.2">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="$wfs.GetCapabilities.document//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']">
          <ctl:call-test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc22.1">
            <ctl:with-param name="wfs.GetCapabilities.get.url" select="$wfs.GetCapabilities.get.url"/>
            <ctl:with-param name="wfs.GetCapabilities.formats"
              select="$wfs.GetCapabilities.document//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
          </ctl:call-test>
        </xsl:if>
      </ctl:code>
    </ctl:test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc1.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>The GET method request must be supported (using HTTP GET).</assertion>
      <comment>GetCapabilities by GET.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
	  <link>wfs-1.1.0-Basic-GetCapabilities-atc1</link>
      <link>OGC 04-094, 13.1, p.79</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc3.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version number specified in a given request must correspond to a version supported by the service.</assertion>
      <comment>GetCapabilities with version of '1.1.0'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the version number on the response is what was requested.</comment>
      <link>wfs-1.1.0-Basic-atc1</link>
      <link>OGC 04-094, 6.2.3, p.9</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in all uppercase  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
		<code>

		<xsl:choose>
			<xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
				<xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/></xsl:variable>
				<xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
			</xsl:when>
		</xsl:choose>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in mixed case  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
		<code>

		<xsl:choose>
			<xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
				<xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'abcdefghijklmnopqrstuvwxyz','AbCDeFghIJklMnoPQrSTUVwxYZ')"/></xsl:variable>
				<xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
			</xsl:when>
		</xsl:choose>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc4.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Host names in a URI are case-insensitive.</assertion>
      <comment>GetCapabilities with host URI in all lowercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc2</link>
      <link>OGC 04-094, 6.3.1, p.10</link>
      <link>RFC 3986, 3.2.2</link>
		<code>

		<xsl:choose>
			<xsl:when test="boolean(starts-with($wfs.GetCapabilities.get.url,'http://') or starts-with($wfs.GetCapabilities.get.url,'https://'))">
				<xsl:variable name="after_slashes"><xsl:value-of select="substring-after($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="prefix"><xsl:value-of select="substring-before($wfs.GetCapabilities.get.url,'//')"/></xsl:variable>
				<xsl:variable name="stripped_uri"><xsl:value-of select="substring-before($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="postfix"><xsl:value-of select="substring-after($after_slashes,'/')"/></xsl:variable>
				<xsl:variable name="uppercase_uri"><xsl:value-of select="translate($stripped_uri,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/></xsl:variable>
				<xsl:variable name="wfs.GetCapabilities.get.url"><xsl:value-of select="concat($prefix,'//',$uppercase_uri,'/',$postfix)"/></xsl:variable>
			</xsl:when>
		</xsl:choose>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc5.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>The response entity must be valid and have wfs:WFS_Capabilities as the document element.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-GetCapabilities-atc2</link>
      <link>OGC 04-094, 13.1, p.79</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc6.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>If present in a GET request, the query component in a Request-URI must conform to the KVP syntax (Content-Type: application/x-www-form-urlencoded).</assertion>
      <comment>GetCapabilities with the correct KVP syntax and correct content encoding (default of 'application/x-www-form-urlencoded').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc3</link>
      <link>OGC 04-094, 6.3.2, p.10</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc7.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Unrecognized parameters in KVP-encoded query strings shall be ignored.</assertion>
      <comment>GetCapabilities with additional bogus KVP parameters, to be ignored.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>wfs-1.1.0-Basic-atc5</link>
      <link>OGC 04-094, 14.2.1, p.94</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="versionXXX">x.x.x,x.y.z</param>
					<param name="request">GetCapabilities</param>
					<param name="ASDF">asdf:asdf</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc8.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter ordering in KVP-encoded query strings is not significant.</assertion>
      <comment>2 GetCapabilities with the differing KVP ordering.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the results from both requests are the exact same.</comment>
      <link>wfs-1.1.0-Basic-atc4</link>
      <link>OGC 04-094, 14.2.1, p.94</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:variable name="request2">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="request">GetCapabilities</param>
					<param name="version">1.1.0</param>
					<param name="service">WFS</param>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<xsl:if test="$request1 != $request2">
						<ctl:message>FAILURE: The KVP encoding does not handle parameters in different sequences.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid http URL value shall conform to the syntax specified in RFC 2616. http_URL = 'http:' '//' host [ ':' port ] [ abs_path [ '?' query ]]</assertion>
      <comment>GetCapabilities with the proper KVP syntax.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc3</link>
      <link>OGC 05-008c1, 11.1, p.54</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc9.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid http URL value shall conform to the syntax specified in RFC 2616. http_URL = 'http:' '//' host [ ':' port ] [ abs_path [ '?' query ]]</assertion>
      <comment>GetCapabilities with improper KVP syntax (using '#' and ',' instead of '?' or '&amp;').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document</comment>
      <link>ows-1.0.0-common-atc3</link>
      <link>OGC 05-008c1, 11.1, p.54</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="concat($wfs.GetCapabilities.get.url,'#request=GetCapabilities,service=WFS')"/>
					</url>
					<method>get</method>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="SERVICE">WFS</param>
					<param name="VERSION">1.1.0</param>
					<param name="REQUEST">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in mixed case.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="SeRvIcE">WFS</param>
					<param name="vErSiOn">1.1.0</param>
					<param name="RequesT">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc10.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in all lowercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc11.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A response message containing an entity body must contain a Content-Type entity header field that correctly indicates the media type of the message body.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response Content-Type header must be 'application/xml' or 'text/xml' for XML entities.</comment>
      <link>ows-1.0.0-common-atc2</link>
      <link>OGC 05-008c1, 11.7, p.61</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<parsers:HTTPParser/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>

					<xsl:variable name="content-type" select="substring-before(concat($request1/response/headers/header[@name='Content-Type'], ';'), ';')"/>
					<xsl:if test="not($content-type = 'application/xml') and not($content-type = 'text/xml')">
						<ctl:message>FAILURE: Incorrect response encoding.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc12.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>All OGC web services must implement the GetCapabilities request to provide an XML representation of service metadata.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-metadata-atc1</link>
      <link>OGC 05-008c1, 7.1, p.10</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
						<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
						<ctl:call-test name="ctl:assert-xpath">
							<ctl:with-param name="expr" select="$expression"/>
							<ctl:with-param name="doc" select="$request1"/>
						</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with version of '1.1.0' and service of 'WFS'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
				   <method>get</method>
					<param name="request">GetCapabilities</param>
				   	<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
						<xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
						<ctl:call-test name="ctl:assert-xpath">
							<ctl:with-param name="expr" select="$expression"/>
							<ctl:with-param name="doc" select="$request1"/>
						</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with version of '1.1.0' and no service'.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
				   <method>get</method>
					<param name="request">GetCapabilities</param>
					<param name="version">1.1.0</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
						<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
						<ctl:call-test name="ctl:assert-xpath">
							<ctl:with-param name="expr" select="$expression"/>
							<ctl:with-param name="doc" select="$request1"/>
						</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc13.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A KVP-encoded GetCapabilities request shall include the following query parameters: service=WxS request=GetCapabilities, where WxS is a mnemonic label for a service type. See Table 2 for definitions of optional query parameters.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  Version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc2</link>
      <link>OGC 05-008c1, 7.2.2, p.12 (Table 2)</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
				   <method>get</method>
					<param name="request">GetCapabilities</param>
				   	<param name="service">WFS</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
						<xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
						<ctl:call-test name="ctl:assert-xpath">
							<ctl:with-param name="expr" select="$expression"/>
							<ctl:with-param name="doc" select="$request1"/>
						</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc14.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>If AcceptVersion is not specified, the service must respond with highest supported version.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc3</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
							<xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  With AcceptVersion, expecting one of the versions listed ('1.1.0').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return ('1.1.0').</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
					<param name="acceptversions">1.1.0,1.0.0</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
							<xsl:variable name="expression">//wfs:WFS_Capabilities/@version='1.1.0'</xsl:variable>
							<ctl:call-test name="ctl:assert-xpath">
								<ctl:with-param name="expr" select="$expression"/>
								<ctl:with-param name="doc" select="$request1"/>
							</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

		<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc15.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of 'WFS'.  With AcceptVersion, using a bogus version number ('2006-10-25').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
					<param name="acceptversions">2006.10.25</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$request1"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with no service parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the missing parameter.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>

			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($response/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
                  <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                    <ctl:message>
                    FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                    </ctl:message>
                    <ctl:fail/>
                  </xsl:if>
				  <ctl:call-test name="ctl:SchematronValidatingParser">
					<ctl:with-param name="doc" select="$response"/>
					<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
					<ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
				  </ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with a bogus service parameter value ('ADSF').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>

			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">ASDF</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($response/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$response"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.3">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect version parameter ('2006-10-26'), using acceptversions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
					<param name="acceptversions">2006-10-26</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$request1"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.4">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect updatesequence ('9999999999'), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidUpdateSequence' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<param name="updatesequence">9999999999</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//ows:ExceptionReport</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$request1"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">InvalidUpdateSequencePhase</ctl:with-param>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc16.5">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code, for both the request and service.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>
			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="concat($wfs.GetCapabilities.get.url, '?request~GetCapabilities!service~WFS!version~1.1.0')"/>
					</url>
					<method>get</method>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$request1"/>
						<ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
						<ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
					</ctl:call-test>
                    <xsl:if test="not(lower-case($request1//ows:Exception/@locator) = 'request') and not(lower-case($request1//ows:Exception/@locator) = 'service')">
                      <ctl:message>
                      FAILURE: ows:Exception/@locator is absent or does not identify the invalid 'request' and 'service' attributes.
                      </ctl:message>
                      <ctl:fail/>
                    </xsl:if>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc17.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A valid service metadata document must conform to a content model based on the ows:CapabilitiesBaseType definition. Additional service-specific elements may be defined as needed.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid (containing all required elements); (2) the root document is an ows:ExceptionReport document.</comment>
      <link>ows-1.0.0-metadata-atc6</link>
      <link>OGC 05-008c1, 7.4.8, p.29</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>get</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="expression">//wfs:WFS_Capabilities</xsl:variable>
					<ctl:call-test name="ctl:assert-xpath">
						<ctl:with-param name="expr" select="$expression"/>
						<ctl:with-param name="doc" select="$request1"/>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

	<test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc18.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>A complete service metadata document must include mandatory parameters and constraints in the OperationsMetadata section.</assertion>
      <comment>Pass if the response is schema valid and includes a complete wfs:WFS_Capabilities document.</comment>
      <link>ows-1.0.0-metadata-atc7</link>
      <link>OGC 05-008c1, 7.4.6, p.26</link>
		<code>

			<xsl:variable name="request1">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WFS</param>
					<param name="version">1.1.0</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<ctl:call-test name="ctl:SchematronValidatingParser">
						<ctl:with-param name="doc" select="$request1"/>
						<ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
						<ctl:with-param name="phase">RequiredBasicElementsPhase</ctl:with-param>
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>

		</code>
	</test>

    <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.1">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter
      with NO VALUE provided shall include an abbreviated capabilities document
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional
      top-level elements.</comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections"></param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/wfs/1.1.0/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">AbbreviatedContentPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>

    <test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc19.2">
      <param name="wfs.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter
      listing optional elements shall include only the requested elements in the
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional
      elements.
      </comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">WFS</param>
					<param name="request">GetCapabilities</param>
                    <param name="version">1.1.0</param>
                    <param name="sections">OperationsMetadata,FeatureTypeList</param>
					<p:XMLValidatingParser.GMLSF1/>
				</request>
			</xsl:variable>

            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="not($response//wfs:FeatureTypeList)">
                    <ctl:message>FAILURE: wfs:FeatureTypeList element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceIdentification">
                    <ctl:message>FAILURE: ows:ServiceIdentification element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>

    <ctl:test name="wfs:wfs-1.1.0-Basic-GetCapabilities-tc22.1">
      <ctl:param name="wfs.GetCapabilities.get.url"/>
      <ctl:param name="wfs.GetCapabilities.formats"/>
      <ctl:assertion>
      The response to a GetCapabilities request containing an AcceptVersions
      parameter specifying a supported format must include a response entity
      that corresponds to the requested media type.
      </ctl:assertion>
      <ctl:link>OGC 05-008, 7.3.5</ctl:link>
		<ctl:code>
          <xsl:for-each select="$wfs.GetCapabilities.formats//ows:Value">
            <xsl:variable name="format" select="./text()" />
            <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$wfs.GetCapabilities.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WFS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
					<parsers:HTTPParser />
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
			<xsl:if test="not(starts-with($content-type, $format))">
				<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
				<ctl:fail/>
			</xsl:if>
          </xsl:for-each>
		</ctl:code>
	</ctl:test>

</ctl:package>
