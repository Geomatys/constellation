<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
    xmlns="http://www.occamlab.com/ctl"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:ctl="http://www.occamlab.com/ctl"
    xmlns:parsers="http://www.occamlab.com/te/parsers"
    xmlns:p="http://teamengine.sourceforge.net/parsers"
    xmlns:saxon="http://saxon.sf.net/"
    xmlns:ows="http://www.opengis.net/ows/1.1"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:sos="http://www.opengis.net/sos/1.0"	
    xmlns:owsTests="https://www.cite.opengeospatial.org/ows-1.0/tests"
    xmlns:owsFunctions="https://www.cite.opengeospatial.org/ows-1.0/functions">
 
    <!--The main test that should be called by your ETS in order to execute the OWS Common tests.-->
    <ctl:test name="owsTests:ows-main">
        <param name="serviceURL">The URL of the service being tested</param>
        <param name="serviceType">The OGC identifier for the type of service being tested (i.e. SPS)</param>
        <param name="serviceVersion">The version of the service being tested</param>
        <param name="capabilitiesRootElementName">The name of the root element of a Capabilities document returned by this service (i.e. Capabilities, WFS_Capabilities, etc.)</param>
        <param name="capabilitiesResponseSchemaLocation">The location of the Capabilities schema for the service being tested</param>
        <param name="capabilitiesResponseSchemaType">The type of resource specified in the capabilitiesResponseSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</param>
        <param name="capabilitiesResponseContentType">The expected HTTP header content type of the GetCapabilities response (i.e. text/xml)</param>
        <param name="exceptionReportSchemaLocation">The location of the ExceptionReport schema for the version of OWS Common being tested</param>
        <param name="exceptionReportSchemaType">The type of resource specified in the exceptionReportSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</param>
        <param name="updatesequenceHigh">A value that is lexically higher than the current updateSequence value</param>
        <param name="updatesequenceLow">A value that is lexically lower than the current updateSequence value</param>
        <ctl:assertion>
            Run test group for GetCapabilities requests using the GET method. Target endpoint is {$serviceURL//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href}.
        </ctl:assertion>
        <ctl:code>
        <!--The GetCapabilities operation is implemented-->
            <ctl:message select="concat('ServiceURL: ',$serviceURL)"/>
            <ctl:message>**********************************************************************</ctl:message>
            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities.1">
                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                <ctl:with-param name="serviceType" select="$serviceType" />
                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                <ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                <ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
                <ctl:with-param name="capabilitiesResponseContentType" select="$capabilitiesResponseContentType" />
                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                <ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
                <ctl:with-param name="updatesequenceHigh" select="$updatesequenceHigh" />
                <ctl:with-param name="updatesequenceLow" select="$updatesequenceLow" />
            </ctl:call-test>
        </ctl:code>
    </ctl:test>
    
    <!--GetCapabilities request-->
    <test name="owsTests:ows-OWS.GetCapabilities.1">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="capabilitiesResponseSchemaLocation" />
        <param name="capabilitiesResponseSchemaType" />
        <param name="capabilitiesResponseContentType" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <param name="capabilitiesRootElementName" />
        <param name="updatesequenceHigh" />
        <param name="updatesequenceLow" />
        <assertion>The GET method request must be supported (using HTTP GET).</assertion>
        <comment>GetCapabilities by GET.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</comment>
        <link>OWS.GetCapabilities</link>
        <link>OGC 05-008: cl. 7.1, p. 10, cl. 7.2.2; cl. 7.2.3</link>
        <code>
            <ctl:message>GetCapabilities by GET.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:message>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <parsers:XMLValidatingParser>						
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$capabilitiesResponseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$capabilitiesResponseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>

            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:choose>
                        <xsl:when test="not($request1Root=$capabilitiesRootElementName)">
                            <ctl:message>The root element from the response to a GetCapabilities request "
                                <xsl:value-of select="$request1Root" />" does not match the expected root element of "
                                <xsl:value-of select="$capabilitiesRootElementName" />"
                            </ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="capabilitiesDocument">
                                <xsl:copy-of select="$request1" />
                            </xsl:variable>
                            <!--Content-type-->
							
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.ContentType.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
                                <ctl:with-param name="expectedContentType" select="$capabilitiesResponseContentType" />
                            </ctl:call-test>
                             <!--Case insensitive KVP names-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
                            </ctl:call-test>
                            <!--Exceptions-->
                            <!--Missing required request parameter-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                            </ctl:call-test>
                            <!--Invalid request parameter value-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                            </ctl:call-test>
                            <!--Version negotiation failed-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.3">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                            </ctl:call-test>
                            <!--Invalid update sequence-->
                            <xsl:if test="not(string($capabilitiesDocument//@updateSequence)='') and $updatesequenceHigh!=''">
                                <ctl:message>**********************************************************************</ctl:message>
                                <ctl:message select="''"/>
                                <ctl:message>updateSequence is supported for GetCapabilities requests.  Running updateSequence exception tests...</ctl:message>
                                <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.4">
                                    <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                    <ctl:with-param name="serviceType" select="$serviceType" />
                                    <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                    <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                    <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                                    <ctl:with-param name="updatesequenceHigh" select="$updatesequenceHigh"/>
                                </ctl:call-test>
                            </xsl:if>		
                            <!--An error occurs that prevents successful request processing-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
                            </ctl:call-test>
                            <!--AcceptVersions tests-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
                            </ctl:call-test>
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.2">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="acceptVersions" select="string('1.0.0')"/>
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation"/>
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType"/>
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
                            </ctl:call-test>
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message select="''"/>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.3">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation"/>
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType"/>
                            </ctl:call-test>
                            <!--valid update sequence-->
                            <xsl:if test="not(string($capabilitiesDocument//@updateSequence)='') and $updatesequenceLow!=''">
                                <ctl:message>**********************************************************************</ctl:message>
                                <ctl:message select="''"/>
                                <ctl:message>updateSequence is supported for GetCapabilities requests.  Running updateSequence tests...</ctl:message>
                                <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1">
                                    <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                    <ctl:with-param name="serviceType" select="$serviceType" />
                                    <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                    <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation"/>
                                    <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType"/>
                                    <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
                                    <ctl:with-param name="updatesequenceLow" select="$updatesequenceLow"/>
                                </ctl:call-test>
                                <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.2">
                                    <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                    <ctl:with-param name="serviceType" select="$serviceType" />
                                    <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                    <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation"/>
                                    <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType"/>
                                    <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/> 
                                    <ctl:with-param name="updatesequenceCurrent" select="string($capabilitiesDocument//@updateSequence)"/>
                                </ctl:call-test>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
            
        </code>
    </test>
    
    <!--Case Insensitive KVP Names-->
    <test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="responseSchemaLocation" />
        <param name="responseSchemaType" />
        <param name="rootElementName" />
        <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
        <comment>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</comment>
        <link>ows-1.0.0-common-atc1</link>
        <link>OGC 05-008c1, 11.5.2, p.56</link>
        <code>		
            <ctl:message>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</ctl:message>
            <!--Request with all caps parameter keys-->
            <ctl:message>Executing a GetCapabilities request with upper-case parameter names...</ctl:message>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="SERVICE">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="VERSION">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="REQUEST">GetCapabilities</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>
			
            <!--Request with mixed case parameter keys-->
            <ctl:message>Executing a GetCapabilities request with mixed-case parameter names...</ctl:message>
            <xsl:variable name="request2">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="SeRvIcE">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="vErSiOn">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="RequesT">GetCapabilities</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>
            
            <!--Request with lower case parameter keys-->
            <ctl:message>Executing a GetCapabilities request with lower-case parameter names...</ctl:message>
            <xsl:variable name="request3">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>
            
            <xsl:choose>
                <xsl:when test="not($request1/*) or not($request2/*) or not($request3/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity in one or more of the preceding GetCapabilities requests.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="request2Root" select="local-name-from-QName(node-name($request2/*[1]))" />
                    <xsl:variable name="request3Root" select="local-name-from-QName(node-name($request3/*[1]))" />
                    <xsl:if test="not($request1Root=$rootElementName) or not($request2Root=$rootElementName) or not($request3Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element(s) from the responses to GetCapabilities requests with mixed-case parameters do not match the expected root element of "
                            <xsl:value-of select="$rootElementName" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>			
            
        </code>
    </test>

    <test name="owsTests:ows-OWS.ContentType.1">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="rootElementName" />
        <param name="expectedContentType" />
        <assertion>A response message containing an entity body must contain a Content-Type entity header field that correctly indicates the media type of the message body.</assertion>
        <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document matches the root element name; (3) the response Content-Type header must be $expectedContentType for XML entities.</comment>
        <link>ows-1.0.0-common-atc2</link>
        <link>OGC 05-008c1, 11.7, p.61</link>
        <code>		
            <ctl:message select="concat('Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document matches the root element name; (3) the response Content-Type header must be &quot;', $expectedContentType, '&quot; for XML entities.')"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <parsers:HTTPParser/>
                </request>
            </xsl:variable>

            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/response/content/*[1]))" />
                    <xsl:choose>
                        <xsl:when test="not($request1Root=$rootElementName)">
                            <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request "
                                <xsl:value-of select="$request1Root" />" does not match the expected root element of "
                                <xsl:value-of select="$rootElementName" />"
                            </ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="content-type" select="$request1/response/headers/header[@name='Content-Type']"/>
                            <xsl:variable name="isValidMIMEType">
                                <ctl:call-function name="owsFunctions:isValidMIMETypeFormat">
                                    <ctl:with-param name="responseFormat" select="$content-type" />
                                </ctl:call-function>
                            </xsl:variable>
                            <xsl:if test="not(starts-with($content-type,$expectedContentType)) and not(xsd:boolean($isValidMIMEType))">
                                <ctl:message>FAILURE: Incorrect response encoding.  "
                                    <xsl:value-of select="$expectedContentType" />" was expected, but "
                                    <xsl:value-of select="$content-type" />" was returned instead.
                                </ctl:message>
                                <ctl:fail/>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>			
				
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.1">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="responseSchemaLocation" />
        <param name="responseSchemaType" />
        <param name="rootElementName" />
        <assertion>If AcceptVersion is not specified, the service must respond with highest supported version.</assertion>
        <comment>GetCapabilities with no version and service of $serviceType.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
        <link>ows-1.0.0-metadata-atc3</link>
        <link>OGC 05-008c1, 7.3.2, p.16</link>
        <code>
            <ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested')"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="request">GetCapabilities</param>				   
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>			

            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "
                            <xsl:value-of select="$rootElementName" />"
                        </ctl:message>
                        <ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "
                            <xsl:value-of select="$version" />" does not match the expected version of "
                            <xsl:value-of select="$serviceVersion" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>		
				
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.2">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="acceptVersions" />
        <param name="responseSchemaLocation" />
        <param name="responseSchemaType" />
        <param name="rootElementName" />
        <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
        <comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, expecting one of the versions listed $acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return ('1.1.0').</comment>
        <link>ows-1.0.0-metadata-atc4</link>
        <link>OGC 05-008c1, 7.3.2, p.16</link>
        <code>
            <ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  With AcceptVersion, expecting one of the versions listed $acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return (''1.1.0'').')"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="request">GetCapabilities</param>				   
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="acceptversions">
                        <xsl:value-of select="$acceptVersions" />
                    </param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>	

            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "
                            <xsl:value-of select="$rootElementName" />"
                        </ctl:message>
                        <ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "
                            <xsl:value-of select="$version" />" does not match the expected version of "
                            <xsl:value-of select="$serviceVersion" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>		
			
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-AcceptVersions.3">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <assertion>Version negotiation using AcceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
        <comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, using a bogus version number ('2000-01-01').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
        <link>ows-1.0.0-metadata-atc4</link>
        <link>OGC 05-008c1, 7.3.2, p.16</link>
        <code>
            <ctl:message select="concat('GetCapabilities with no version and service of &quot;', $serviceType, '&quot;.  With AcceptVersion, using a bogus version number (2000-01-01).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;VersionNegotiationFailed&quot; exception code.')"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="request">GetCapabilities</param>				   
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="acceptversions">2000-01-01</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>							
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>	
				
            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "VersionNegotiationFailed".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
                        <ctl:fail/>
                    </xsl:if>					
                </xsl:otherwise>
            </xsl:choose>						
				
        </code>
    </test>
    
    <test name="owsTests:ows-OWS.GetCapabilities-Exceptions.1">
        <param name="serviceURL"/>
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
        <comment>GetCapabilities with no service parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the missing parameter.</comment>
        <link>ows-1.0.0-metadata-atc5</link>
        <link>OGC 05-008c1, 7.4.1, p.19</link>
        <code>
            <ctl:message select="'GetCapabilities with no service parameter.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;MissingParameterValue&quot; exception code; (4) theExceptionReport @locator value shall be that of the missing parameter.'"/>
            <ctl:message select="concat('Version parameter: ', $serviceVersion)"/>
            <xsl:variable name="response">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>		

            <xsl:choose>
                <xsl:when test="not($response/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$response" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('service')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "MissingParameterValue" and a locator value of "service".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($response), '&quot;')"/>
                        <ctl:message select="concat('Returned locator was: &quot;', owsFunctions:exceptionCodeLocator($response), '&quot;')"/>						
                        <ctl:fail/>
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>		
				
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2">
        <param name="serviceURL"/>
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
        <comment>GetCapabilities with a bogus service parameter value ('ADSF').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</comment>
        <link>ows-1.0.0-metadata-atc5</link>
        <link>OGC 05-008c1, 7.4.1, p.19</link>
        <code>
            <ctl:message>GetCapabilities with a bogus service parameter value (ADSF).  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</ctl:message>
            <ctl:message select="concat('Service parameter: ', 'ASDF')"/>
            <ctl:message select="concat('Version parameter: ', $serviceVersion)"/>
            <xsl:variable name="response">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">ASDF</param>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>		
<!--<ctl:message select="concat('*******', $response)"/>-->			

            <xsl:choose>
                <xsl:when test="not($response/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$response" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('service')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidParameterValue" and a locator value of "service".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($response), '&quot;')"/>
                        <ctl:message select="concat('Returned locator was: &quot;', owsFunctions:exceptionCodeLocator($response), '&quot;')"/>						

                        <ctl:fail/>
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-Exceptions.3">
        <param name="serviceURL"/>
        <param name="serviceType"/>
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
        <comment>GetCapabilities with an incorrect version parameter ('2000-01-01'), using acceptversions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
        <link>ows-1.0.0-metadata-atc5</link>
        <link>OGC 05-008c1, 7.4.1, p.19</link>
        <code>
            <ctl:message select="concat('Service parameter: ', $serviceType)"/>
            <ctl:message select="concat('Version parameter: ', $serviceVersion)"/>
            <ctl:message select="concat('AcceptVersions parameter: ', '2000-01-01')"/>
			
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <param name="acceptversions">2000-01-01</param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>				
<!--<ctl:message select="concat('*******', $request1)"/>-->
            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "VersionNegotiationFailed".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
                        <ctl:fail/>
                    </xsl:if>			
                </xsl:otherwise>
            </xsl:choose>		
				
        </code>
    </test>	
	
    <test name="owsTests:ows-OWS.GetCapabilities-Exceptions.4">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <param name="updatesequenceHigh" />
        <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
        <comment>GetCapabilities with an incorrect updatesequence ('9999999999999'), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidUpdateSequence' exception code.</comment>
        <link>ows-1.0.0-metadata-atc5</link>
        <link>OGC 05-008c1, 7.4.1, p.19</link>
        <code>
            <ctl:message>GetCapabilities with an incorrect updatesequence (9999999999999), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;InvalidUpdateSequence&quot; exception code.</ctl:message>
            <ctl:message select="concat('Service parameter: ', $serviceType)"/>
            <ctl:message select="concat('Version parameter: ', $serviceVersion)"/>
            <ctl:message select="concat('UpdateSequence parameter: ', $updatesequenceHigh)"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="version">
                        <xsl:value-of select="$serviceVersion" />
                    </param>
                    <param name="request">GetCapabilities</param>
                    <param name="updatesequence">
                        <xsl:value-of select="$updatesequenceHigh" />
                    </param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>			
<!--<ctl:message select="concat('*******', $request1)"/>-->
            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidUpdateSequence')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidUpdateSequence".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
                        <ctl:fail/>
                    </xsl:if>			
                </xsl:otherwise>
            </xsl:choose>		
				
        </code>
    </test>
	
    <test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5">
        <param name="serviceURL"/>
        <param name="serviceType" />
        <param name="serviceVersion" />
        <param name="exceptionReportSchemaLocation" />
        <param name="exceptionReportSchemaType" />
        <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
        <comment>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code, for both the request and service.</comment>
        <link>ows-1.0.0-metadata-atc5</link>
        <link>OGC 05-008c1, 7.4.1, p.19</link>
        <code>
            <ctl:message>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the &quot;MissingParameterValue&quot; exception code, for both the request and service.</ctl:message>
            <xsl:variable name="invalidQueryString" select="concat($serviceURL,'?request~GetCapabilities!service~!',$serviceType,'version~',$serviceVersion)"/>
            <ctl:message select="concat('Query String: ', $invalidQueryString)"/>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$invalidQueryString"/>
                    </url>
                    <method>get</method>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$exceptionReportSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$exceptionReportSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>
<!--<ctl:message select="concat('*******', $request1)"/>-->
            <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="isValid1">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('service')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:variable name="isValid2">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('request')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:if test="not(xsd:boolean($isValid1) or xsd:boolean($isValid2))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "MissingParameterValue" and a locator value of "service" or "request".</ctl:message>
                        <ctl:message select="concat('Returned exception code was: &quot;', owsFunctions:exceptionCode($request1), '&quot;')"/>
                        <ctl:message select="concat('Returned locator was: &quot;', owsFunctions:exceptionCodeLocator($request1), '&quot;')"/>						
                        <ctl:fail/>
                    </xsl:if>							
                </xsl:otherwise>
            </xsl:choose>				
				
        </code>
    </test>
    
    <test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1">
      <param name="serviceURL"/>
      <param name="serviceType" />
      <param name="serviceVersion" />
      <param name="responseSchemaLocation" />
      <param name="responseSchemaType" />
      <param name="rootElementName" />
      <param name="updatesequenceLow" />
      <assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value lower than the current update sequence value, then the server returns capabilities XML.</assertion>
      <comment>Table 3, row 4</comment>
      <comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></comment>
      <link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</link>
      <code>
         <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="request">GetCapabilities</param>				   
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="updatesequence">
                        <xsl:value-of select="$updatesequenceLow" />
                    </param>
                    <parsers:XMLValidatingParser>
                        <parsers:schemas>
                            <parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
                            <parsers:schema>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$responseSchemaType" />
                                </xsl:attribute>
                                <xsl:value-of select="$responseSchemaLocation" />
                            </parsers:schema>
                        </parsers:schemas>
                    </parsers:XMLValidatingParser>
                </request>
            </xsl:variable>	
            
         <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "
                            <xsl:value-of select="$rootElementName" />"
                        </ctl:message>
                        <ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "
                            <xsl:value-of select="$version" />" does not match the expected version of "
                            <xsl:value-of select="$serviceVersion" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>	
      </code>
   </test>
   
    <test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.2">
      <param name="serviceURL"/>
      <param name="serviceType" />
      <param name="serviceVersion" />
      <param name="responseSchemaLocation" />
      <param name="responseSchemaType" />
      <param name="rootElementName" />
      <param name="updatesequenceCurrent" />
      <assertion>When a GetCapabilities request is made with an UPDATESEQUENCE parameter set to a value equal than the current update sequence value, then the server returns capabilities XML with only "version" and "update sequence parameter".</assertion>
      <comment>Table 3, row 4</comment>
      <comment><![CDATA[Check for valid  XML where /WCS_Capabilities exists]]></comment>
      <link title="OGC 03-065r6: cl. 7.2.1">http://cite.opengeospatial.org/OGCTestData/wcs/1.0.0/specs/03-065r6.html#7.2.1_Key-value_pair_encoding</link>
      <code>
            <xsl:variable name="request1">
                <request>
                    <url>
                        <xsl:value-of select="$serviceURL"/>
                    </url>
                    <method>get</method>
                    <param name="request">GetCapabilities</param>				   
                    <param name="service">
                        <xsl:value-of select="$serviceType" />
                    </param>
                    <param name="updatesequence">
                        <xsl:value-of select="$updatesequenceCurrent" />
                    </param>
                </request>
            </xsl:variable>	
            
         <xsl:choose>
                <xsl:when test="not($request1/*)">
                    <ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
                    <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:variable name="updateSequence">
                        <xsl:value-of select="$request1/*[1]/@updateSequence" />
                    </xsl:variable>
                    <xsl:variable name="nbChild">
                        <xsl:value-of select="count($request1/*[1]/*)" />
                    </xsl:variable>

                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request does not match the expected root element of "
                            <xsl:value-of select="$rootElementName" />"
                        </ctl:message>
                        <ctl:message select="concat('Root element was: &quot;', $request1Root, '&quot;')"/>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "
                            <xsl:value-of select="$version" />" does not match the expected version of "
                            <xsl:value-of select="$serviceVersion" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                     <xsl:if test="not($updateSequence=$updatesequenceCurrent)">
                        <ctl:message>FAILURE:  The returned value in the updatesequence attribute "
                            <xsl:value-of select="$updateSequence" />" does not match the expected updatesequence of "
                            <xsl:value-of select="$updatesequenceCurrent" />"
                        </ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:if test="$nbChild!=0">
                        <ctl:message>FAILURE:  The capabilities document must have no children</ctl:message>
                        <ctl:fail />
                    </xsl:if>
               </xsl:otherwise>
            </xsl:choose>	
				
      </code>
   </test>
   
    <!--=========-->
    <!-- PARSERS -->
    <!--=========-->
    
    <ctl:test name="ctl:SchematronValidatingParser">
        <ctl:param name="doc"/>
        <ctl:param name="schema"/>
        <ctl:param name="phase"/>
        <ctl:assertion>
            Validate against Schematron schema {$schema} (phase: {$phase}).
        </ctl:assertion>
        <ctl:code>
            <xsl:variable name="isValid">
                <ctl:call-function name="ctl:CallSchematronValidatingParser">
                    <ctl:with-param name="doc">
                        <xsl:copy-of select="$doc"/>
                    </ctl:with-param>
                    <ctl:with-param name="schema" select="string($schema)"/>
                    <ctl:with-param name="phase" select="string($phase)"/>
                </ctl:call-function>
            </xsl:variable>
            <xsl:if test="$isValid='false'">
                <ctl:fail/>
            </xsl:if>	
        </ctl:code>
    </ctl:test>
    
    <ctl:function name="ctl:CallSchematronValidatingParser">
        <ctl:param name="doc"/>
        <ctl:param name="schema"/>
        <ctl:param name="phase"/>
        <ctl:description>Invokes the Schematon validator.</ctl:description>
        <ctl:java class="com.occamlab.te.parsers.SchematronValidatingParser" 
                          method="checkSchematronRules" 
                          initialized="true"/>
    </ctl:function>

    <!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="owsFunctions:checkExceptionReport">
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>

            <xsl:variable name="exceptionElement" select="owsFunctions:exceptionElement($exceptionReport)" />
            <xsl:variable name="exceptionCodeValue" select="owsFunctions:exceptionCode($exceptionReport)" />
            <xsl:variable name="locatorValue" select="owsFunctions:exceptionCodeLocator($exceptionReport)" />		

            <xsl:choose>
                <xsl:when test="$locatorToCheck='*'">
                    <xsl:value-of select="($exceptionCodeToCheck=string($exceptionCodeValue))" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="($exceptionCodeToCheck=string($exceptionCodeValue)) and (contains(lower-case(string($locatorToCheck)), lower-case($locatorValue)))" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>	

    <ctl:function name="owsFunctions:testExceptionFunctions">
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>

            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />

            <xsl:value-of select="concat($exceptionCodeValue, $locatorValue)"/>
        </ctl:code>
    </ctl:function>	
    
    <ctl:function name="owsFunctions:exceptionElement">
        <ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
        <ctl:code>
            <xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception" />
        </ctl:code>
    </ctl:function>
	
    <ctl:function name="owsFunctions:exceptionCode">
        <ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="owsFunctions:exceptionElement($exceptionResponse)"/>
            <xsl:value-of select="$exceptionElement/@exceptionCode" />
        </ctl:code>
    </ctl:function>

    <ctl:function name="owsFunctions:exceptionCodeLocator">
        <ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="owsFunctions:exceptionElement($exceptionResponse)"/>
            <xsl:value-of select="$exceptionElement/@locator" />
        </ctl:code>
    </ctl:function>
	
    <ctl:function name="owsFunctions:isValidMIMETypeFormat">
        <ctl:param name="responseFormat">The respsonseFormat to validate</ctl:param>
        <ctl:return>True/False depending on whether the input is a valid MIME type based on ows:owsCommon.xsd</ctl:return>
        <ctl:description>Determines if a definition URN is valid</ctl:description>
        <ctl:code>		
            <xsl:value-of select="(matches($responseFormat,'^(application|audio|image|text|video|message|multipart|model)/.+(;\s*.+=.+)*','i'))"/>
        </ctl:code>
    </ctl:function>	
</ctl:package>