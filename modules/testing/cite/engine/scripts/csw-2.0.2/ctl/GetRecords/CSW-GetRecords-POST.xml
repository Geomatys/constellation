<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns="http://www.occamlab.com/ctl" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:ctl="http://www.occamlab.com/ctl" 
  xmlns:parsers="http://www.occamlab.com/te/parsers" 
  xmlns:p="http://teamengine.sourceforge.net/parsers" 
  xmlns:saxon="http://saxon.sf.net/" 
  xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  xmlns:gml="http://www.opengis.net/gml" 
  xmlns:ogc="http://www.opengis.net/ogc" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:dct="http://purl.org/dc/terms/"   
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <ctl:test name="csw:GetRecords-POST">
    <param name="csw.capabilities.doc"/>
    <ctl:assertion>
    A conforming implementation must satisfy all assertions for GetRecords XML requests using the POST method.
    </ctl:assertion>
    <ctl:code>
      <xsl:variable name="csw.GetRecords.post.url">
        <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
	  </xsl:variable>
      <ctl:message>Target endpoint is <xsl:value-of select="$csw.GetRecords.post.url"/></ctl:message>
        
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc1.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>  
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc2.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>  
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc2.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc3.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc4.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc4.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc5.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc5.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc6.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc6.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc7.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc8.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc8.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc9.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc10.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc11.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc11.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc12.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc13.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc14.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc14.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc15.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc16.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc16.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc17.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc17.2">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc18.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc19.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc20.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc21.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc22.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc23.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc24.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc25.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetRecords-tc26.1">
    <ctl:with-param name="csw.GetRecords.post.url" select="$csw.GetRecords.post.url"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="csw:csw-2.0.2-GetRecords-tc1.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      A GetRecords request that omits all optional elements must produce a response containing only a summary of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element is empty.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc2.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "summary" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:SummaryRecord child elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:SummaryRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:SummaryRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc2.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies a "brief" view must 
      include the corresponding record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:BriefRecord child elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>brief</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:BriefRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:BriefRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc3.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view must 
      include the corresponding csw:Record representations not exeeding the value 
      of the default maxRecords attribute (10).
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:Record child elements, each containing only the requested elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dc:type</csw:ElementName>
    <csw:ElementName>dc:date</csw:ElementName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:Record/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('identifier', 'type', 'date'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected record property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc4.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies sorting criteria
      must include the corresponding record representations in the correct 
      sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:BriefRecord child elements; (3) the records are sorted by dc:identifier 
      in ascending order.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <ogc:SortBy xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:SortProperty>
          <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:identifier</ogc:PropertyName>
          <ogc:SortOrder>ASC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response/csw:GetRecordsResponse/csw:SearchResults/csw:BriefRecord) != 10">
                  <ctl:message>[FAILURE] 10 csw:BriefRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="r1.id" select="$response//csw:SearchResults/*[1]/dc:identifier"/> 
                <xsl:variable name="r2.id" select="$response//csw:SearchResults/*[2]/dc:identifier"/>
                <xsl:variable name="r3.id" select="$response//csw:SearchResults/*[3]/dc:identifier"/>
                <xsl:if test="(compare($r1.id,$r2.id) ne -1) or (compare($r2.id,$r3.id) ne -1)">
                  <ctl:message>[FAILURE] Search results are not sorted correctly by dc:identifier in ascending order.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc4.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an ad hoc view and 
      sorting criteria must include the corresponding csw:Record representations 
      in the correct sort order.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 10 
      csw:Record child elements, each containing only the requested elements; 
      (3) the records are sorted by dc:date in descending order.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <ogc:SortBy xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:SortProperty>
          <ogc:PropertyName>dc:date</ogc:PropertyName>
          <ogc:SortOrder>DESC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:Record/*">
                  <xsl:variable name="local-name" select="local-name(.)"/>
                  <xsl:if test="empty(index-of(('identifier', 'type', 'date'), $local-name))">
                    <ctl:message>[FAILURE] Unexpected record property: <xsl:value-of select="$local-name"/> (<xsl:value-of select="../dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:choose>
                  <xsl:when test="$response//csw:SearchResults/*[1]/dc:date">
                    <xsl:variable name="r1.date" select="$response//csw:SearchResults/*[1]/dc:date"/>
                    <xsl:variable name="r2.date" select="$response//csw:SearchResults/*[2]/dc:date"/>
                    <xsl:variable name="r3.date" select="$response//csw:SearchResults/*[3]/dc:date"/>
                    <xsl:if test="not(xsd:date($r1.date) gt xsd:date($r2.date)) or not(xsd:date($r2.date) gt xsd:date($r3.date))">
                        <ctl:message>[FAILURE] Search results are not sorted correctly by dc:date in descending order.</ctl:message>
                        <ctl:message><xsl:value-of select="$r1.date"/>, <xsl:value-of select="$r2.date"/>, <xsl:value-of select="$r3.date"/></ctl:message>
                        <ctl:fail/>
                    </xsl:if>
                  </xsl:when>
                  <xsl:otherwise> 
                    <!-- sorted records appear last in result set --> 
                    <xsl:variable name="nMatches">
                      <xsl:value-of select="$response//csw:SearchResults/@numberOfRecordsMatched"/>
                    </xsl:variable>
                    <xsl:variable name="startPosition" select="xsd:integer($nMatches) - 2"/>
<xsl:variable name="response1">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" 
  resultType="results" startPosition="{$startPosition}" maxRecords="3">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <ogc:SortBy xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:SortProperty>
          <ogc:PropertyName>dc:date</ogc:PropertyName>
          <ogc:SortOrder>DESC</ogc:SortOrder>
        </ogc:SortProperty>
      </ogc:SortBy>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
                    <xsl:variable name="r1.date" select="$response1//csw:SearchResults/*[1]/dc:date"/>
                    <xsl:variable name="r2.date" select="$response1//csw:SearchResults/*[2]/dc:date"/>
                    <xsl:variable name="r3.date" select="$response1//csw:SearchResults/*[3]/dc:date"/>
                    <xsl:if test="not(xsd:date($r1.date) gt xsd:date($r2.date)) or not(xsd:date($r2.date) gt xsd:date($r3.date))">
                        <ctl:message>[FAILURE] Search results are not sorted correctly by dc:date in descending order.</ctl:message>
                        <ctl:message><xsl:value-of select="$r1.date"/>, <xsl:value-of select="$r2.date"/>, <xsl:value-of select="$r3.date"/> </ctl:message>
                        <ctl:fail/>
                    </xsl:if>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc5.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      BBOX operator must include all matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 matching 
      csw:Record child elements.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ows="http://www.opengis.net/ows" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:BBOX>
            <ogc:PropertyName>/ows:BoundingBox</ogc:PropertyName>
            <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) != count($response//csw:SearchResults/*)">
                  <ctl:message>[FAILURE] Only csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect or @srsName value does not match 'urn:x-ogc:def:crs:EPSG:6.11:4326'(<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc5.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      spatial operator that does not refer to a geometry-valued property must 
      include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValuePhase".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:BBOX>
            <ogc:PropertyName xmlns:dct="http://purl.org/dc/terms/">dct:spatial</ogc:PropertyName>
            <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc6.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-sensitive by default) must include all 
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching csw:BriefRecord instance; (3) csw:SearchResults/@nextRecord="0" </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
         <ogc:PropertyIsEqualTo>
           <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsEqualTo>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="$response//csw:SearchResults//dc:identifier != 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                  <ctl:message>[FAILURE] Expected record is missing (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 0">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 0.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc6.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsEqualTo predicate (case-insensitive) must include all matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly one 
      matching csw:BriefRecord instance.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:subject</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$response/csw:GetRecordsResponse/csw:SearchResults//dc:identifier='urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a'"/>
                  <xsl:otherwise>
                    <ctl:message>[FAILURE] Expected record is missing (urn:uuid:ab42a8c4-95e8-4630-bf79-33e59241605a).</ctl:message>
                    <ctl:fail/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc7.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an unsupported function 
      must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "InvalidParameterValue" 
      (ogc:Function/@name).</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
            <ogc:Function name="DummyFunction">
              <ogc:Literal>input.argument</ogc:Literal>
            </ogc:Function>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc8.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-sensitive by default) must exclude  
      matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching title.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="results" maxRecords="100">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>brief</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
         <ogc:PropertyIsNotEqualTo>
           <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
           <ogc:Literal>Fuscé vitae ligulä</ogc:Literal>
         </ogc:PropertyIsNotEqualTo>
       </ogc:Filter>
     </csw:Constraint>
     <ogc:SortBy xmlns:ogc="http://www.opengis.net/ogc">
       <ogc:SortProperty>
         <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:format</ogc:PropertyName>
         <ogc:SortOrder>DESC</ogc:SortOrder>
       </ogc:SortProperty>
     </ogc:SortBy>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="dc:identifier = 'urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db'">
                    <ctl:message>[FAILURE] Unexpected record is included (urn:uuid:e9330592-0932-474b-be34-c3a3bb67c7db).</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc8.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsNotEqualTo predicate (case-insensitive) must exclude matching 
      record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element does NOT contain any 
      records with a matching subject.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:PropertyIsNotEqualTo matchCase="false">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:subject</ogc:PropertyName>
            <ogc:Literal>pHYSIOGRAPHy</ogc:Literal>
          </ogc:PropertyIsNotEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:BriefRecord)"/>
                <xsl:if test="$recordCount gt 20">
                  <ctl:message>[FAILURE] A maximum of 20 csw:BriefRecord elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(upper-case(dc:subject),'PHYSIOGRAPHY') = 0">
                    <ctl:message>[FAILURE] Unexpected record having dc:subject matching 'pHYSIOGRAPHy' (case-insensitive) - (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc9.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements having dc:date values occurring after 2004-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>dc:date</ogc:PropertyName>
            <ogc:Literal>2004-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenAdHocRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:choose>
                    <xsl:when test="contains(dc:date, 'T')">
                      <xsl:if test="xsd:dateTime(dc:date) le xsd:dateTime('2004-01-01T23:59:59Z')">
                        <ctl:message>[FAILURE] dc:dateTime value occurs at or before 2004-01-01T23:59:59Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="xsd:date(dc:date) le xsd:date('2004-01-01Z')">
                        <ctl:message>[FAILURE] Included record dated on or before 2004-01-01Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc10.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThan predicate must include matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements having dc:date values occurring before 2006-05-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsLessThan>
            <ogc:PropertyName>dc:date</ogc:PropertyName>
            <ogc:Literal>2006-05-01Z</ogc:Literal>
          </ogc:PropertyIsLessThan>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">OneToTenAdHocRecordsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:choose>
                    <xsl:when test="contains(dc:date, 'T')">
                      <xsl:if test="xsd:dateTime(dc:date) ge xsd:dateTime('2006-05-01T00:00:00Z')">
                        <ctl:message>[FAILURE] dc:dateTime value at or after 2006-05-01T00:00:00Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="xsd:date(dc:date) ge xsd:date('2006-05-01Z')">
                        <ctl:message>[FAILURE] Included record dated on or after 2006-05-01Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc11.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only csw:SummaryRecord 
      instances having a dc:title value starting with the string "Lorem ipsum".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:SummaryRecord) lt 2">
                  <ctl:message>[FAILURE] At least two csw:SummaryRecord elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(dc:title,'Lorem ipsum') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dc:title does not match expression "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc11.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include matching record representations.
      </assertion>
      <comment>Pass if the csw:SearchResults element contains only csw:SummaryRecord 
      instances having a dc:date value satisfying the expression 200?-10-*.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>full</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName xmlns:dct="http://purl.org/dc/terms/">dc:date</ogc:PropertyName>
            <ogc:Literal>200?-10-*</ogc:Literal>
          </ogc:PropertyIsLike>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 1">
                  <ctl:message>[FAILURE] AT least one csw:Record element expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="matches(dc:date,'200\d-10-.*') != true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dc:date value does not match expression "200?-10-*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc12.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLessThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      csw:Record elements having dc:date values occurring on or before 
      2005-10-24.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsLessThanOrEqualTo>
            <ogc:PropertyName>dc:date</ogc:PropertyName>
            <ogc:Literal>2005-10-24Z</ogc:Literal>
          </ogc:PropertyIsLessThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 2">
                  <ctl:message>[FAILURE] AT least two csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:choose>
                    <xsl:when test="contains(dc:date, 'T')">
                      <xsl:if test="xsd:dateTime(dc:date) gt xsd:dateTime('2005-10-24T00:00:00Z')">
                        <ctl:message>[FAILURE] Record dated after 2005-10-24T00:00:00Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="xsd:date(dc:date) gt xsd:date('2005-10-24Z')">
                        <ctl:message>[FAILURE] Record dated after 2005-10-24Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc13.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsGreaterThanOrEqualTo predicate must include matching record 
      representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains at least two 
      csw:Record elements having dc:date values occurring on or after 2006-03-26.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>dc:type</csw:ElementName>
      <csw:ElementName>dc:date</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:PropertyIsGreaterThanOrEqualTo>
            <ogc:PropertyName>dc:date</ogc:PropertyName>
            <ogc:Literal>2006-03-26Z</ogc:Literal>
          </ogc:PropertyIsGreaterThanOrEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 2">
                  <ctl:message>[FAILURE] AT least two csw:Record elements expected in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:choose>
                    <xsl:when test="contains(dc:date, 'T')">
                      <xsl:if test="xsd:dateTime(dc:date) lt xsd:dateTime('2006-03-26T00:00:00Z')">
                        <ctl:message>[FAILURE] Included record dated before 2006-03-26T00:00:00Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="xsd:date(dc:date) lt xsd:date('2006-03-26Z')">
                        <ctl:message>[FAILURE] Included record dated before 2006-03-26Z (<xsl:value-of select="dc:date"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc14.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 10-20 
      csw:SummaryRecord elements having titles that do not start with the string 
      "Lorem ipsum".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>summary</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
          <ogc:Not>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
            <ogc:Literal>Lorem ipsum*</ogc:Literal>
          </ogc:PropertyIsLike>
          </ogc:Not>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="summaryRecCount" select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="($summaryRecCount &lt; 10) or ($summaryRecCount &gt; 20)">
                  <ctl:message>[FAILURE] 10-20 csw:SummaryRecord elements expected in response (<xsl:value-of select="$summaryRecCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="starts-with(dc:title,'Lorem ipsum') = true()">
                    <ctl:message>[FAILURE] Unexpected record is included (dc:title starts with "Lorem ipsum*")</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc14.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      Not logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 11-20 csw:Record 
      elements having extents that are either disjoint from the given bounding 
      box or have no ows:BoundingBox child element.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results" maxRecords="20">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ows="http://www.opengis.net/ows" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount lt 11) or ($recordCount gt 20)">
                  <ctl:message>[FAILURE] 11-20 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                    <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
                    <gml:upperCorner>70.0 20.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="ows:BoundingBox">
                      <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 1">
						<ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
						<ctl:fail/>
					  </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc15.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an invalid filter 
      expression must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is "NoApplicableCode".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="hits">
    <csw:Query typeNames="csw:Record">
      <csw:ElementSetName>brief</csw:ElementSetName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/foo">
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:title</ogc:PropertyName>
            <ogc:Literal>Maecenas enim</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:Filter>
      </csw:Constraint>
    </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">NoApplicableCodePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc16.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 
      csw:SummaryRecord elements that have dc:type = "http://purl.org/dc/dcmitype/Image" 
      OR dc:format = "application/*xml".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
   <csw:Query typeNames="csw:Record">
     <csw:ElementSetName>summary</csw:ElementSetName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
         <ogc:Or>
           <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
             <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:format</ogc:PropertyName>
             <ogc:Literal>application/*xml</ogc:Literal>
           </ogc:PropertyIsLike>
           <ogc:PropertyIsEqualTo>
             <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:type</ogc:PropertyName>
             <ogc:Literal>http://purl.org/dc/dcmitype/Image</ogc:Literal>
           </ogc:PropertyIsEqualTo>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/csw/2.0.2/GetRecords.sch</ctl:with-param>
		            <ctl:with-param name="phase">TypeFormatElementsPhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:for-each select="$response//csw:SummaryRecord">
                  <xsl:if test="not(dc:format or dc:type)">
                    <ctl:message>[FAILURE] csw:Record is missing an expected property: dc:format or dc:type (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="dc:format and dc:type">
                      <xsl:if test="(dc:type/text() != 'http://purl.org/dc/dcmitype/Image') and (matches(dc:format/text(),'application/.*\+?xml') != true())">
                        <ctl:message>[FAILURE] dc:type != "http://purl.org/dc/dcmitype/Image" AND dc:format does not match expression "application/*xml" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="dc:format">
                      <xsl:if test="matches(dc:format/text(),'application/.*\+?xml') != true()">
                          <ctl:message>[FAILURE] dc:format does not match expression "application/*xml" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="dc:type/text() != 'http://purl.org/dc/dcmitype/Image'">
                          <ctl:message>[FAILURE] dc:type != "http://purl.org/dc/dcmitype/Image" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc16.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the Or logical predicate must include only matching record representations.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains 1-10 csw:Record 
      child elements that have a matching extent OR were time stamped after 2006-01-01.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
   <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ows="http://www.opengis.net/ows" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
     <csw:ElementName>dc:identifier</csw:ElementName>
     <csw:ElementName>dc:date</csw:ElementName>
     <csw:ElementName>ows:BoundingBox</csw:ElementName>
     <csw:Constraint version="1.1.0">
       <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
         <ogc:Or>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
               <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
               <gml:upperCorner>52.0 1.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
           <ogc:PropertyIsGreaterThan>
             <ogc:PropertyName>dc:date</ogc:PropertyName>
             <ogc:Literal>2006-01-01Z</ogc:Literal>
           </ogc:PropertyIsGreaterThan>
         </ogc:Or>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:Record">
                  <xsl:if test="not(dc:date or ows:BoundingBox)">
                    <ctl:message>[FAILURE] csw:Record is missing an expected property: dc:date or ows:BoundingBox (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:choose>
                    <xsl:when test="dc:date and ows:BoundingBox">
                      <xsl:if test="(xsd:date(dc:date) le xsd:date('2006-01-01Z')) and (csw:disjoint-envelopes($env,ows:BoundingBox) != 0)">
                        <ctl:message>[FAILURE] Record dated on or before 2006-01-01Z AND envelopes do not intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="dc:date">
                      <xsl:if test="xsd:date(dc:date) le xsd:date('2006-01-01Z')">
                          <ctl:message>[FAILURE] Record dated on or before 2006-01-01Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                          <ctl:message>[FAILURE] envelopes do not intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                          <ctl:fail/>
                        </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc17.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 csw:SummaryRecord 
      elements that have dc:format="image/*" AND are related to the given record.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:And>
          <ogc:PropertyIsLike wildCard="*" singleChar="?" escapeChar="\">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:format</ogc:PropertyName>
            <ogc:Literal>image/*</ogc:Literal>
          </ogc:PropertyIsLike>
          <ogc:PropertyIsEqualTo>
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:relation</ogc:PropertyName>
            <ogc:Literal>urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="($recordCount lt 1) or ($recordCount gt 10)">
                  <ctl:message>[FAILURE] 1-10 csw:SummaryRecord elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="dc:relation != 'urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc'">
                    <ctl:message>[FAILURE] Record not related to 'urn:uuid:9a669547-b69b-469f-a11f-2d875366bbdc' (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="matches(dc:format,'image/.*') != true()">
                    <ctl:message>[FAILURE] dc:format does not match expression "image/*" (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc17.2">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include only matching record representations.
      </assertion>
      <comment>
      Pass if the csw:SearchResults element contains 1-10 csw:Record elements 
      that have envelopes intersecting the given bounding box AND were dated 
      after 2006-01-01.
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ows="http://www.opengis.net/ows" xmlns:dct="http://purl.org/dc/terms/" typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dc:date</csw:ElementName>
    <csw:ElementName>ows:BoundingBox</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
        <ogc:And>
          <ogc:BBOX>
            <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
            <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
              <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
              <gml:upperCorner>52.0 1.0</gml:upperCorner>
            </gml:Envelope>
          </ogc:BBOX> 
          <ogc:PropertyIsGreaterThan>
            <ogc:PropertyName>dc:date</ogc:PropertyName>
            <ogc:Literal>2006-01-01Z</ogc:Literal>
          </ogc:PropertyIsGreaterThan>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
         
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                    <gml:lowerCorner>47.0 -4.5</gml:lowerCorner>
                    <gml:upperCorner>52.0 1.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:choose>
                    <xsl:when test="contains(dc:date, 'T')">
                      <!-- date is a top-open interval of exactly one day in length, up to but not including 24:00:00 -->
                      <xsl:if test="xsd:dateTime(dc:date) le xsd:dateTime('2006-01-01T23:59:59Z')">
                        <ctl:message>[FAILURE] dc:date value occurs at or before 2006-01-01T23:59:59Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="xsd:date(dc:date) le xsd:date('2006-01-01Z')">
                        <ctl:message>[FAILURE] dc:date value on or before 2006-01-01Z (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 0">
                    <ctl:message>[FAILURE] Envelopes do NOT intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc18.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having 
      the And logical predicate must include the specified view of records that 
      satisfy all constraints.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query xmlns:ows="http://www.opengis.net/ows" typeNames="csw:Record">
    <csw:ElementName>dc:identifier</csw:ElementName>
    <csw:ElementName>dc:type</csw:ElementName>
    <csw:ElementName>ows:BoundingBox</csw:ElementName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
        <ogc:And>
          <ogc:Not>
            <ogc:BBOX>
              <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
              <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                <gml:upperCorner>50.0 -5.0</gml:upperCorner>
              </gml:Envelope>
            </ogc:BBOX>
          </ogc:Not>
          <ogc:PropertyIsEqualTo matchCase="false">
            <ogc:PropertyName xmlns:dc="http://purl.org/dc/elements/1.1/">dc:type</ogc:PropertyName>
            <ogc:Literal>HTTP://purl.org/dc/dcmitype/dataset</ogc:Literal>
          </ogc:PropertyIsEqualTo>
        </ogc:And>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="recordCount" select="count($response//csw:SearchResults/csw:Record)"/>
                <xsl:if test="($recordCount &lt; 1) or ($recordCount &gt; 10)">
                  <ctl:message>[FAILURE] 1-10 csw:Record elements expected in response (<xsl:value-of select="$recordCount"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:variable name="env">
                  <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
                    <gml:lowerCorner>40.0 -9.0</gml:lowerCorner>
                    <gml:upperCorner>50.0 -5.0</gml:upperCorner>
                  </gml:Envelope>
                </xsl:variable>
                <xsl:for-each select="$response//csw:SearchResults/*">
                  <xsl:if test="compare(lower-case(dc:type),'http://purl.org/dc/dcmitype/dataset') != 0">
                    <ctl:message>[FAILURE] Unexpected record having dc:type not matching 'HTTP://purl.org/dc/dcmitype/dataset' (case-insensitive) - (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="ows:BoundingBox">
                      <xsl:if test="csw:disjoint-envelopes($env,ows:BoundingBox) != 1">
                        <ctl:message>[FAILURE] Envelopes intersect (<xsl:value-of select="dc:identifier"/>)</ctl:message>
                        <ctl:fail/>
                      </xsl:if>
				  </xsl:if>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc19.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes an ogc:Filter having a
      PropertyIsLike predicate must include the specified view of all matching 
      records. If a PropertyName value is not supplied, the predicate is evaluated 
      against all applicable record properties.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>csw:AnyText</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="count($response//csw:SearchResults/csw:Record) lt 5">
                  <ctl:message>[FAILURE] Expected at least 5 csw:Record elements with property values matching the expression "*lorem*".</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc20.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The csw:SummaryRecord view type cannot be queried. The response shall include 
      an exception having @exceptionCode = "InvalidParameterValue" [10.2.5.3.3].
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:SummaryRecord">
    <csw:ElementSetName>summary</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>/dc:title</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc21.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The csw:BriefRecord view type cannot be queried. The response shall include 
      an exception having @exceptionCode = "InvalidParameterValue" [10.2.5.3.4].
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" service="CSW" version="2.0.2" resultType="results">
  <csw:Query typeNames="csw:BriefRecord">
    <csw:ElementSetName>brief</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>/dc:title</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                  <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	              </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc22.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that includes the startPosition 
      parameter must include the corresponding slice of the result set.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is schema valid; (2) the csw:SearchResults element contains exactly 5 
      csw:SummaryRecord child elements; (3) csw:SearchResults/@nextRecord = 8.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="results" 
  startPosition="3"
  maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nSummaryRecord" 
                  select="count($response//csw:SearchResults/csw:SummaryRecord)"/>
                <xsl:if test="nSummaryRecord != 5">
                  <ctl:message>[FAILURE] 5 csw:SummaryRecord elements expected (<xsl:value-of select="$nSummaryRecord"/> returned).</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@numberOfRecordsReturned != 5">
                  <ctl:message>[FAILURE] @numberOfRecordsReturned != 5.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 8">
                  <ctl:message>[FAILURE] @nextRecord != 8.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc23.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies maxRecords="0" must 
      not include any results.
      </assertion>
      <comment>Pass if all of the following conditions are true: 
      (1) the response is schema valid; 
      (2) the csw:SearchResults element is empty; 
      (3) csw:SearchResults/@numberOfRecordsMatched > 10; 
      (4) csw:SearchResults/@nextRecord = 1
      </comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="results" maxRecords="0">
    <csw:Query xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ows="http://www.opengis.net/ows" typeNames="csw:Record">
      <csw:ElementName>dc:identifier</csw:ElementName>
      <csw:ElementName>ows:BoundingBox</csw:ElementName>
      <csw:Constraint version="1.1.0">
        <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc" xmlns:gml="http://www.opengis.net/gml">
          <ogc:Not>
           <ogc:BBOX>
             <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
             <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
               <gml:lowerCorner>60.0 12.0</gml:lowerCorner>
               <gml:upperCorner>70.0 20.0</gml:upperCorner>
             </gml:Envelope>
           </ogc:BBOX>
         </ogc:Not>
       </ogc:Filter>
     </csw:Constraint>
   </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="nRecords" select="count($response//csw:SearchResults/*)"/>
                <xsl:if test="$nRecords gt 0">
                  <ctl:message>[FAILURE] csw:SearchResults should be empty (<xsl:value-of select="$nRecords"/> included)</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="xsd:integer($response//csw:SearchResults/@numberOfRecordsMatched) le 1">
                  <ctl:message>[FAILURE] Expected @numberOfRecordsMatched &gt; 1</ctl:message>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//csw:SearchResults/@nextRecord != 1">
                  <ctl:message>[FAILURE] Expected csw:SearchResults/@nextRecord = 1.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc24.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies resultType="validate"
      must include an Acknowledgement if the request entity is valid.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="validate">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>full</csw:ElementSetName>
    <csw:Constraint version="1.1.0">
      <ogc:Filter xmlns:ogc="http://www.opengis.net/ogc">
        <ogc:PropertyIsLike wildCard="*" singleChar="." escapeChar="\">
          <ogc:PropertyName>csw:AnyText</ogc:PropertyName>
          <ogc:Literal>*lorem*</ogc:Literal>
        </ogc:PropertyIsLike>
      </ogc:Filter>
    </csw:Constraint>
  </csw:Query>
</csw:GetRecords>  
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//csw:Acknowledgement)">
                  <ctl:message>[FAILURE] Expected csw:Acknowledgement in response.</ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc25.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputFormat value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="results" 
  outputFormat="application/xhtml+xml"
  maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetRecords-tc26.1">
      <param name="csw.GetRecords.post.url"/>
      <assertion>
      The response to a GetRecords request that specifies an unsupported 
      outputSchema value must include an exception report.
      </assertion>
      <comment>Pass if all of the following conditions are true: (1) the response 
      is a valid ows:ExceptionReport; (2) the reported exceptionCode is 
      "InvalidParameterValue".</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
<csw:GetRecords xmlns:csw="http://www.opengis.net/cat/csw/2.0.2" 
  service="CSW" version="2.0.2" resultType="results" 
  outputSchema="http://www.w3.org/2005/Atom"
  maxRecords="5">
  <csw:Query typeNames="csw:Record">
    <csw:ElementSetName>summary</csw:ElementSetName>
  </csw:Query>
</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>[FAILURE] Missing or invalid response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response"/>
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
</ctl:package>
