<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
 xmlns="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:csw="http://www.opengis.net/cat/csw/2.0.2"
 xmlns:xi="http://www.w3.org/2001/XInclude">

    <ctl:test name="csw:GetCapabilities-GET">
      <param name="csw.capabilities.doc" />
      <ctl:assertion>
      Run test group for GetCapabilities requests using the GET method.
      </ctl:assertion>
      <ctl:code>
        <xsl:variable name="csw.GetCapabilities.get.url">
		    <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		</xsl:variable>
        <ctl:message>Target endpoint is <xsl:value-of select="$csw.GetCapabilities.get.url"/></ctl:message>
        
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc1.3">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc2.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc3.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc4.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc5.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc5.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc6.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc7.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc7.2">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
  </ctl:call-test>
  <ctl:call-test name="csw:csw-2.0.2-GetCapabilities-tc8.1">
    <ctl:with-param name="csw.GetCapabilities.get.url" select="$csw.GetCapabilities.get.url"/>
    <ctl:with-param name="csw.GetCapabilities.formats" 
      select="$csw.capabilities.doc//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
  </ctl:call-test>
      </ctl:code>
    </ctl:test>
   
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      All OGC web services must implement GetCapabilities using the GET method. 
      The response to a GetCapabilities request without the optional version 
      parameter must include a complete representation of the capabilities 
      document corresponding to the latest supported version.
      </assertion>
      <comment>Pass if the response is schema valid and has no missing elements.</comment>
      <link>OGC 05-008c1: 7.1 (p.10)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request with the ACCEPTVERSIONS parameter 
      must include a complete representation of the capabilities document corresponding 
      to the first supported version in the list.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1</comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">2.0.2,2.0.0</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc1.3">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request containing an ACCEPTVERSIONS 
      parameter that DOES NOT list a supported version must include an exception 
      with exceptionCode="VersionNegotiationFailed".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="VersionNegotiationFailed".
      </comment>
      <link>OGC-05-008, 7.3.2</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="SERVICE">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="ACCEPTVERSIONS">2006.10.29</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">VersionNegotiationFailedPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc2.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that omits a required parameter 
      name or value must include an exception with exceptionCode="MissingParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="MissingParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">MissingParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the missing 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc3.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a KVP request that includes an invalid parameter 
      value must include an exception with exceptionCode="InvalidParameterValue".
      </assertion>
      <comment>
      Pass if all of the following conditions are true: (1) the response 
      entity has &lt;ows:ExceptionReport&gt; as the document element; and (2) 
      ows:Exception/@exceptionCode="InvalidParameterValue".
      </comment>
      <link>OGC-05-008, 7.4.1</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">FOO</param>
					<param name="request">GetCapabilities</param>
					<p:XMLValidatingParser.OWS/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/ows/1.0.0/ExceptionReport.sch</ctl:with-param>
		            <ctl:with-param name="phase">InvalidParameterValuePhase</ctl:with-param>
	            </ctl:call-test>
                <xsl:if test="not(lower-case($response//ows:Exception/@locator) = 'service')">
                  <ctl:message>
                  FAILURE: ows:Exception/@locator is absent or does not identify the invalid 'service' parameter.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
	<test name="csw:csw-2.0.2-GetCapabilities-tc4.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      Parameter names in KVP strings shall be handled in a case-insensitive manner.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="sErViCe">CSW</param>
					<param name="REQUEST">GetCapabilities</param>
                    <param name="version">2.0.2</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc5.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      Unrecognized query parameters must be ignored.
      </assertion>
      <comment>Same pass criteria as for csw-2.0.2-GetCapabilities-tc1.1.</comment>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptversions">2.0.2</param>
                    <param name="date">2006-10-20</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc5.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes an unsupported 
      AcceptFormats parameter value must include the default XML representation 
      of the capabilities document.
      </assertion>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="acceptformats">message/example</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">DefaultPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc6.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      A response message containing an entity body must contain a Content-Type entity 
      header field that correctly indicates the media type of the message body.
      </assertion>
      <comment>Pass if the Content-Type entity header field indicates an XML media type.</comment>
      <link>OGC 05-008: 11.7 (p.61)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
					<parsers:HTTPParser />
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="content-type" 
                  select="$response//headers/header[@name='Content-Type']"/>
                <xsl:if test="matches($content-type,'.+/xml') != true()">
                    <ctl:message>FAILURE: Content-Type response header does not indicate an XML media type (<xsl:value-of select="$content-type"/>)</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc7.1">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      with NO VALUE provided shall include an abbreviated capabilities document 
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional 
      top-level elements.</comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections"></param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:call-test name="ctl:SchematronValidatingParser">
		            <ctl:with-param name="doc" select="$response" />
		            <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		            <ctl:with-param name="phase">AbbreviatedContentPhase</ctl:with-param>
	            </ctl:call-test>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="csw:csw-2.0.2-GetCapabilities-tc7.2">
      <param name="csw.GetCapabilities.get.url"/>
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      listing optional elements shall include only the requested elements in the 
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional 
      elements.
      </comment>
      <link>OGC 05-008: 7.3.3 (p.17)</link>
		<code>
			<xsl:variable name="response">
				<request>
					<url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</url>
					<method>GET</method>
					<param name="service">CSW</param>
					<param name="request">GetCapabilities</param>
                    <param name="sections">OperationsMetadata,ServiceIdentification</param>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE: Missing response entity.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE: ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="not($response//ows:ServiceIdentification)">
                    <ctl:message>FAILURE: ows:ServiceIdentification element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE: ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <ctl:test name="csw:csw-2.0.2-GetCapabilities-tc8.1">
      <ctl:param name="csw.GetCapabilities.get.url"/>
      <ctl:param name="csw.GetCapabilities.formats"/>
      <ctl:assertion>
      The response to a GetCapabilities request containing an AcceptFormats 
      parameter specifying a supported format must include a response entity 
      that corresponds to the requested media type.
      </ctl:assertion>
      <ctl:link>OGC 05-008, 7.3.5</ctl:link>
		<ctl:code>
          <xsl:for-each select="$csw.GetCapabilities.formats//ows:Value">
            <xsl:variable name="format" select="./text()" />
            <xsl:variable name="response">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetCapabilities.get.url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
					<parsers:HTTPParser />
				</ctl:request>
			</xsl:variable>
            <xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
			<xsl:if test="not(starts-with($content-type, $format))">
				<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
				<ctl:fail/>
			</xsl:if>
          </xsl:for-each>
		</ctl:code>
	</ctl:test>
</ctl:package>
