<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:getObservation="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetObservation.xml"
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:ctl="http://www.occamlab.com/ctl"  
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xows="http://www.opengeospatial.net/ows"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:tml="http://www.opengis.net/tml"
	xmlns:om="http://www.opengis.net/om/1.0"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
>
<!--*****************************************************************************************************************************************************************************-->		
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidSRSName.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>			
			<ctl:assertion>An invalid srsName in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid srsName in the request produces a valid error message.  Pass if an invalid srsName produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid srsName in the request produces a valid error message.  This includes providing an empty srsName element or providing an srsName that is not advertised for the requested offering.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidSRSName</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidSRSName" select="'urn:ogc:def:crs:EPSG:9999'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;srsName&quot; parameter value that is not advertised in the capabilities document: ', $invalidSRSName, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>
									<xsl:attribute name="srsName">
										<xsl:value-of select="$invalidSRSName"/>
									</xsl:attribute>									
									<offering><xsl:value-of select="$offeringId"/></offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>										
								</GetObservation>						
							</ctl:body>	
						<ctl:call-function name="sosFunctions:xmlValidatingParser">												
							<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
						</ctl:call-function>						
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'srsname'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'srsName'.</ctl:message>
						<ctl:fail/>
					</xsl:when>						
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					

			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidOffering.1">
		    <ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:assertion>An invalid offering in the request produces a valid error message. </ctl:assertion>
			<ctl:comment>Check that an invalid offering in the request produces a valid error message.    Pass if an invalid offering in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid offering in the request produces a valid error message.  This includes specifying no offering or an offering value that is not advertised in the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidOffering</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidOfferingId" select="'softliness_of_jello'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;offeringId&quot; parameter value that is not advertised in the capabilities document: ', $invalidOfferingId, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering><xsl:value-of select="$invalidOfferingId"/></offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>										
								</GetObservation>						
							</ctl:body>	
						<ctl:call-function name="sosFunctions:xmlValidatingParser">												
							<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>									
						</ctl:call-function>						
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'offering'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'offering'.</ctl:message>
						<ctl:fail/>
					</xsl:when>						
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidEventTime.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="exceptionReportSchema"/>			
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>				
			<ctl:assertion>An invalid eventTime in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid eventTime in the request produces a valid error message.  Pass if an invalid eventTime in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid eventTime in the request produces a valid error message.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidEventTime</ctl:link>
			<ctl:code>
				<xsl:choose>						
					<xsl:when test="not(sosFunctions:filterTM_During($capabilitiesDocument) or sosFunctions:filterTM_Equals($capabilitiesDocument))">
						<ctl:message select="'Temporal operators &quot;TM_During&quot; &quot;TM_Equals&quot; are not supported by this implementation.  Test will be skipped.'"/>							
					</xsl:when>			
				
					<xsl:otherwise>								
						<xsl:variable name="beginPosition" select="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)"/>											
						<xsl:variable name="endPosition" select="sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)"/>												
						<xsl:variable name="invalidDate" select="'scooby'"/>
						<ctl:message select="' '"/>
						<ctl:message select="concat('Making a GetObservation request with improperly formatted begin date of: &quot;', $invalidDate, '&quot;')"/>				
						<xsl:variable name="getObservationBadDateFormat">
							<xsl:choose>
								<xsl:when test="(sosFunctions:filterTM_Equals($capabilitiesDocument))">
									<xsl:copy-of select="sosFunctions:getObservationByTimeInstant
														($postURL, 
														$getObservationVersion, 
														$offeringId, 
														$invalidDate, 
														$observedProperty, 
														$responseFormat,
														$exceptionReportSchema)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:copy-of select="sosFunctions:getObservationByTimePeriod
														($postURL, 
														$getObservationVersion, 
														$offeringId, 
														$invalidDate, 
														$endPosition, 
														$observedProperty, 
														$responseFormat,
														$exceptionReportSchema)"/>								
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>						
						<xsl:choose>
							<xsl:when test="not($getObservationBadDateFormat/*)">							
								<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
								<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
								<ctl:fail/>
							</xsl:when>
							<!-- check for correct exception code -->					
							<xsl:when test="not($getObservationBadDateFormat/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
								<ctl:message>Invalid exception code.</ctl:message>
								<ctl:message>
									<xsl:value-of select="concat('Exception code is: ', $getObservationBadDateFormat/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
								</ctl:message>
								<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
								<ctl:fail/>
							</xsl:when>
							<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservationBadDateFormat)), 'eventtime'))">
								<ctl:message>Invalid locator.</ctl:message>
								<ctl:message>
									<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservationBadDateFormat))"/>
								</ctl:message>
								<ctl:message>Locator value should be: 'eventTime'.</ctl:message>
								<ctl:fail/>
							</xsl:when>						
							<!-- looks good -->
							<xsl:otherwise>
								<ctl:message>OK</ctl:message>
							</xsl:otherwise>
						</xsl:choose>					
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidProcedure.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>An invalid procedure in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid procedure in the request produces a valid error message.  Pass if an invalid procedure in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid procedure in the request produces a valid error message.  This includes providing an empty procedure element or providing one or more procedures that are not advertised for the requested offering in the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidProcedure</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidProcedure" select="'urn:ogc:object:procedure:CITE:WeatherService:ThisIsInvalid'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;procedure&quot; parameter value that is not advertised in the capabilities document: ', $invalidProcedure, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>										
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<procedure>
										<xsl:value-of select="$invalidProcedure"/>
									</procedure>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>				
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'procedure'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'procedure'.</ctl:message>
						<ctl:fail/>
					</xsl:when>					
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidObservedProperty.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Supplying one or more invalid observedProperty values in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that supplying one or more invalid observedProperty values in the request produces a valid error message.  Pass if an invalid observedProperty value produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that one or more invalid observedProperty values cause the server to return a valid error message.  This includes providing empty observedProperty elements or providing observedProperty values that do not correspond with the observedProperty values advertised in the Capabilities document for the requested offering.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidObservedProperty</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidObservedProperty" select="'urn:ogc:def:phenomenon:OGC:TheInvalidObservedProperty'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;observedProperty&quot; parameter value that is not advertised in the capabilities document: ', $invalidObservedProperty, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<observedProperty>
										<xsl:value-of select="$invalidObservedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'observedproperty'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'observedProperty'.</ctl:message>
						<ctl:fail/>
					</xsl:when>					
					
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidFeatureOfInterest.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>					
			<ctl:assertion>Supplying one or more invalid featureOfInterest values in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that supplying one or more invalid featureOfInterest values in the request produces a valid error message.  Pass if one or more invalid featureOfInterest values in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid named gml feature in the featureOfInterest value of the request causes the server to produce a valid error message.  This includes providing an empty featureOfInterest element or providing a named gml feature value in the featureOfInterest that does not correspond with the featureOfInterest values advertised in the Capabilities document for the requested offering.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidFeatureOfInterest</ctl:link>
			<ctl:code>			
				<xsl:variable name="invalidFeatureOfInterest" select="'urn:ogc:def:object:feature:TheInvalidFeature'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;featureOfInterest&quot; parameter value that is not advertised in the capabilities document: ', $invalidFeatureOfInterest, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>	
									<featureOfInterest>
										<ObjectID>
											<xsl:value-of select="$invalidFeatureOfInterest"/>
										</ObjectID>
									</featureOfInterest>									
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		

				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'featureofinterest'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'featureOfInterest'.</ctl:message>
						<ctl:fail/>
					</xsl:when>						
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResult.1">
			<ctl:param name="compareOperatorElement"/>
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>				
			<ctl:assertion>Providing an invalid value in the result field produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid value in the result field produces a valid error message.  Pass if a valid error message is produced from providing an invalid value in the result field; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that supplying an invalid value in the result parameter produces a valid error message.  This includes providing an empty result element or providing a result element that is not advertised in the Filter_Capabilities section of the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidResult</ctl:link>
			<ctl:code>					
				<xsl:choose>
					<xsl:when test="string($compareOperatorElement)=''">
						<ctl:message>No appropriate operator for this test could be found.  Test will not be run.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="'Making GetObservation request with an invalid &quot;result&quot; parameter'"/>			
						<ctl:message select="concat('Using the comparison operator &quot;', $compareOperatorElement, '&quot;')"/>
						
						<xsl:variable name="requestBody">
						
							<GetObservation 
								xmlns="http://www.opengis.net/sos/1.0" 
								xmlns:ows="http://www.opengis.net/ows/1.1" 
								xmlns:gml="http://www.opengis.net/gml" 
								xmlns:ogc="http://www.opengis.net/ogc" 
								xmlns:om="http://www.opengis.net/om/1.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
								xsi:schemaLocation="http://www.opengis.net/sos/1.0
									http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
								service="SOS"
							>
								<xsl:attribute name="version">
									<xsl:value-of select="$getObservationVersion"/>
								</xsl:attribute>									
								<offering>
									<xsl:value-of select="$offeringId"/>
								</offering>
								<observedProperty>
									<xsl:value-of select="$observedProperty"/>
								</observedProperty>	
								<result>
									<xsl:element name="{$compareOperatorElement}">										
										<ogc:PropertyName></ogc:PropertyName>
										<ogc:Literal></ogc:Literal>
									</xsl:element>									
								</result>
								<responseFormat>
									<xsl:value-of select="$responseFormat"/>
								</responseFormat>	
							</GetObservation>
												
						</xsl:variable>
						
						<xsl:variable name="getObservation">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$postURL"/>
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>								
									<xsl:copy-of select="$requestBody"/>
								</ctl:body>	
															
								<ctl:call-function name="sosFunctions:xmlValidatingParser">												
									<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
								</ctl:call-function>						
								
							</ctl:request>							 														
						</xsl:variable>	
				
						<xsl:choose>
							<!-- check for valid schema or missing response-->
							<xsl:when test="not($getObservation/*)">							
								<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
								<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
								<ctl:fail/>
							</xsl:when>

							<!-- check for correct exception code -->					
							<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
								<ctl:message>Invalid exception code.</ctl:message>
								<ctl:message>
									<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
								</ctl:message>
								<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
								<ctl:fail/>
							</xsl:when>						
							<!-- looks good -->
							<xsl:otherwise>
								<ctl:message>OK</ctl:message>
							</xsl:otherwise>
						</xsl:choose>	
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseFormat.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>							
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid outputFormat value produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid outputFormat value produces a valid error message.  Pass if an invalid outputFormat produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid outputFormat value in the request produces a valid error message.  This includes any outputFormat value that is not advertised by the requested offering in the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidResponseFormat</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResponseFormat" select="'text/xml;subtype=&quot;XX&quot;'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;responseFormat&quot; parameter value that is not advertised in the capabilities document: ', $invalidResponseFormat, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$invalidResponseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'responseformat'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'responseFormat'.</ctl:message>
						<ctl:fail/>
					</xsl:when>						
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResultModel.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid resultModel in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid resultModel in the request produces a valid error message.  Pass if providing an invalid resultModel in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid resultModel value in the request produces a valid error message.  This includes any resultModel value that is not advertised by the requested offering in the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidResultModel</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResultModel" select="'TheBogusOne'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;resultModel&quot; parameter value that is not advertised in the capabilities document: ', $invalidResultModel, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>

									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
									<resultModel>
										<xsl:value-of select="$invalidResultModel"/>
									</resultModel>									
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'resultmodel'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'resultModel'.</ctl:message>
						<ctl:fail/>
					</xsl:when>					
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseMode.1">
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid responseMode in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid responseMode in the request produces a valid error message.  Pass if providing an invalid responseMode in the request produces a valid error mesage; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid responseMode in the request produces a valid error message.  This includes any responseMode that is not advertised by the requested offering in the Capabilities document.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-RequestInvalidResponseMode</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResponseMode" select="'NotValid'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;resultModel&quot; parameter value that is not advertised in the capabilities document: ', $invalidResponseMode, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>

									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
									<responseMode>
										<xsl:value-of select="$invalidResponseMode"/>
									</responseMode>									
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:when test="not(contains(lower-case(sosFunctions:exceptionCodeLocator($getObservation)), 'responsemode'))">
						<ctl:message>Invalid locator.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Locator is: ', sosFunctions:exceptionCodeLocator($getObservation))"/>
						</ctl:message>
						<ctl:message>Locator value should be: 'responseMode'.</ctl:message>
						<ctl:fail/>
					</xsl:when>						
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingSRSData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>If an srsName value is supplied in the request, then the srs of the response data is valid according to the format specified by the requested srsName.</ctl:assertion>
			<ctl:comment>Check if an srsName value is supplied in the request, then the srs of the response data is valid according to the format specified by the requested srsName.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the srs of the returned data is in the correct format given the requested srsName.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingSRSData</ctl:link>
			<ctl:code>					
				<xsl:choose>
					<xsl:when test="not($capabilitiesDocument//sos:ObservationOffering//@srsName
										| $capabilitiesDocument//sos:ObservationOffering//gml:srsName)">
						<ctl:message select="'This SOS does not advertise any specific srsNames for any offerings, so this test will be skipped'"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
						<xsl:variable name="offeringId" select="."/>
						<ctl:message select="concat('Offering: ', $offeringId)"/>
							<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
								<xsl:variable name="responseFormat" select="."/>		
								<ctl:message select="concat('Response format: ', $responseFormat)"/>
								<xsl:for-each select="distinct-values($capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//@srsName
																	 | $capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//gml:srsName)">
									<xsl:variable name="srsName" select="."/>		
									<ctl:message select="'****'"/>
									<ctl:message select="concat('Making GetObservation request with a valid &quot;srsName&quot; parameter of: ', $srsName, '   ...')"/>									
									<xsl:variable name="getObservation">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$postURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
												<ctl:body>								
													<GetObservation 
														xmlns="http://www.opengis.net/sos/1.0" 
														xmlns:ows="http://www.opengis.net/ows/1.1" 
														xmlns:gml="http://www.opengis.net/gml" 
														xmlns:ogc="http://www.opengis.net/ogc" 
														xmlns:om="http://www.opengis.net/om/1.0" 
														xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
														xsi:schemaLocation="http://www.opengis.net/sos/1.0
															http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
														service="SOS"
													>
														<xsl:attribute name="version">
															<xsl:value-of select="$getObservationVersion"/>
														</xsl:attribute>
														<xsl:attribute name="srsName">
															<xsl:value-of select="$srsName"/>
														</xsl:attribute>									
														<offering><xsl:value-of select="$offeringId"/></offering>
														<observedProperty>
															<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
														</observedProperty>
														<responseFormat>
															<xsl:value-of select="$responseFormat"/>
														</responseFormat>										
													</GetObservation>						
												</ctl:body>	
																				
											<ctl:call-function name="sosFunctions:xmlValidatingParser">											
												<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
											</ctl:call-function>						
											
											</ctl:request>							 														
									</xsl:variable>	
										
									<xsl:choose>
										<!-- check for valid schema or missing response-->
										<xsl:when test="not($getObservation/*)">							
											<ctl:message>Response failed schema validation.</ctl:message>
											<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											<ctl:fail/>
										</xsl:when>
										<xsl:otherwise>
										
										<xsl:for-each select="distinct-values($getObservation//@srsName)">
											<xsl:variable name="thisSRSName" select="."/>
											<xsl:choose>
												<xsl:when test="not($thisSRSName = $srsName)">													
													<ctl:message>
														<xsl:value-of select="concat('Invalid SRSName: ', $thisSRSName)"/>
													</ctl:message>							
													<ctl:fail/>
												</xsl:when>
												<!-- looks good -->
												<xsl:otherwise>
													<xsl:message select="concat('SRSName in response is OK: ', $thisSRSName)"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
										</xsl:otherwise>
									</xsl:choose>			
								</xsl:for-each>				
							</xsl:for-each>		
						</xsl:for-each>		
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingProcedureData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>						
			<ctl:assertion>The procedure value(s) in the response match or a subset of the procedure value(s) specified in the request.</ctl:assertion>
			<ctl:comment>Check that the procedure value(s) in the response match or are a subset of the procedure value(s) specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the procedure value(s) in the response match or are a subset of the procedure value(s) specified in the request.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingProcedureData</ctl:link>
			<ctl:code>
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each procedure advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					
			
					<xsl:variable name="beginPosition" select="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)"/>
					<xsl:variable name="endPosition" select="sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)"/>	
					<xsl:choose>
						<xsl:when test="$beginPosition = '' or $endPosition=''">
							<ctl:message select="'Indeterminate or undefined time period.'"/>
							<ctl:message select="concat('Skipping the offering &quot;', $offeringId, '&quot;')"/>
						</xsl:when>
						<xsl:otherwise>					
							<xsl:variable name="observedProperty" select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
							<ctl:message select="concat('Observed property: ', $observedProperty)"/>
							<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
								<xsl:variable name="responseFormat" select="."/>	
								<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
								<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:procedure/@xlink:href">
									<xsl:variable name="procedure" select="."/>
									<ctl:message select="concat('Testing procedure: ', $procedure )"/>
									<xsl:variable name="getObservation">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$postURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>								
												<GetObservation 
													xmlns="http://www.opengis.net/sos/1.0" 
													xmlns:ows="http://www.opengis.net/ows/1.1" 
													xmlns:gml="http://www.opengis.net/gml" 
													xmlns:ogc="http://www.opengis.net/ogc" 
													xmlns:om="http://www.opengis.net/om/1.0" 
													xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
													xsi:schemaLocation="http://www.opengis.net/sos/1.0
													http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
													service="SOS"
												>
													<xsl:attribute name="version">
														<xsl:value-of select="$getObservationVersion"/>
													</xsl:attribute>									
													<offering>
														<xsl:value-of select="$offeringId"/>
													</offering>
													<procedure>
														<xsl:value-of select="$procedure"/>
													</procedure>									
													<observedProperty>
														<xsl:value-of select="$observedProperty"/>
													</observedProperty>
													<responseFormat>
														<xsl:value-of select="$responseFormat"/>
													</responseFormat>										
												</GetObservation>						
											</ctl:body>	
											
											<ctl:call-function name="sosFunctions:xmlValidatingParser">											
												<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
											</ctl:call-function>
											
										</ctl:request>							 														
									</xsl:variable>			

									<xsl:choose>
										<!-- check for valid schema or missing response-->
										<xsl:when test="not($getObservation/*)">							
											<ctl:message>Response failed schema validation.</ctl:message>
											<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											<ctl:fail/>
										</xsl:when>
										<xsl:when test="not($getObservation//om:procedure/@xlink:href)">
											<xsl:choose> <!-- MAYBE THE COLLECTION IS EMPTY -->
												<xsl:when test="($getObservation//om:member[@xlink:href='urn:ogc:def:nil:OGC:inapplicable'])">
													<ctl:message select="concat('No observations for procedure &quot;', $procedure, '&quot;')"/>
													<ctl:message>OK</ctl:message>													
												</xsl:when>
												<xsl:otherwise>
													<ctl:message select="'Failure'"/>
													<ctl:message select="'No procedure is identified in this response'"/>
													<ctl:fail/>												
												</xsl:otherwise>
											</xsl:choose>
										</xsl:when>
										<xsl:otherwise>
										<xsl:for-each select="distinct-values($getObservation//om:procedure/@xlink:href)">
											<xsl:variable name="thisProcedure" select="."/>
											<xsl:choose>
												<xsl:when test="not($thisProcedure = $procedure)">													
													<ctl:message>
														<xsl:value-of select="concat('Invalid procedure: ', $thisProcedure)"/>
													</ctl:message>							
													<ctl:fail/>
												</xsl:when>
												<!-- looks good -->
												<xsl:otherwise>
													<xsl:message select="concat('Procedure in response is OK: ', $thisProcedure)"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:for-each>
										</xsl:otherwise>
									</xsl:choose>	
									<ctl:message></ctl:message>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingObservedPropertyData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>								
			<ctl:assertion>The observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.</ctl:assertion>
			<ctl:comment>Check the observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingObservedPropertyData</ctl:link>
			<ctl:code>
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each observedProperty advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					
					<xsl:variable name="beginPosition" select="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)"/>
					<xsl:variable name="endPosition" select="sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)"/>	
					<xsl:choose>
						<xsl:when test="$beginPosition = '' or $endPosition=''">
							<ctl:message select="'Indeterminate or undefined time period.'"/>
							<ctl:message select="concat('Skipping the offering &quot;', $offeringId, '&quot;')"/>
						</xsl:when>
						<xsl:otherwise>
					
							<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
								<xsl:variable name="responseFormat" select="."/>	
								<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>
								<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:observedProperty/@xlink:href">
									<xsl:variable name="observedProperty" select="."/>
									<ctl:message select="concat('Testing observedProperty: ', $observedProperty )"/>
									<xsl:variable name="getObservation">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$postURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>								
												<GetObservation 
													xmlns="http://www.opengis.net/sos/1.0" 
													xmlns:ows="http://www.opengis.net/ows/1.1" 
													xmlns:gml="http://www.opengis.net/gml" 
													xmlns:ogc="http://www.opengis.net/ogc" 
													xmlns:om="http://www.opengis.net/om/1.0" 
													xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
													xsi:schemaLocation="http://www.opengis.net/sos/1.0
													http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
													service="SOS"
												>
													<xsl:attribute name="version">
														<xsl:value-of select="$getObservationVersion"/>
													</xsl:attribute>									
													<offering>
														<xsl:value-of select="$offeringId"/>
													</offering>							
													<observedProperty>
														<xsl:value-of select="$observedProperty"/>
													</observedProperty>
													<responseFormat>
														<xsl:value-of select="$responseFormat"/>
													</responseFormat>										
												</GetObservation>						
											</ctl:body>	
											
											<ctl:call-function name="sosFunctions:xmlValidatingParser">											
												<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
											</ctl:call-function>
											
										</ctl:request>							 														
									</xsl:variable>			
							
									<xsl:choose>
										<!-- check for valid schema or missing response-->
										<xsl:when test="not($getObservation/*)">							
											<ctl:message>Response failed schema validation.</ctl:message>
											<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											<ctl:fail/>
										</xsl:when>									
										<xsl:when test="not($getObservation//om:observedProperty/descendant-or-self::*[@xlink:href=$observedProperty or gml:name=$observedProperty])">
											<ctl:message select="concat('Response does not contain the observedProperty: ', $observedProperty)"/>
											<ctl:fail/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:message select="'OK'"/>
										</xsl:otherwise>
									</xsl:choose>							
								</xsl:for-each>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseAdvertisedEventTimeData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>				
			<ctl:assertion>The server returns one or more observations when the advertised eventTime for the requested offering is supplied in a valid request.</ctl:assertion>
			<ctl:comment>Check that the server returns one or more observations when the advertised eventTime for the requested offering is supplied in a valid request.  Pass if one more observations are returned when supplied a valid request; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that requesting data for the advertised eventTime for each offering returns one or more observations.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseAdvertisedEventTimeData</ctl:link>
			<ctl:code>		

				<xsl:choose>
					<xsl:when test="not(sosFunctions:filterTM_During($capabilitiesDocument))">
						<ctl:message select="'Temporal operator &quot;TM_During&quot; is not supported by this implementation.  Test will be skipped.'"/>							
					</xsl:when>
					<xsl:otherwise>					
						<ctl:message select="''"/>
						<ctl:message select="'A GetObservation request will be made for each offering advertised in the capabilities document'"/>
						<ctl:message select="''"/>

						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
							<xsl:variable name="offeringId" select="."/>
							<ctl:message select="concat('Offering: ', $offeringId)"/>							
							<xsl:variable name="observedProperty" select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
							<ctl:message select="concat('Observed Property: ', $observedProperty)"/>
							<xsl:variable name="beginPosition" select="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)"/>
							<xsl:variable name="endPosition" select="sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)"/>							
							<ctl:message select="concat('Begin time: ', $beginPosition)"/>
							<ctl:message select="concat('End time: ', $endPosition)"/>
							
							
							<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
								<xsl:variable name="responseFormat" select="."/>	
								<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>									
								<xsl:choose>
									<xsl:when test="$beginPosition = '' or $endPosition=''">
										<ctl:message select="'Offering does not have a specific time range..'"/>
										<ctl:message select="concat('Skipping the offering &quot;', $offeringId, '&quot;')"/>
									</xsl:when>
									<xsl:otherwise>
																				
				
										<xsl:variable name="getObservation">							
											<ctl:request>
												<ctl:url>
													<xsl:value-of select="$postURL"/>
												</ctl:url>
												<ctl:method>post</ctl:method>
												<ctl:body>								
													<GetObservation 
														xmlns="http://www.opengis.net/sos/1.0" 
														xmlns:ows="http://www.opengis.net/ows/1.1" 
														xmlns:gml="http://www.opengis.net/gml" 
														xmlns:ogc="http://www.opengis.net/ogc" 
														xmlns:om="http://www.opengis.net/om/1.0" 
														xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
														xsi:schemaLocation="http://www.opengis.net/sos/1.0
														http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
														service="SOS"
													>
														<xsl:attribute name="version">
															<xsl:value-of select="$getObservationVersion"/>
														</xsl:attribute>									
														<offering>
															<xsl:value-of select="$offeringId"/>
														</offering>		
												
														<eventTime>
															<ogc:TM_During>
																<ogc:PropertyName>urn:ogc:data:time:iso8601</ogc:PropertyName>
																<gml:TimePeriod>
																	<gml:beginPosition><xsl:value-of select="$beginPosition"/></gml:beginPosition>
																	<gml:endPosition><xsl:value-of select="$endPosition"/></gml:endPosition>
																</gml:TimePeriod>
															</ogc:TM_During>													
														</eventTime>	
														<observedProperty>
															<xsl:value-of select="$observedProperty"/>
														</observedProperty>
														<responseFormat>
															<xsl:value-of select="$responseFormat"/>
														</responseFormat>										
													</GetObservation>						
												</ctl:body>	

												<ctl:call-function name="sosFunctions:xmlValidatingParser">											
													<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
												</ctl:call-function>

											</ctl:request>							 																					
										</xsl:variable>						
										<xsl:choose>								
											<xsl:when test="not($getObservation/*)">							
												<ctl:message>Response failed schema validation.</ctl:message>
												<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
												<ctl:fail/>
											</xsl:when>									
											<xsl:when test="xsd:integer(sosFunctions:numberOfObservations($getObservation)) = 0">
												<ctl:message select="'Failure.'"/>
												<ctl:message select="'Response does not contain any observations for the advertised time period.'"/>
												<ctl:fail/>
											</xsl:when>															
											<xsl:otherwise>
												<xsl:message select="'OK'"/>
											</xsl:otherwise>
										</xsl:choose>														
									</xsl:otherwise>
								</xsl:choose>
								<ctl:message></ctl:message>
							</xsl:for-each>
						</xsl:for-each>
				
					</xsl:otherwise>
				</xsl:choose>
				
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingEventTimeData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>	
			<ctl:assertion>The time value(s) in the response data fall within the requested eventTime.</ctl:assertion>
			<ctl:comment>Check the time value(s) in the response data fall within the requested eventTime.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the time values in the response data fall within the requested eventTime.  If no eventTime is specified, then any data from any time period matching the other request parameters must be returned.  If the requested eventTime range falls outside of the advertised eventTime range and overlaps the advertised event time range, then the data returned should fall within the advertised eventTime range for the requested offering.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingEventTimeData</ctl:link>
			<ctl:code>	

				<xsl:choose>
					<xsl:when test="not(sosFunctions:filterTM_During($capabilitiesDocument))">
						<ctl:message select="'Temporal operator &quot;TM_During&quot; is not supported by this implementation.  Test will be skipped.'"/>							
					</xsl:when>
					<xsl:otherwise>					
			
						<ctl:message select="''"/>
						<ctl:message select="'A GetObservation request will be made for each offering advertised in the capabilities document'"/>
						<ctl:message select="''"/>

						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
						<xsl:variable name="offeringId" select="."/>
							<ctl:message select="concat('Offering: ', $offeringId)"/>
							<xsl:variable name="observedProperty" select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
							<ctl:message select="concat('Observed Property: ', $observedProperty)"/>							
							<xsl:choose>
								<xsl:when test="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId) = ''
											 or sosFunctions:endTimePosition($capabilitiesDocument, $offeringId) = ''">	
									<ctl:message select="'This offering does not have a begin and end time.'"/>
									<ctl:message select="concat('Skipping the offering &quot;', $offeringId, '&quot;')"/>
								</xsl:when>
								<xsl:otherwise>				
									<!--divide offering time range into thirds and query each third -->								
									<xsl:variable name="beginPosition" select="xsd:dateTime(sosFunctions:dateTimeFromISO(sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)))"/>
									<xsl:variable name="endPosition" select="xsd:dateTime(sosFunctions:dateTimeFromISO(sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)))"/>																	
									<xsl:variable name="thirdOfSeconds" select="format-number(sosFunctions:total-seconds-from-duration($endPosition - $beginPosition) div 3, '#')"/>
									<xsl:variable name="firstThirdPosition" select="$beginPosition + xsd:dayTimeDuration(sosFunctions:dayTimeDurationFromSeconds($thirdOfSeconds))"/>															
									<xsl:variable name="secondThirdPosition" select="$firstThirdPosition + xsd:dayTimeDuration(sosFunctions:dayTimeDurationFromSeconds($thirdOfSeconds))"/>
									<!-- start a month before and a month after range, to ensure that service handles times ranges that overlap the boundaries-->
									<xsl:variable name="firstStartPosition" select="$beginPosition - xsd:yearMonthDuration('P0Y1M')"/>									
									<xsl:variable name="lastEndPosition" select="$endPosition + xsd:yearMonthDuration('P0Y1M')"/>									
									<!--<ctl:message select="concat($thirdOfSeconds, ' seconds')"/>-->
									<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
										<xsl:variable name="responseFormat" select="."/>	
										<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>

										<!-- test querying a date range not in the advertised range -->
										<xsl:variable name="tooOldBeginPosition" select="xsd:dateTime(sosFunctions:dateTimeFromISO($beginPosition)) - xsd:yearMonthDuration('P1Y2M')"/>					
										<xsl:variable name="tooOldEndPosition" select="xsd:dateTime(sosFunctions:dateTimeFromISO($beginPosition)) - xsd:yearMonthDuration('P1Y0M')"/>				
										<ctl:message select="' '"/>
										<ctl:message select="'Making a GetObservation request with an eventTime that is before the earliest advertised beginPosition'"/>	
										<ctl:message select="'SOS should return an empty set of observations'"/>
										<ctl:message select="concat('Begin position: ', $tooOldBeginPosition)"/>
										<ctl:message select="concat('End position: ', $tooOldEndPosition)"/>
										<xsl:variable name="getObservationTooOld">
											<xsl:copy-of select="sosFunctions:getObservationByTimePeriod
																($postURL, 
																$getObservationVersion, 
																$offeringId, 
																$tooOldBeginPosition, 
																$tooOldEndPosition, 
																$observedProperty, 
																$responseFormat,
																sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
										</xsl:variable>		

										<xsl:choose>								
											<xsl:when test="not($getObservationTooOld/*)">							
												<ctl:message>Response failed schema validation.</ctl:message>
												<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
												<ctl:fail/>
											</xsl:when>		
											<xsl:when test="$getObservationTooOld//om:member[@xlink:href!='urn:ogc:def:nil:OGC:inapplicable']">
												<ctl:message select="'Failure, member element should be &quot;urn:ogc:def:nil:OGC:inapplicable&quot;'"/>
												<ctl:message select="concat('Returned member is: &quot;',$getObservationTooOld//om:member[@xlink:href!='urn:ogc:def:nil:OGC:inapplicable']/@xlink:href, '&quot;')"/> 
												<ctl:fail/>
											</xsl:when>
											<xsl:otherwise>		
												<ctl:message select="concat('member: ', $getObservationTooOld//om:member/@xlink:href)"/>
												<ctl:message>OK</ctl:message>
											</xsl:otherwise>
										</xsl:choose>		
										
										<!-- first third -->
										<ctl:message select="concat('Making getObservation request for the range ', $firstStartPosition,' to ', $firstThirdPosition)"/>
											<xsl:variable name="getObservation1">							
												<xsl:copy-of select="sosFunctions:getObservationByTimePeriod
																			($postURL, 
																			$getObservationVersion, 
																			$offeringId, 
																			$firstStartPosition, 
																			$firstThirdPosition, 
																			$observedProperty, 
																			$responseFormat,
																			sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											</xsl:variable>						
											<xsl:choose>								
												<xsl:when test="not($getObservation1/*)">							
													<ctl:message>Response failed schema validation.</ctl:message>
													<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
													<ctl:fail/>
												</xsl:when>																							
												<xsl:otherwise>		
													<xsl:for-each select="$getObservation1//om:ObservationCollection//om:member//om:samplingTime">	
														<xsl:if test="sosFunctions:sampleTimeIsInRange(.,$firstStartPosition, $firstThirdPosition)='false'">
															<ctl:message select="'Sample time for an observation member does not fall within the requested range.'"/>
															<ctl:message select="."/>
															<ctl:fail/>
														</xsl:if>													
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>		
											<xsl:variable name="numObservations1" select="xsd:integer(sosFunctions:numberOfObservations($getObservation1))"/>

										<!-- middle third -->
										<ctl:message select="concat('Making getObservation request for the range ', $firstThirdPosition,' to ', $secondThirdPosition)"/>
											<xsl:variable name="getObservation2">							
												<xsl:copy-of select="sosFunctions:getObservationByTimePeriod
																			($postURL, 
																			$getObservationVersion, 
																			$offeringId, 
																			$firstThirdPosition, 
																			$secondThirdPosition, 
																			$observedProperty, 
																			$responseFormat,
																			sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											</xsl:variable>						
											<xsl:choose>								
												<xsl:when test="not($getObservation2/*)">							
													<ctl:message>Response failed schema validation.</ctl:message>
													<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
													<ctl:fail/>
												</xsl:when>																							
												<xsl:otherwise>		
													<xsl:for-each select="$getObservation2//om:ObservationCollection//om:member//om:samplingTime">												
															<xsl:if test="sosFunctions:sampleTimeIsInRange(.,$firstThirdPosition, $secondThirdPosition)='false'">
																<ctl:message select="'Sample time for an observation memebr does not fall within the requested range.'"/>
																<ctl:message select="."/>
																<ctl:fail/>
															</xsl:if>													
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>		
											<xsl:variable name="numObservations2" select="xsd:integer(sosFunctions:numberOfObservations($getObservation2))"/>

										<!-- last third -->
										<ctl:message select="concat('Making getObservation request for the range ', $secondThirdPosition,' to ', $lastEndPosition)"/>
											<xsl:variable name="getObservation3">							
												<xsl:copy-of select="sosFunctions:getObservationByTimePeriod
																			($postURL, 
																			$getObservationVersion, 
																			$offeringId, 
																			$secondThirdPosition, 
																			$lastEndPosition, 
																			$observedProperty, 
																			$responseFormat,
																			sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											</xsl:variable>						
											<xsl:choose>								
												<xsl:when test="not($getObservation3/*)">							
													<ctl:message>Response failed schema validation.</ctl:message>
													<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
													<ctl:fail/>
												</xsl:when>																							
												<xsl:otherwise>		
													<xsl:for-each select="$getObservation3//om:ObservationCollection//om:member//om:samplingTime">												
															<xsl:if test="sosFunctions:sampleTimeIsInRange(.,$secondThirdPosition, $lastEndPosition)='false'">
																<ctl:message select="'Sample time for an observation memebr does not fall within the requested range.'"/>
																<ctl:message select="."/>
																<ctl:fail/>
															</xsl:if>													
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>		
											<xsl:variable name="numObservations3" select="xsd:integer(sosFunctions:numberOfObservations($getObservation3))"/>
											<xsl:if test="$numObservations1 + $numObservations2 + $numObservations3 = 0">									
												<ctl:message select="'There were no observations returned in an any of the 3 responses.'"/>
												<ctl:fail/>
											</xsl:if>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>				
				
					</xsl:otherwise>
				</xsl:choose>				
				
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingFeatureOfInterestData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>The featureOfInterest value(s) in the response match or fall within the spatial extent identified in the featureOfInterest value specified in the request.</ctl:assertion>
			<ctl:comment>Check the featureOfInterest value(s) in the response match or fall within the spatial extent identified in the featureOfInterest value specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the featureOfInterest values in the response data match the requested featureOfInterest for a named gml feature or fall within the requested spatial extents for a spatially defined featureOfInterest">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingFeatureOfInterestData</ctl:link>
			<ctl:code>
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each featureOfInterest advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					
					<xsl:variable name="beginPosition" select="sosFunctions:beginTimePosition($capabilitiesDocument, $offeringId)"/>
					<xsl:variable name="endPosition" select="sosFunctions:endTimePosition($capabilitiesDocument, $offeringId)"/>	
					<xsl:choose>
						<xsl:when test="$beginPosition = '' or $endPosition=''">
							<ctl:message select="'Indeterminate or undefined time period.'"/>
							<ctl:message select="concat('Skipping the offering &quot;', $offeringId, '&quot;')"/>
						</xsl:when>
						<xsl:otherwise>
					
							<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
								<xsl:variable name="responseFormat" select="."/>	
								<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
								<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:featureOfInterest/@xlink:href">
									<xsl:variable name="featureOfInterest" select="."/>
									<ctl:message select="concat('Testing featureOfInterest: ', $featureOfInterest )"/>
									<xsl:variable name="getObservation">
										<ctl:request>
											<ctl:url>
												<xsl:value-of select="$postURL"/>
											</ctl:url>
											<ctl:method>post</ctl:method>
											<ctl:body>								
												<GetObservation 
													xmlns="http://www.opengis.net/sos/1.0" 
													xmlns:ows="http://www.opengis.net/ows/1.1" 
													xmlns:gml="http://www.opengis.net/gml" 
													xmlns:ogc="http://www.opengis.net/ogc" 
													xmlns:om="http://www.opengis.net/om/1.0" 
													xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
													xsi:schemaLocation="http://www.opengis.net/sos/1.0
													http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
													service="SOS"
												>
													<xsl:attribute name="version">
														<xsl:value-of select="$getObservationVersion"/>
													</xsl:attribute>									
													<offering>
														<xsl:value-of select="$offeringId"/>
													</offering>
													<observedProperty>
														<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
													</observedProperty>
													<featureOfInterest>
														<ObjectID>
															<xsl:value-of select="$featureOfInterest"/>
														</ObjectID>
													</featureOfInterest>											
													<responseFormat>
														<xsl:value-of select="$responseFormat"/>
													</responseFormat>											
												</GetObservation>						
											</ctl:body>	
											
											<ctl:call-function name="sosFunctions:xmlValidatingParser">											
												<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
											</ctl:call-function>
										
										</ctl:request>							 														
									</xsl:variable>			

									<xsl:choose>
										<!-- check for valid schema or missing response-->
										<xsl:when test="not($getObservation/*)">							
											<ctl:message>Response failed schema validation.</ctl:message>
											<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
											<ctl:fail/>
										</xsl:when>
										<!-- just check that there exists an attribute with a value of the feature ID -->
										<xsl:when test="not($getObservation//om:ObservationCollection//om:member//om:featureOfInterest//@*=$featureOfInterest)">
											<ctl:message select="'Failure, the requested feature was not returned.'"/>
											<ctl:fail/>
										</xsl:when>
										<xsl:otherwise>
											<ctl:message select="'OK'"/>
										</xsl:otherwise>							
									</xsl:choose>	
								</xsl:for-each>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultData.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="compareOperatorElement"/>
			<ctl:param name="exceptionReportSchema"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>If a valid filter value is supplied in the result parameter of the request, then the response O &amp; M data is valid for that filter.</ctl:assertion>
			<ctl:comment>Check that if a valid filter value is supplied in the result parameter of the request, then the response O &amp; M data is valid for that filter.  Pass if response O &amp; M data is valid for the filter when supplied a valid filter; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that OM response data is valid for the filter contained in the result parameter of the request, if a result parameter is specified.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingResultData</ctl:link>
			<ctl:code>
				<xsl:choose>
					<xsl:when test="string($compareOperatorElement)=''">
						<ctl:message>No appropriate operator (EqualTo) for this test could be found.  Test will not be run.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="'Making GetObservation request with a valid &quot;result&quot; parameter'"/>		
						<ctl:message select="concat('Offering: &quot;', $offeringId, '&quot;')"/>						
						<ctl:message select="concat('Using the comparison operator &quot;', $compareOperatorElement, '&quot;')"/>
						<ctl:message select="concat('and the property &quot;', $observedProperty, '&quot;')"/>
						
						<xsl:variable name="requestBody">
						
							<GetObservation 
								xmlns="http://www.opengis.net/sos/1.0" 
								xmlns:ows="http://www.opengis.net/ows/1.1" 
								xmlns:gml="http://www.opengis.net/gml" 
								xmlns:ogc="http://www.opengis.net/ogc" 
								xmlns:om="http://www.opengis.net/om/1.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
								xsi:schemaLocation="http://www.opengis.net/sos/1.0
									http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
								service="SOS"
							>
								<xsl:attribute name="version">
									<xsl:value-of select="$getObservationVersion"/>
								</xsl:attribute>									
								<offering>
									<xsl:value-of select="$offeringId"/>
								</offering>
								<observedProperty>
									<xsl:value-of select="$observedProperty"/>
								</observedProperty>	
								<result>
									<xsl:element name="{$compareOperatorElement}">										
										<ogc:PropertyName>
											<xsl:value-of select="$observedProperty"/>
										</ogc:PropertyName>
										<ogc:Literal>700</ogc:Literal>
									</xsl:element>									
								</result>
								<responseFormat>
									<xsl:value-of select="$responseFormat"/>
								</responseFormat>	
							</GetObservation>
												
						</xsl:variable>
						
						<xsl:variable name="getObservation">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$postURL"/>
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>								
									<xsl:copy-of select="$requestBody"/>
								</ctl:body>	
															
								<ctl:call-function name="sosFunctions:xmlValidatingParser">												
									<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
								</ctl:call-function>						
								
							</ctl:request>							 														
						</xsl:variable>	
				
						<xsl:choose>
							<!-- check for valid schema or missing response-->
							<xsl:when test="not($getObservation/*)">							
								<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
								<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
								<ctl:fail/>
							</xsl:when>						
							<!-- looks good -->
							<xsl:otherwise>
								<ctl:message>OK</ctl:message>
							</xsl:otherwise>
						</xsl:choose>	
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseFormatData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion> The format of the response data matches the format supplied in the responseFormat parameter of the request.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the format supplied in the responseFormat parameter of the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested format supplied in the responseFormat parameter.  If the requested responseFormat is TML, then the response will be an O &amp; M document with a link to the TML stream.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingResponseFormatData</ctl:link>
			<ctl:code>				<!--Response Format is per offering-->
				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="'****'"/>
						<ctl:message select="concat('Making GetObservation request with a valid &quot;responseFormat&quot; parameter of: ', $responseFormat, '   ...')"/>
						<xsl:variable name="getObservation">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$postURL"/>
								</ctl:url>
								<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
												http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering><xsl:value-of select="$offeringId"/></offering>
											<observedProperty>
													<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>										
										</GetObservation>						
									</ctl:body>	
																
								<ctl:call-function name="sosFunctions:xmlValidatingParser">											
									<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
								</ctl:call-function>														
								
							</ctl:request>							 														
						</xsl:variable>		

						<xsl:choose>
							<!-- check for valid schema or missing response-->
							<xsl:when test="not($getObservation/*)">							
								<ctl:message>Response failed schema validation.</ctl:message>
								<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
								<ctl:message select="concat('Response is NOT a valid ', $responseFormat, ' document.')"/>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>								
								<ctl:message select="concat('Response is a valid ', $responseFormat, ' document.')"/>
								<ctl:message>OK</ctl:message>
							</xsl:otherwise>
						</xsl:choose>					
					</xsl:for-each>		
				</xsl:for-each>		
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->		
		
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultModel.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>The format of the response data matches the requested resultModel.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the requested resultModel.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested resultModel">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingResultModel</ctl:link>
			<ctl:code>				
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each resultModel advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:resultModel">
							<xsl:variable name="resultModel" select="."/>
							<ctl:message select="concat('Testing resultModel: ', $resultModel )"/>
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
											http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering>
												<xsl:value-of select="$offeringId"/>
											</offering>
											<observedProperty>
												<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>	
											<resultModel>
												<xsl:value-of select="$resultModel"/>
											</resultModel>											
										</GetObservation>						
									</ctl:body>	
									
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
									</ctl:call-function>
								
								</ctl:request>							 														
							</xsl:variable>			

							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>
								
								<xsl:otherwise>
								
									<xsl:for-each select="distinct-values($getObservation//om:ObservationCollection//om:member/name(*))">
										<xsl:variable name="thisResultModel" select="substring-after(string(.), ':')"/>
										<xsl:choose>
											<xsl:when test="not($thisResultModel = $resultModel)">													
												<ctl:message>
													<xsl:value-of select="concat('Invalid resultModel: ', $thisResultModel)"/>
												</ctl:message>							
												<ctl:fail/>
											</xsl:when>
											
											<xsl:otherwise>
												<xsl:message select="concat('Result model in response is OK: ', $thisResultModel)"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:otherwise>
							
							</xsl:choose>	
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseMode.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>The format of the response data matches the requested responseMode.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the requested responseMode.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested responseMode.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.GetObservation-ResponseMatchingResponseMode</ctl:link>
			<ctl:code>				<!-- response mode is per offering -->
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each responseMode advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')]">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseMode">
							<xsl:variable name="responseMode" select="."/>
							<ctl:message select="concat('Testing responseMode: ', $responseMode )"/>
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
											http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering>
												<xsl:value-of select="$offeringId"/>
											</offering>
											<observedProperty>
												<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>	
											<responseMode>
												<xsl:value-of select="$responseMode"/>
											</responseMode>											
										</GetObservation>						
									</ctl:body>	
	
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat)"/>
									</ctl:call-function>
								
								</ctl:request>							 														
							</xsl:variable>			

							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>
								
								<xsl:otherwise>
								
									<xsl:for-each select="distinct-values($getObservation//om:ObservationCollection//om:member/name(*))">
										<xsl:variable name="thisresponseMode" select="substring-after(string(.), ':')"/>
										<xsl:choose>
											<xsl:when test="not($thisresponseMode = $responseMode)">													
												<ctl:message>
													<xsl:value-of select="concat('Invalid responseMode: ', $thisresponseMode)"/>
												</ctl:message>							
												<ctl:fail/>
											</xsl:when>
											
											<xsl:otherwise>
												<xsl:message select="concat('Response Mode in response is OK: ', $thisresponseMode)"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:otherwise>
							
							</xsl:choose>	
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
		
</ctl:package>
