<?xml version="1.0" encoding="utf-8"?>

<ctl:package
 xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:ows="http://www.opengis.net/ows/1.1"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:sos="http://www.opengis.net/sos/1.0"
 xmlns:om="http://www.opengis.net/om/1.0"
 xmlns:ogc="http://www.opengis.net/ogc" 
>


	<ctl:function name="sosFunctions:exceptionElement">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the Exception element of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:copy-of select="$exceptionResponse//ows:ExceptionReport/ows:Exception" />
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:exceptionCode">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the @exceptionCode attribute of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="sosFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@exceptionCode" />
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:exceptionCodeLocator">
		<ctl:param name="exceptionResponse">The exception repsonse</ctl:param>
		<ctl:description>Return the @locator attribute of an ows:ExceptionReport </ctl:description>
		<ctl:code>
			<xsl:variable name="exceptionElement" select="sosFunctions:exceptionElement($exceptionResponse)"/>
			<xsl:value-of select="$exceptionElement/@locator" />
		</ctl:code>
	</ctl:function>

    <ctl:function name="sosFunctions:getExceptionInfo">
        <ctl:param name="exceptionReport">The exception report</ctl:param>
        <ctl:return>The Exception Code and Locator of an exception report</ctl:return>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:value-of select="concat('Exception Report (exceptionCode, locator):  ',$exceptionCodeValue,',',$locatorValue)" />
        </ctl:code>
    </ctl:function>
	
    <!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="sosFunctions:checkExceptionReport">
        <ctl:param name="exceptionReport">The exception report to check</ctl:param>
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param>
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param>
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
            <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
            <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
            <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
            <xsl:choose>
                <xsl:when test="$locatorToCheck='*'">
                    <xsl:value-of select="($exceptionCodeToCheck=$exceptionCodeValue)" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="($exceptionCodeToCheck=$exceptionCodeValue) and (contains(lower-case(string($locatorValue)), lower-case($locatorToCheck)))" />
                </xsl:otherwise>
            </xsl:choose>
        </ctl:code>
    </ctl:function>
    
	
    <ctl:function name="sosFunctions:dateTimeFromISO">
        <ctl:param name="dateString"></ctl:param>
		<ctl:description>Convert a valid ISO 8601 date time to a valid XSL datetime. 
						 It is assumed that dateString has already passed "sosFunctions:isValidDate".
						 dateString is assumed to at least have a year month and day
		</ctl:description>
        <ctl:code>
			<xsl:variable name="dateStringNoSpace" select="replace(normalize-space($dateString), ' ', 'T')"/>	
			<xsl:variable name="newDateString" select="replace($dateString, 'Z', '')"/>			
			<xsl:choose>
				<xsl:when test="contains($newDateString, '.')"> <!-- if it passed validation and has a "." in it, it should be fine -->				
					<xsl:value-of select="xsd:dateTime($newDateString)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="appendString" select="'T00:00:00+00:00'"/>
					<xsl:variable name="newDateStringLngth" select="string-length($newDateString)"/>
					<xsl:variable name="appendStringLength" select="string-length($appendString)"/>
					<xsl:variable name="totalStringLength"	select="25"/>
					<xsl:variable name="substringToAppend" select="substring($appendString, $appendStringLength - ($totalStringLength - $newDateStringLngth) + 1)"/>
					<xsl:variable name="returnValue" select="concat($newDateString, $substringToAppend)"/>			
					<xsl:value-of select="xsd:dateTime($returnValue)"/>
				</xsl:otherwise>
			</xsl:choose>
			
        </ctl:code>
    </ctl:function>
	

    <ctl:function name="sosFunctions:isValidDate">
        <ctl:param name="dateString">The date to be tested</ctl:param>
		<ctl:description>Check whether a date is a valid ISO 8601 date with at least a day included, or one of the valid constants.</ctl:description>
        <ctl:code>	
			<xsl:variable name="isoDateFormatRegex" select="'^([0-9]{4})(-([0-9]{2})(-([0-9]{2})(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:([0-9]{2}))?))?)?))$'"/>
			<xsl:variable name="validDateRegex" select="'^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$'"/>
			<xsl:variable name="datePortion" select="substring($dateString, 1, 10)"/>						
			<xsl:value-of select="(matches($dateString, $isoDateFormatRegex) 
								and matches($datePortion, $validDateRegex))"/>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:isValidTimePeriodPosition">
		<ctl:param name="timePosition">The time position to be tested</ctl:param>
		<ctl:description>Determine whether a time position is valid</ctl:description>
		<ctl:code>
			<xsl:variable name="indeterminateValue" select="$timePosition//@indeterminatePosition"/>
				<xsl:choose>
					<xsl:when test="$timePosition=''">
						<xsl:value-of select="$indeterminateValue = 'now' or $indeterminateValue = 'unknown'"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="((not($indeterminateValue) or $indeterminateValue = 'before' or $indeterminateValue = 'after')
												and
												sosFunctions:isValidDate($timePosition)='true')"/>
					</xsl:otherwise>
				</xsl:choose>				
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:timeToCompare">
		<ctl:param name="timePosition">The time position to be tested</ctl:param>
		<ctl:description>If indeterminate Position = NOW, set to current time, else leave it alone</ctl:description>
		<ctl:code>
			<xsl:variable name="indeterminateValue" select="$timePosition//@indeterminatePosition"/>
				<xsl:choose>
					<xsl:when test="$indeterminateValue='now'">
						<xsl:value-of select="current-dateTime()"/>
					</xsl:when>
					<xsl:otherwise>
						<!--<xsl:value-of select="current-dateTime()"/>-->
						<xsl:value-of select="$timePosition"/>
					</xsl:otherwise>
				</xsl:choose>				
		</ctl:code>
	</ctl:function>
	
	<!-- perhaps this could use the sos schema to instead of hard coded values -->
   <ctl:function name="sosFunctions:isValidOperationName">
        <ctl:param name="operationName">The name of the SOS operation</ctl:param>
        <ctl:return>True/False depending on whether the name is one of the valid SOS operations.</ctl:return>
        <ctl:description>Determines whether the operation name is valid</ctl:description>
        <ctl:code>
			<xsl:value-of select="($operationName='GetCapabilities'
											or $operationName='DescribeFeatureType'
											or $operationName='DescribeSensor'
											or $operationName='DescribeObservationType'
											or $operationName='DescribeResultModel'
											or $operationName='GetObservation'
											or $operationName='GetObservationById'
											or $operationName='GetResult'
											or $operationName='GetFeatureOfInterest'
											or $operationName='GetFeatureOfInterestTime'
											or $operationName='InsertObservation'
											or $operationName='RegisterSensor')"/>																					
        </ctl:code>
    </ctl:function>	
	
	<!-- perhaps this could use the sos schema to instead of hard coded values -->
   <ctl:function name="sosFunctions:isValidResultModel">
        <ctl:param name="resultModel">The name of the resultModel</ctl:param>
        <ctl:return>True/False depending on whether the resultModel is a member of the om:Observation substitution group.</ctl:return>
        <ctl:description>Determines whether the resultModel is valid</ctl:description>
        <ctl:code>
			<xsl:variable name="resultModelName" select="substring-after($resultModel, ':')"/>
			<xsl:value-of select="($resultModelName='Observation'
								or $resultModelName='PointCoverageObservation'
								or $resultModelName='DiscreteCoverageObservation'
								or $resultModelName='TimeSeriesObservation'
								or $resultModelName='ElementCoverageObservation'
								or $resultModelName='DiscreteCoverageObs'
								or $resultModelName='PointCoverageObs'
								or $resultModelName='TimeSeriesObs'
								or $resultModelName='Measurement'
								or $resultModelName='CategoryObservation'
								or $resultModelName='CountObservation'
								or $resultModelName='TruthObservation'
								or $resultModelName='GeometryObservation'
								or $resultModelName='TemporalObservation'
								or $resultModelName='ComplexObservation')"/>																					
        </ctl:code>
    </ctl:function>

<!--
    <ctl:function name="sosFunctions:isValidProcedureURN">
        <ctl:param name="urnString">The URN to validate</ctl:param>
        <ctl:return>True/False depending on whether or not the URN is valid</ctl:return>
        <ctl:description>Determines if a procedure URN is valid</ctl:description>
        <ctl:code>
				<xsl:value-of select="(matches($urnString,'^urn:ogc(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+$', 'i'))"/>								
        </ctl:code>
    </ctl:function>	
-->

    <ctl:function name="sosFunctions:isValidURN">
        <ctl:param name="urnString">The URN to validate</ctl:param>
        <ctl:return>True/False depending on whether or not the URN is valid</ctl:return>
        <ctl:description>Determines if a procedure URN is valid</ctl:description>
        <ctl:code>
			<xsl:variable name="urnRegexNoVersion" select="'^urn:ogc(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+$'"/>
			<xsl:variable name="urnRegexWithVersion" select="'^urn:ogc(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+:(([0-9])+(\.([0-9]+))*)*(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+$'"/>
			<xsl:value-of select="(matches($urnString, $urnRegexNoVersion,'i') or matches($urnString, $urnRegexWithVersion,'i'))"/>	
        </ctl:code>
    </ctl:function>
	

	
    <ctl:function name="sosFunctions:isValidDefinitionURN">
        <ctl:param name="urnString">The URN to validate</ctl:param>
        <ctl:return>True/False depending on whether or not the URN is valid</ctl:return>
        <ctl:description>Determines if a definition URN is valid. Note that the "version" part is optional</ctl:description>
        <ctl:code>
			<xsl:variable name="urnRegexNoVersion" select="'^urn:ogc:def(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+$'"/>
			<xsl:variable name="urnRegexWithVersion" select="'^urn:ogc:def(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+:(([0-9])+(\.([0-9]+))*)*(:(\w|\(|\)|\+|,|-|\.|=|\$|_|!|\*|''|@|;)+)+$'"/>
			<xsl:value-of select="(matches($urnString, $urnRegexNoVersion,'i') or matches($urnString, $urnRegexWithVersion,'i'))"/>							
        </ctl:code>
    </ctl:function>	

	<ctl:function name="sosFunctions:isValidMIMETypeFormat">
		<ctl:param name="responseFormat">The respsonseFormat to validate</ctl:param>
		<ctl:return>True/False depending on whether the input is a valid MIME type based on ows:owsCommon.xsd</ctl:return>
		<ctl:description>Determines if a definition URN is valid</ctl:description>
		<ctl:code>		
			<xsl:choose>
				<xsl:when test="starts-with($responseFormat,'text/xml')">
					<xsl:value-of select="sosFunctions:isValidTextXMLFormat($responseFormat)"/>				
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="(matches($responseFormat,'^(application|audio|image|text|video|message|multipart|model)/.+(;\s*.+=.+)*','i'))"/>
				</xsl:otherwise>
			</xsl:choose>
			<!--xsl:value-of select="(matches($responseFormat,'^text/xml;subtype=.*(OM|TML).*','i'))"/-->
		</ctl:code>
	</ctl:function>	

	<ctl:function name="sosFunctions:isValidTextXMLFormat">
		<ctl:param name="responseFormat">The respsonseFormat to validate</ctl:param>
		<ctl:return>True/False depending on whether the input is a valid MIME type based on ows:owsCommon.xsd</ctl:return>
		<ctl:description>Determines if a definition URN is valid</ctl:description>
		<ctl:code>		
			<xsl:value-of select="(matches($responseFormat,'^text/xml;\s*subtype=&quot;?.+/[0-9].&quot;?','i'))"/>						
		</ctl:code>
	</ctl:function>
	

    <ctl:function name="sosFunctions:isValidResponseMode">
        <ctl:param name="responseMode">The responseMode to validate</ctl:param>
        <ctl:return>True/False depending on whether the responseMode is a qualified name of a member of the om:AbstractObservation substitution group.</ctl:return>
        <ctl:description>Determines whether the responseMode is valid</ctl:description>
        <ctl:code>
			
			<xsl:value-of select="($responseMode = 'inline'
									or $responseMode = 'out-of-band'
									or $responseMode = 'attached'
									or $responseMode = 'resultTemplate')"/>							
									
        </ctl:code>
    </ctl:function>	
	
    <ctl:function name="sosFunctions:operationPostURL">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
        <ctl:param name="operation">The operation for which the URL is reqested</ctl:param>
        <ctl:return>Post URL of given operation</ctl:return>
        <ctl:description>Returns post URL of given operation</ctl:description>
        <ctl:code>
			<xsl:value-of select="$capabilitiesDocument//ows:Operation[@name=$operation]/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>						         
        </ctl:code>
    </ctl:function>	

    <ctl:function name="sosFunctions:operationVersion">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
        <ctl:param name="operation">The operation for which the URL is reqested</ctl:param>
        <ctl:return>Post URL of given operation</ctl:return>
        <ctl:description>Returns post URL of given operation</ctl:description>
        <ctl:code>
			<xsl:value-of select="$capabilitiesDocument//ows:Operation[@name=$operation]/ows:Parameter[@name='version']//ows:AllowedValues/ows:Value | 
								  $capabilitiesDocument//ows:ServiceIdentification//ows:ServiceTypeVersion"/>																
        </ctl:code>
    </ctl:function>	

    <ctl:function name="sosFunctions:describeSensorFirstProcedure">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>        
        <ctl:return>The first procedure for DescribeSensor advertised in the capabilities document</ctl:return>
        <ctl:description>Return a valid procedure for use in calling DescribeSensor</ctl:description>
        <ctl:code>
			<xsl:value-of select="$capabilitiesDocument//sos:ObservationOffering//sos:procedure[1]/@xlink:href"/>																
        </ctl:code>
    </ctl:function>	
		
    <ctl:function name="sosFunctions:describeSensorOutputFormat">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>        
        <ctl:return>The outputFormat for DescribeSensor advertised in the capabilities document</ctl:return>
        <ctl:description>Return a valid outputFormat for use in calling DescribeSensor</ctl:description>
        <ctl:code>
			<xsl:variable name="outputFormat" select="$capabilitiesDocument//ows:Operation[@name='DescribeSensor']//ows:Parameter[@name='outputFormat']//ows:AllowedValues/ows:Value[1]"/>
			<xsl:choose>
				<xsl:when test="not($outputFormat)">
					<xsl:value-of select="'text/xml;subtype=&quot;sensorML/1.0.0&quot;'"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$outputFormat"/>
				</xsl:otherwise>
			</xsl:choose>
        </ctl:code>
    </ctl:function>	
	
	<ctl:function name="sosFunctions:observationOfferingResponseFormat">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:param name="offeringId">The offering Id</ctl:param>        
        <ctl:return>The responseFormat for the ObservationOffering</ctl:return>
        <ctl:description>Return a valid responseFormat for the offering</ctl:description>
        <ctl:code>
			<xsl:value-of select="($capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat[starts-with(.,'text/xml')])[1]"/>
        </ctl:code>
    </ctl:function>

	<ctl:function name="sosFunctions:observationOfferingObservedProperty">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:param name="offeringId">The offering Id</ctl:param>        
        <ctl:return>The first observedProperty for the ObservationOffering</ctl:return>
        <ctl:description>Return a valid responseFormat for the offering</ctl:description>
        <ctl:code>
			<xsl:value-of select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:observedProperty[1]/@xlink:href |
								 $capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:observedProperty[1]//gml:name"/>
        </ctl:code>
    </ctl:function>
	
	 <ctl:function name="sosFunctions:capabilitiesFirstOfferingId">
		<ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>        
        <ctl:return>The id of the first offering in the capbilities document that has valid begin and end times.</ctl:return>        
        <ctl:code>
			<xsl:value-of select="($capabilitiesDocument//sos:ObservationOffering/@gml:id[not(sosFunctions:beginTimePosition($capabilitiesDocument, .) = '' 
									or sosFunctions:endTimePosition($capabilitiesDocument, .) = '')])[1]"/>
        </ctl:code>
    </ctl:function>
	
	<ctl:function name="sosFunctions:schemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filename of schema file</ctl:param>	
		<ctl:code>			
			<xsl:value-of select="concat($schemaRoot, $encoding, '/', $version, '/', $filename)"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:exceptionReportSchemaPath">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="owsVersion">The numeric version of the schema</ctl:param>
		<ctl:code>			
			<xsl:value-of select="sosFunctions:schemaPath($schemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd')"/>
		</ctl:code>
	</ctl:function>

	<!--Validates response against schema-->
	<!-- this function is overloaded, there are two versions -->
	<!-- one version accepts the full path to the schema file as a parameter -->
	<!-- the other constructs the path from parts -->
	<ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaFile">schemaFile</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>						
			<xsl:choose>
				<xsl:when test="starts-with($schemaFile,'http')">
					<parsers:XMLValidatingParser ignoreErrors="false">
					<parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>
					<xsl:if test="$schemaFile='http://schemas.opengis.net/om/1.0.0/om.xsd'">
							<parsers:schema type="url">http://schemas.opengis.net/sampling/1.0.0/sampling.xsd</parsers:schema>						
					</xsl:if>
						<parsers:schemas>
							<parsers:schema type="url">
								<xsl:value-of select="$schemaFile"/>								
							</parsers:schema>							
						</parsers:schemas>
					</parsers:XMLValidatingParser>	
				</xsl:when>
				<xsl:otherwise>
					<parsers:XMLValidatingParser ignoreErrors="false">
						<parsers:schemas>
							<parsers:schema type="resource">../../wfs-1.1.0/resources/xsd/w3c/xmlschema/1.0/XMLSchema.xsd</parsers:schema>						
							<parsers:schema type="file">
								<xsl:value-of select="$schemaFile"/>
							</parsers:schema>						
						</parsers:schemas>
					</parsers:XMLValidatingParser>
				</xsl:otherwise>
			</xsl:choose>				
        </ctl:code>
    </ctl:function>

	
    <ctl:function name="sosFunctions:xmlValidatingParser">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="version">The numeric version of the schema</ctl:param>
		<ctl:param name="encoding">The name of the service or encoding to be used</ctl:param>
		<ctl:param name="filename">Filenam of schema file</ctl:param>
		<ctl:description>Standard CTL XMLValidatingParser</ctl:description>
        <ctl:code>				
			<xsl:variable name="schemaFile" select="sosFunctions:schemaPath($schemaRoot, $version, $encoding, $filename)"/>
			<xsl:copy-of select="sosFunctions:xmlValidatingParser($schemaFile)"/>
        </ctl:code>
    </ctl:function>

	
	<!-- the follwing three functions parse out subtype parts from a mime type -->
	<ctl:function name="sosFunctions:mimeSubtype">
        <ctl:param name="mimeType">The mime type</ctl:param>
		<ctl:code>			
			<xsl:value-of select="replace(substring-after($mimeType, 'subtype='), '&quot;', '')"/>
		</ctl:code>
	</ctl:function>	
	
	<ctl:function name="sosFunctions:mimeTypeSubtypeEncoding">
        <ctl:param name="mimeType">The mime type</ctl:param>
		<ctl:code>			
			<xsl:value-of select="substring-before(sosFunctions:mimeSubtype($mimeType), '/')"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:mimeTypeSubtypeVersion">
        <ctl:param name="mimeType">The mime type</ctl:param>
		<ctl:code>
			<xsl:variable name="unalteredVersion" select="substring-after(sosFunctions:mimeSubtype($mimeType), '/')"/>
			<xsl:choose>
				<xsl:when test="contains(substring-after($unalteredVersion, '.'), '.')">
					<xsl:value-of select="$unalteredVersion"/>
				</xsl:when>
				<xsl:when test="contains(substring-after(concat($unalteredVersion, '.0'), '.'), '.')">
				    <xsl:value-of select="concat($unalteredVersion, '.0')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($unalteredVersion, '.0.0')"/>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>
	

	
	<ctl:function name="sosFunctions:schemaPathFromMimeType">
        <ctl:param name="schemaRoot">The location of the schemas</ctl:param>
		<ctl:param name="mimeType">The mimeType</ctl:param>
		<ctl:code>	
			<xsl:value-of select="sosFunctions:schemaPath($schemaRoot, 
														  sosFunctions:mimeTypeSubtypeVersion($mimeType),
														  sosFunctions:mimeTypeSubtypeEncoding($mimeType),
														  concat(sosFunctions:mimeTypeSubtypeEncoding($mimeType), '.xsd'))"/>
		</ctl:code>
	</ctl:function>	

	
	<ctl:function name="sosFunctions:timePeriod">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:param name="offeringId">The offering id</ctl:param>
		<ctl:code>		
			<xsl:copy-of select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//gml:TimePeriod[1]"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:beginTimePosition">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:param name="offeringId">The offering id</ctl:param>		
		<ctl:code>		
			<xsl:variable name="timePeriod" select="sosFunctions:timePeriod($capabilitiesDocument, $offeringId)"/>	
			<xsl:value-of select="sosFunctions:beginTimePosition($timePeriod)"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:endTimePosition">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:param name="offeringId">The offering id</ctl:param>		
		<ctl:code>		
			<xsl:variable name="timePeriod" select="sosFunctions:timePeriod($capabilitiesDocument, $offeringId)"/>	
			<xsl:value-of select="sosFunctions:endTimePosition($timePeriod)"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:beginTimePosition">
        <ctl:param name="timePeriod">The time period</ctl:param>		
		<ctl:code>		
			<xsl:value-of select="sosFunctions:timeToCompare($timePeriod//gml:beginPosition | $timePeriod//gml:begin/gml:timePosition)"/>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:endTimePosition">
        <ctl:param name="timePeriod">The time period</ctl:param>
		<ctl:code>		
			<xsl:value-of select="sosFunctions:timeToCompare($timePeriod//gml:endPosition | $timePeriod//gml:end/gml:timePosition)"/>
		</ctl:code>
	</ctl:function>
	
	<!-- this may not actually be the number of observations, but I am more interested in whether there are any at all as apposed to the exact number -->
	<ctl:function name="sosFunctions:numberOfObservations">
        <ctl:param name="getObservationResponse">The GetObservationResponse</ctl:param>		
		<ctl:code>					
			<xsl:value-of select="count($getObservationResponse//om:ObservationCollection//om:member//om:observedProperty)"/>
		</ctl:code>
	</ctl:function>
	
	
	<ctl:function name="sosFunctions:total-seconds-from-duration">
		<ctl:param name="duration"/> 
		<ctl:code>
			<xsl:value-of select="$duration div xsd:dayTimeDuration('PT1S')"/>   
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:dayTimeDurationFromSeconds">
		<ctl:param name="seconds"/> 
		<ctl:code>
			<xsl:value-of select="xsd:dayTimeDuration('PT1S') * $seconds"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:sampleTimeIsInRange">
		<ctl:param name="sampleTime"/> 
		<ctl:param name="time1"/> 
		<ctl:param name="time2"/> 
		<ctl:code>
			<xsl:variable name="beginSampleTime" select="sosFunctions:beginTimePosition($sampleTime)"/>
			<xsl:variable name="endSampleTime" select="sosFunctions:endTimePosition($sampleTime)"/>
			<xsl:choose>
				<xsl:when test="$beginSampleTime != '' and (xsd:dateTime(sosFunctions:dateTimeFromISO($beginSampleTime)) &lt; xsd:dateTime($time1))">					
					<xsl:value-of select="'false'"/>
				</xsl:when>
				<xsl:when test="$beginSampleTime != '' and (xsd:dateTime(sosFunctions:dateTimeFromISO($beginSampleTime)) &gt; xsd:dateTime($time2))">
					<xsl:value-of select="'false'"/>
				</xsl:when>
				<xsl:when test="$endSampleTime != '' and (xsd:dateTime(sosFunctions:dateTimeFromISO($endSampleTime)) &lt; xsd:dateTime($time1))">
					<xsl:value-of select="'false'"/>
				</xsl:when>
				<xsl:when test="$endSampleTime != '' and (xsd:dateTime(sosFunctions:dateTimeFromISO($endSampleTime)) &gt; xsd:dateTime($time2))">
					<xsl:value-of select="'false'"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="'true'"/>
				</xsl:otherwise>				
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:filterTM_Equals">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:description>Return the TM_Equals temporal operator, if it exists</ctl:description>
		<ctl:code>		
		<!--xsl:value-of select="($capabilitiesDocument//sos:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator [text()='EqualTo'])[1]"/-->			
		<xsl:value-of select="$capabilitiesDocument//sos:Filter_Capabilities/ogc:Temporal_Capabilities/ogc:TemporalOperators/ogc:TemporalOperator[@name='TM_Equals']"/>								   
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:filterTM_During">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:description>Return the TM_During temporal operator, if it exists</ctl:description>
		<ctl:code>		
		<!--xsl:value-of select="($capabilitiesDocument//sos:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator [text()='EqualTo'])[1]"/-->			
		<xsl:value-of select="$capabilitiesDocument//sos:Filter_Capabilities/ogc:Temporal_Capabilities/ogc:TemporalOperators/ogc:TemporalOperator[@name='TM_During']"/>								   
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:resultComparisonOperator">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:description>Return a comparison operator from the capabilities response that is not Between or NullCheck</ctl:description>
		<ctl:code>		
		<!--xsl:value-of select="($capabilitiesDocument//sos:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator [text()='EqualTo'])[1]"/-->			
		<xsl:value-of select="($capabilitiesDocument//sos:Filter_Capabilities/ogc:Scalar_Capabilities/ogc:ComparisonOperators/ogc:ComparisonOperator [text()!='Between' and text()!='NullCheck'])[1]"/>
		</ctl:code>
	</ctl:function>
	
	<ctl:function name="sosFunctions:resultComparisonOperatorElement">
        <ctl:param name="capabilitiesDocument">The capabilities document</ctl:param>
		<ctl:code>	
			<xsl:variable name="comparisonOperator" select="sosFunctions:resultComparisonOperator($capabilitiesDocument)"/>
			<xsl:choose>
				<xsl:when test="string($comparisonOperator)=''">
					<xsl:value-of select="string('')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat('ogc:PropertyIs', $comparisonOperator)"/>			
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:function>

	<ctl:function name="sosFunctions:describeSensor">
	    <ctl:param name="postURL"></ctl:param>
		<ctl:param name="version"></ctl:param>
		<ctl:param name="procedure"></ctl:param>
		<ctl:param name="outputFormat"></ctl:param>
		<ctl:param name="schemaFile"></ctl:param>	
		<ctl:code>
			<xsl:variable name="describeSensor">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$postURL"/>
					</ctl:url>
					<ctl:method>post</ctl:method>

					<ctl:body>
						<DescribeSensor 								
							service="SOS" 
							xmlns="http://www.opengis.net/sos/1.0" 								
							xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
						>
							<xsl:attribute name="version">
								<xsl:value-of select="$version"/>
							</xsl:attribute>															
							<xsl:attribute name="outputFormat">
								<xsl:value-of select="$outputFormat"/>
							</xsl:attribute>																													
							<procedure>
								<xsl:value-of select="$procedure"/>
							</procedure>
						</DescribeSensor>				
					</ctl:body>				

					<ctl:call-function name="sosFunctions:xmlValidatingParser">
						<ctl:with-param name="schemaFile" select="$schemaFile"/>										
					</ctl:call-function>									

				</ctl:request>	
			</xsl:variable>		
			<xsl:copy-of select="$describeSensor"/>
		</ctl:code>
	</ctl:function>

	
	<ctl:function name="sosFunctions:getObservationByTimePeriod">
	    <ctl:param name="postURL"></ctl:param>
		<ctl:param name="getObservationVersion"></ctl:param>
		<ctl:param name="offeringId"></ctl:param>
		<ctl:param name="beginPosition"></ctl:param>
		<ctl:param name="endPosition"></ctl:param>
		<ctl:param name="observedProperty"></ctl:param>
		<ctl:param name="responseFormat"></ctl:param>	
		<ctl:param name="schemaFile"></ctl:param>	
		<ctl:code>
			<xsl:variable name="getObservation">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$postURL"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:body>								
						<GetObservation 
							xmlns="http://www.opengis.net/sos/1.0" 
							xmlns:ows="http://www.opengis.net/ows/1.1" 
							xmlns:gml="http://www.opengis.net/gml" 
							xmlns:ogc="http://www.opengis.net/ogc" 
							xmlns:om="http://www.opengis.net/om/1.0" 
							xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
							xsi:schemaLocation="http://www.opengis.net/sos/1.0
								http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
							service="SOS"							
						>
							<xsl:attribute name="version">
								<xsl:value-of select="$getObservationVersion"/>
							</xsl:attribute>									
							<offering><xsl:value-of select="$offeringId"/></offering>
							<eventTime>
								<ogc:TM_During>
									<ogc:PropertyName>urn:ogc:data:time:iso8601</ogc:PropertyName>
									<gml:TimePeriod>
										<gml:beginPosition><xsl:value-of select="$beginPosition"/></gml:beginPosition>
										<gml:endPosition><xsl:value-of select="$endPosition"/></gml:endPosition>
									</gml:TimePeriod>
								</ogc:TM_During>
							</eventTime>											
							<observedProperty>
								<xsl:value-of select="$observedProperty"/>
							</observedProperty>
							<responseFormat>
								<xsl:value-of select="$responseFormat"/>
							</responseFormat>										
						</GetObservation>						
					</ctl:body>	
					
					<ctl:call-function name="sosFunctions:xmlValidatingParser">											
						<ctl:with-param name="schemaFile" select="$schemaFile"/>
					</ctl:call-function>					
					
				</ctl:request>							 														
			</xsl:variable>		
			<xsl:copy-of select="$getObservation"/>
		</ctl:code>
	</ctl:function>
	<ctl:function name="sosFunctions:getObservationByTimeInstant">
	    <ctl:param name="postURL"></ctl:param>
		<ctl:param name="getObservationVersion"></ctl:param>
		<ctl:param name="offeringId"></ctl:param>
		<ctl:param name="timePosition"></ctl:param>		
		<ctl:param name="observedProperty"></ctl:param>
		<ctl:param name="responseFormat"></ctl:param>	
		<ctl:param name="schemaFile"></ctl:param>	
		<ctl:code>
			<xsl:variable name="getObservation">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$postURL"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:body>								
						<GetObservation 
							xmlns="http://www.opengis.net/sos/1.0" 
							xmlns:ows="http://www.opengis.net/ows/1.1" 
							xmlns:gml="http://www.opengis.net/gml" 
							xmlns:ogc="http://www.opengis.net/ogc" 
							xmlns:om="http://www.opengis.net/om/1.0" 
							xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
							xsi:schemaLocation="http://www.opengis.net/sos/1.0
								http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" 
							service="SOS"							
						>
							<xsl:attribute name="version">
								<xsl:value-of select="$getObservationVersion"/>
							</xsl:attribute>									
							<offering><xsl:value-of select="$offeringId"/></offering>
							<eventTime>
								<ogc:TM_Equals>
									<ogc:PropertyName>urn:ogc:data:time:iso8601</ogc:PropertyName>
									<gml:TimeInstant>
										<gml:timePosition><xsl:value-of select="$timePosition"/></gml:timePosition>										
									</gml:TimeInstant>
								</ogc:TM_Equals>
							</eventTime>											
							<observedProperty>
								<xsl:value-of select="$observedProperty"/>
							</observedProperty>
							<responseFormat>
								<xsl:value-of select="$responseFormat"/>
							</responseFormat>										
						</GetObservation>						
					</ctl:body>	
					
					<ctl:call-function name="sosFunctions:xmlValidatingParser">											
						<ctl:with-param name="schemaFile" select="$schemaFile"/>
					</ctl:call-function>					
					
				</ctl:request>							 														
			</xsl:variable>		
			<xsl:copy-of select="$getObservation"/>
		</ctl:code>
	</ctl:function>	
</ctl:package>
