/*
 * Sicade - Systèmes intégrés de connaissances pour l'aide à la décision en environnement
 * (C) 2005, Institut de Recherche pour le Développement
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package net.sicade.sie.type.bbox;

// J2SE dependencies
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// Sicade dependencies
import net.sicade.observation.coverage.sql.TreeDepth;


/**
 * Offre à l'utilisateur de configurer la structure de l'arborescence.
 *
 * @version $Id$
 * @author Martin Desruisseaux
 */
final class TreeLayoutChooser extends JPanel implements ActionListener {
    /**
     * Construit un nouveau panneau pour la structure d'arborescence spécifiée.
     */
    public TreeLayoutChooser(final BoundingBox bbox) {
        initComponents();
        int thematicIndex  = Integer.MAX_VALUE;
        int operationIndex = Integer.MAX_VALUE;
        TreeDepth d = null;
        for (int i=0; (d=bbox.next(d))!=null; i++) {
            switch (d) {
                case THEMATIC:   thematicIndex = i; break;
                case PROCEDURE: operationIndex = i; break;
            }
        }
        final JRadioButton orderButton;
        orderButton = (thematicIndex <= operationIndex) ? thematicsFirst : operationsFirst;
        orderButton.setSelected(true);
        thematics  .setSelected( thematicIndex != Integer.MAX_VALUE);
        operations .setSelected(operationIndex != Integer.MAX_VALUE);
        actionPerformed(null); // Pöur mettre à jour l'état des boutons radio.
        operations.addActionListener(this);
        thematics. addActionListener(this);
    }

    /**
     * Appelée automatiquement lorsque l'utilisateur modifie l'état d'une case à cocher.
     * Le groupe "Ordre des éléments" sera activé ou désactivé en conséquence.
     */
    public void actionPerformed(final ActionEvent event) {
        final boolean enabled = (operations.isSelected() && thematics.isSelected());
        orderLabel     .setEnabled(enabled);
        operationsFirst.setEnabled(enabled);
        thematicsFirst .setEnabled(enabled);
    }

    /**
     * Retourne la structure de l'arborescence, en fonction des sélections de l'utilisateur.
     * Le tableau retourner peut contenir des éléments nuls; la méthode
     * {@link BoundingBox#setTreeLayout} saura gérer.
     */
    final TreeDepth[] getTreeLayout() {
        final TreeDepth[] layout = new TreeDepth[2];
        final int operationIndex = operationsFirst.isSelected() ? 0 : 1;
        if (thematics .isSelected()) layout[1 - operationIndex] = TreeDepth.THEMATIC;
        if (operations.isSelected()) layout[    operationIndex] = TreeDepth.PROCEDURE;
        return layout;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JLabel choiceLabel;
        javax.swing.JPanel choicePanel;
        java.awt.GridBagConstraints gridBagConstraints;
        javax.swing.ButtonGroup orderGroup;
        javax.swing.JPanel orderPanel;

        orderGroup = new javax.swing.ButtonGroup();
        choiceLabel = new javax.swing.JLabel();
        choicePanel = new javax.swing.JPanel();
        thematics = new javax.swing.JCheckBox();
        operations = new javax.swing.JCheckBox();
        orderLabel = new javax.swing.JLabel();
        orderPanel = new javax.swing.JPanel();
        thematicsFirst = new javax.swing.JRadioButton();
        operationsFirst = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        choiceLabel.setLabelFor(choicePanel);
        choiceLabel.setText("Afficher les niveaux:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 6);
        add(choiceLabel, gridBagConstraints);

        choicePanel.setLayout(new java.awt.GridLayout(2, 1));

        thematics.setText("Th\u00e9matiques");
        choicePanel.add(thematics);

        operations.setText("Op\u00e9rations");
        choicePanel.add(operations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(choicePanel, gridBagConstraints);

        orderLabel.setLabelFor(orderPanel);
        orderLabel.setText("Ordre des \u00e9l\u00e9ments:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 6);
        add(orderLabel, gridBagConstraints);

        orderPanel.setLayout(new java.awt.GridLayout(2, 1));

        orderGroup.add(thematicsFirst);
        thematicsFirst.setText("Th\u00e9matiques en premier");
        orderPanel.add(thematicsFirst);

        orderGroup.add(operationsFirst);
        operationsFirst.setText("Op\u00e9rations en premier");
        orderPanel.add(operationsFirst);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        add(orderPanel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox operations;
    private javax.swing.JRadioButton operationsFirst;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JCheckBox thematics;
    private javax.swing.JRadioButton thematicsFirst;
    // End of variables declaration//GEN-END:variables
    
}
