/*
 * Sicade - Systèmes intégrés de connaissances pour l'aide à la décision en environnement
 * (C) 2006, Institut de Recherche pour le Développement
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package net.sicade.observation.coverage.sql;

// J2SE dependencies
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.LogRecord;

// Seagis
import net.sicade.observation.Element;
import net.sicade.observation.ConfigurationKey;
import net.sicade.observation.CatalogException;
import net.sicade.observation.sql.Table;
import net.sicade.observation.sql.Database;
import net.sicade.observation.sql.Shareable;
import net.sicade.resources.seagis.Resources;
import net.sicade.resources.seagis.ResourceKeys;

// OpenGIS dependencies
import org.opengis.metadata.extent.GeographicBoundingBox;

// PostGIS Dependencies
import org.postgis.PGbox3d;
import org.postgis.Point;


/**
 * Connexion à la table des étendues géographiques des images.
 *
 * @version $Id$
 * @author Martin Desruisseaux
 * @author Antoine Hnawia
 */
public class GeographicBoundingBoxTable extends Table implements Shareable {
    /**
     * Facteur de tolérance pour la comparaison des limites géographiques.
     */
    private static final double EPSILON = 1E-7;
    
    /**
     * The SQL instruction to use when looking for bounding box. Note that an "INSERT"
     * instruction may be generated by the {@link #addGeographicBoundingBox} method.
     */
    private static final ConfigurationKey SELECT = new ConfigurationKey("GeographicBoundingBoxes:SELECT",
            "SELECT id FROM \"GridGeometries\"\n"       +
            " WHERE \"spatialExtent\"=? \n"             +
            "   AND width=? AND height=? AND depth=?");
    
    /**
     * The SQL instruction to use when looking for bounding box. Note that an "INSERT"
     * instruction may be generated by the {@link #addGeographicBoundingBox} method.
     */
    private static final ConfigurationKey SELECT_JAVADB = new ConfigurationKey("GeographicBoundingBoxes:SELECT",
            "SELECT id FROM \"GridGeometries\"\n"        +
            " WHERE ABS(\"westBoundLongitude\" - ?) <= " + EPSILON  + '\n' +
            "   AND ABS(\"eastBoundLongitude\" - ?) <= " + EPSILON  + '\n' +
            "   AND ABS(\"southBoundLatitude\" - ?) <= " + EPSILON  + '\n' +
            "   AND ABS(\"northBoundLatitude\" - ?) <= " + EPSILON  + '\n' +
            "   AND ABS(\"altitudeMin\" - ?)        <= " + EPSILON  + '\n' +
            "   AND ABS(\"altitudeMax\" - ?)        <= " + EPSILON  + '\n' +
            "   AND width=? AND height=? AND depth=?");
    
    /**
     * The SQL instruction for inserting a new geographic bounding box.
     */
    private static final ConfigurationKey INSERT = new ConfigurationKey("GeographicBoundingBoxes:INSERT",
            "INSERT INTO coverages.\"GridGeometries\"\n"+
            "  (id, \"spatialExtent\",\n"               +
            "       \"CRS\",\n"                         +
            "       width, height, depth)\n"            +
            "  VALUES (?, ?, 'IRD:WGS84(xyt)', ?, ?, ?)");
    
    /**
     * The SQL instruction for inserting a new geographic bounding box.
     */
    private static final ConfigurationKey INSERT_JAVADB = new ConfigurationKey("GeographicBoundingBoxes:INSERT",
            "INSERT INTO \"GridGeometries\"\n" +
            "  (id, \"westBoundLongitude\",\n" +
            "       \"eastBoundLongitude\",\n" +
            "       \"southBoundLatitude\",\n" +
            "       \"northBoundLatitude\",\n" +
            "       \"altitudeMin\",\n"        +
            "       \"altitudeMax\",\n"        +
            "       \"CRS\",\n"                +
            "       width, height, depth)\n"   +
            "  VALUES (?, ?, ?, ?, ?, ?, ?, IRD:WGS84(xyt)', ?, ?, ?)");

    /**
     * Constructs a new {@code GeographicBoundingBoxTable}.
     *
     * @param  connection The connection to the database.
     * @throws SQLException if the table can't be constructed.
     */
    public GeographicBoundingBoxTable(final Database database) throws SQLException {
        super(database);
    }

    /**
     * Retourne l'identifieur de l'étendue géographique et la dimension d'image spécifiées.
     * Si aucun enregistrement n'a été trouvée, alors cette méthode retourne {@code null}.
     *
     * @param  bbox The geographic bounding box.
     * @param  size The image size, in pixels.
     * @throws SQLException if the operation failed.
     */
    public synchronized String getIdentifier(final GeographicBoundingBox bbox, final Dimension size)
            throws SQLException
    {
        PreparedStatement statement = null;
        if (database.BOX3D_POSTGIS) {
            statement = getStatement(getProperty(SELECT));
        } else {
            statement = getStatement(getProperty(SELECT_JAVADB));
        }
        statement.setDouble(1, bbox.getWestBoundLongitude());
        statement.setDouble(2, bbox.getEastBoundLongitude());
        statement.setDouble(3, bbox.getSouthBoundLatitude());
        statement.setDouble(4, bbox.getNorthBoundLatitude());
        if (database.BOX3D_POSTGIS) {
            statement.setInt   (5, size.width);
            statement.setInt   (6, size.height);
            statement.setInt   (7, 1);
        } else {
            /*
             * Dans le cas d'une base JavaDB, on spécifie temporairement les valeurs d'altitudes min
             * et max à 0. On devra par la suite obtenir des valeurs dynamiques.
             */
            statement.setDouble(5, 0.0);
            statement.setDouble(6, 0.0);
            statement.setInt   (7, size.width);
            statement.setInt   (8, size.height);
            statement.setInt   (9, 1);
        }
        String ID = null;
        final ResultSet result = statement.executeQuery();
        while (result.next()) {
            final String nextID = result.getString(1);
            if (ID!=null && !ID.equals(nextID)) {
                final LogRecord record = Resources.getResources(database.getLocale()).
                        getLogRecord(Level.WARNING, ResourceKeys.ERROR_DUPLICATED_GEOMETRY_$1, nextID);
                record.setSourceClassName("GeographicBoundingBoxTable");
                record.setSourceMethodName("getIdentifier");
                Element.LOGGER.log(record);
            } else {
                ID = nextID;
            }
        }
        result.close();
        return ID;
    }

    /**
     * Ajoute une entrée pour l'étendue géographique et la dimension d'image spécifiée.
     */
    public synchronized void addEntry(final String          identifier,
                                      final GeographicBoundingBox bbox,
                                      final Dimension             size)
            throws CatalogException, SQLException
    {
        PreparedStatement statement = null;
        if (database.BOX3D_POSTGIS) {
            PGbox3d box3d = new PGbox3d(
                    new Point(bbox.getWestBoundLongitude(), bbox.getEastBoundLongitude(), 0.0),
                    new Point(bbox.getSouthBoundLatitude(), bbox.getNorthBoundLatitude(), 0.0));
            statement = getStatement(getProperty(INSERT));
            statement.setString(1, identifier);
            statement.setString(2, box3d.getValue());
            statement.setInt   (3, size.width);
            statement.setInt   (4, size.height);
            statement.setInt   (5, 1);
        } else {
            statement = getStatement(getProperty(INSERT_JAVADB));
            statement.setString(1, identifier);
            statement.setDouble(2, bbox.getWestBoundLongitude());
            statement.setDouble(3, bbox.getEastBoundLongitude());
            statement.setDouble(4, bbox.getSouthBoundLatitude());
            statement.setDouble(5, bbox.getNorthBoundLatitude());
            statement.setDouble(6, 0.0);
            statement.setDouble(7, 0.0);
            statement.setInt   (8, size.width);
            statement.setInt   (9, size.height);
            statement.setInt   (10, 1);
        }
        if (statement.executeUpdate() != 1) {
            throw new CatalogException("L'étendue géographique n'a pas été ajoutée.");
        }
    }
}
