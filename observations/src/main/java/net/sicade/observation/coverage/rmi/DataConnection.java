/*
 * Sicade - Systèmes intégrés de connaissances pour l'aide à la décision en environnement
 * (C) 2005, Institut de Recherche pour le Développement
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package net.sicade.observation.coverage.rmi;

// J2SE dependencies
import java.util.Set;
import java.util.List;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.io.IOException;
import java.sql.SQLException;

// OpenGIS dependencies
import org.opengis.coverage.Coverage;
import org.opengis.spatialschema.geometry.Envelope;
import org.opengis.spatialschema.geometry.DirectPosition;
import org.opengis.metadata.extent.GeographicBoundingBox;
import org.opengis.referencing.crs.CoordinateReferenceSystem;

// Sicade dependencies
import net.sicade.util.DateRange;
import net.sicade.observation.CatalogException;
import net.sicade.observation.coverage.Series;
import net.sicade.observation.coverage.Operation;
import net.sicade.observation.coverage.CoverageReference;


/**
 * Connexion vers les données environnementales. Cette interface permet de voir les données comme
 * une matrice tri-dimensionnelle, et d'évaluer ses valeurs sans nécessairement transférer des
 * images via le réseau. En effet, cette interface peut être utilisée dans le contexte des RMI
 * (<cite>Remote Method Invocation</cite>), auquel cas le travail (chargement des images, calculs,
 * <cite>etc.</cite>) est effectué sur le serveur et seul le résultat est transféré sur le réseau.
 *
 * @version $Id$
 * @author Martin Desruisseaux
 */
public interface DataConnection extends Remote {
    /**
     * Retourne le système de référence des coordonnées selon lequel seront exprimées
     * l'{@linkplain #getEnvelope enveloppe}, les {@linkplain #evaluate coordonnées
     * des valeurs}, <cite>etc.</cite>
     *
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    CoordinateReferenceSystem getCoordinateReferenceSystem() throws RemoteException;

    /**
     * Retourne l'enveloppe spatio-temporelle des données.
     *
     * @throws CatalogException si la base de données n'a pas pu être interrogée.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    Envelope getEnvelope() throws CatalogException, RemoteException;

    /**
     * Retourne la partie géographique de l'{@linkplain #getEnvelope enveloppe} des données.
     *
     * @throws CatalogException si la base de données n'a pas pu être interrogée.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    GeographicBoundingBox getGeographicBoundingBox() throws CatalogException, RemoteException;

    /**
     * Retourne la partie temporelle de l'{@linkplain #getEnvelope enveloppe} des données.
     *
     * @throws CatalogException si la base de données n'a pas pu être interrogée.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    DateRange getTimeRange() throws CatalogException, RemoteException;

    /**
     * Retourne la valeur d'une bande à une position interpolée dans l'ensemble des images de cette
     * table. L'ensemble des données est traité comme une matrice tri-dimensionnelle. La coordonnée
     * doit être exprimée selon le {@linkplain #getCoordinateReferenceSystem système de référence
     * des coordonnées de la table}. Ces coordonnées sont habituellement (mais pas obligatoirement):
     * <p>
     * <ul>
     *   <li>La longitude, en degrés décimaux par rapport au méridien de Greenwich</li>
     *   <li>La latitude, en degrés décimaux</li>
     *   <li>Le temps, en nombre de jours depuis le 1er janvier 1950 00:00 UTC.</li>
     * </ul>
     * <p>
     * La signature de cette méthode (à base de types primitifs seulement) vise à réduire les temps
     * de transfert sur le réseau dans le contexte des appels RMI.
     *
     * @throws CatalogException si un enregistrement de la base de données est invalide.
     * @throws SQLException     si la base de données n'a pas pu être interrogée pour une autre raison.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     * @throws IOException      si la lecture d'une image a échoué.
     */
    double evaluate(double x, double y, double t, short band) throws CatalogException, SQLException, IOException;

    /**
     * Retourne les coordonnées au centre du voxel le plus proche des coordonnées spécifiées.
     * Cette méthode recherche l'image la plus proche de la date spécifiée, puis recherche le
     * pixel qui contient la coordonnée géographique spécifiée. La date de milieu de l'image,
     * ainsi que les coordonnées géographiques au centre du pixel, sont retournées. Appeller
     * la méthode {@link #evaluate evaluate} avec les coordonnées retournées devrait permettre
     * d'obtenir une valeur non-interpollée.
     * <p>
     * La signature de cette méthode (à base de types primitifs seulement) vise à réduire les temps
     * de transfert sur le réseau dans le contexte des appels RMI. En particulier on retourne un
     * tableau de {@code double} plutôt qu'un objet {@link DirectPosition} afin d'éviter le transfert
     * d'un objet {@link CoordinateReferenceSystem} sur le réseau.
     *
     * @throws CatalogException si un enregistrement de la base de données est invalide.
     * @throws SQLException     si la base de données n'a pas pu être interrogée pour une autre raison.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     * @throws IOException      si la lecture d'une image a échoué.
     */
    double[] snap(double x, double y, double t) throws CatalogException, SQLException, IOException;

    /**
     * Retourne les couvertures utilisées par les méthodes {@code evaluate} pour le temps <var>t</var>
     * spécifié. L'ensemble retourné comprendra typiquement 0, 1 ou 2 éléments.
     *
     * @throws CatalogException si un enregistrement de la base de données est invalide.
     * @throws SQLException     si la base de données n'a pas pu être interrogée pour une autre raison.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     * @throws IOException      si la lecture d'une image a échoué.
     */
    List<Coverage> coveragesAt(double t) throws CatalogException, SQLException, IOException;

    /**
     * Retourne la liste des images disponibles.
     *
     * @return Liste d'images qui interceptent la plage de temps et la région géographique d'intérêt.
     * @throws CatalogException si un enregistrement de la base de données est invalide.
     * @throws SQLException     si la base de données n'a pas pu être interrogée pour une autre raison.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    Set<CoverageReference> getEntries() throws CatalogException, SQLException, RemoteException;

    /**
     * Retourne une nouvelle connexion vers les données pour l'opération spécifiées.
     * L'envelope spatio-temporelle restera la même.
     *
     * @param  operation  L'opération à appliquer pour conserver la même.
     * @throws RemoteException  si un problème est survenu lors de la communication avec le serveur.
     */
    DataConnection newInstance(Operation operation) throws RemoteException;
}
